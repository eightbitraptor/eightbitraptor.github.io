<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on www.eightbitraptor.com</title>
    <link>https://www.eightbitraptor.com/post/</link>
    <description>Recent content in Posts on www.eightbitraptor.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Matt Valentine-House</copyright>
    <lastBuildDate>Thu, 16 Jun 2022 20:00:46 +0100</lastBuildDate><atom:link href="https://www.eightbitraptor.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Signal handling in LLDB</title>
      <link>https://www.eightbitraptor.com/2022/06/16/signal-handling-in-lldb/</link>
      <pubDate>Thu, 16 Jun 2022 20:00:46 +0100</pubDate>
      
      <guid>https://www.eightbitraptor.com/2022/06/16/signal-handling-in-lldb/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t normally worry about signal handling in lldb. I don&amp;rsquo;t often work on
codebases that do significant work with them, and so if a signal is raised then
it&amp;rsquo;s a rare enough occurence that the lldb breaking on it seems like a sane
default.&lt;/p&gt;
&lt;p&gt;However, very occasionally I end up in the situation where I have to debug code
that raises a lot of signals that I know I don&amp;rsquo;t have to care about.&lt;/p&gt;
&lt;p&gt;In this case it&amp;rsquo;s useful to be able to tell lldb what to do (or not do) with
them.&lt;/p&gt;
&lt;p&gt;By default running &lt;code&gt;process handle&lt;/code&gt; will give you a list of all the available
signals and some default actions:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) process handle
NAME         PASS   STOP   NOTIFY
===========  =====  =====  ======
SIGHUP       true   true   true
SIGINT       false  true   true
SIGQUIT      true   true   true
SIGILL       true   true   true
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this output &lt;code&gt;PASS&lt;/code&gt; means to pass it through to the underlying process,
&lt;code&gt;STOP&lt;/code&gt; indicates whether lldb should break on that signal and &lt;code&gt;NOTIFY&lt;/code&gt; allows
us to configure whether we&amp;rsquo;ll be told about any signals raised.&lt;/p&gt;
&lt;p&gt;We can configure these values.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) process handle -p true -s false -n true SIGINT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This tells lldb to notify us (&lt;code&gt;-n true&lt;/code&gt;) when a SIGINT is raised, and then pass
it through the process (&lt;code&gt;-p true&lt;/code&gt;), but don&amp;rsquo;t stop the debugger (&lt;code&gt;-s false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know what I&amp;rsquo;m going to do with all the time I&amp;rsquo;ve saved now I don&amp;rsquo;t have
to continually press c to continue!&lt;/p&gt;
</description>
      <content>&lt;p&gt;I don&amp;rsquo;t normally worry about signal handling in lldb. I don&amp;rsquo;t often work on
codebases that do significant work with them, and so if a signal is raised then
it&amp;rsquo;s a rare enough occurence that the lldb breaking on it seems like a sane
default.&lt;/p&gt;
&lt;p&gt;However, very occasionally I end up in the situation where I have to debug code
that raises a lot of signals that I know I don&amp;rsquo;t have to care about.&lt;/p&gt;
&lt;p&gt;In this case it&amp;rsquo;s useful to be able to tell lldb what to do (or not do) with
them.&lt;/p&gt;
&lt;p&gt;By default running &lt;code&gt;process handle&lt;/code&gt; will give you a list of all the available
signals and some default actions:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) process handle
NAME         PASS   STOP   NOTIFY
===========  =====  =====  ======
SIGHUP       true   true   true
SIGINT       false  true   true
SIGQUIT      true   true   true
SIGILL       true   true   true
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this output &lt;code&gt;PASS&lt;/code&gt; means to pass it through to the underlying process,
&lt;code&gt;STOP&lt;/code&gt; indicates whether lldb should break on that signal and &lt;code&gt;NOTIFY&lt;/code&gt; allows
us to configure whether we&amp;rsquo;ll be told about any signals raised.&lt;/p&gt;
&lt;p&gt;We can configure these values.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) process handle -p true -s false -n true SIGINT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This tells lldb to notify us (&lt;code&gt;-n true&lt;/code&gt;) when a SIGINT is raised, and then pass
it through the process (&lt;code&gt;-p true&lt;/code&gt;), but don&amp;rsquo;t stop the debugger (&lt;code&gt;-s false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know what I&amp;rsquo;m going to do with all the time I&amp;rsquo;ve saved now I don&amp;rsquo;t have
to continually press c to continue!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Using Ruby&#39;s dump flag to read bytecode doesn&#39;t give you the whole picture</title>
      <link>https://www.eightbitraptor.com/2022/05/25/using-rubys-dump-flag-to-read-bytecode-doesnt-give-you-the-whole-picture/</link>
      <pubDate>Wed, 25 May 2022 13:26:46 +0100</pubDate>
      
      <guid>https://www.eightbitraptor.com/2022/05/25/using-rubys-dump-flag-to-read-bytecode-doesnt-give-you-the-whole-picture/</guid>
      <description>&lt;p&gt;I got &lt;a href=&#34;https://bugs.ruby-lang.org/issues/18801&#34;&gt;nerd sniped a little by a bug on the Ruby bug tracker&lt;/a&gt; recently. The author (üëã Hi &lt;a href=&#34;https://twitter.com/OngMaple&#34;&gt;Maple&lt;/a&gt;) noticed that whenever they looked at the instruction for certain Ruby code they always saw some instructions that looked like they were dead.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ruby --dump=insns -e &amp;#39;while 1+2; end&amp;#39;
== disasm: #&amp;lt;ISeq:&amp;lt;main&amp;gt;@-e:1 (1,0)-(1,14)&amp;gt; (catch: FALSE)
0000 jump                                   4                         (   1)[Li]
0002 putnil
0003 pop
0004 putobject_INT2FIX_1_
0005 putobject                              2
0007 opt_plus                               &amp;lt;calldata!mid:+, argc:1, ARGS_SIMPLE&amp;gt;[CcCr]
0009 branchif                               4
0011 putnil
0012 leave
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The instructions in question are the &lt;code&gt;putnil&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; at positions &lt;code&gt;0002&lt;/code&gt; and &lt;code&gt;0003&lt;/code&gt;. There are seemingly 2 problems with this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the &lt;code&gt;putnil&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; are immediately after an unconditional jump, that jumps over them, there&amp;rsquo;s nothing there that jumps back so they&amp;rsquo;re not going to get executed.&lt;/li&gt;
&lt;li&gt;Even if they were going to get executed, they&amp;rsquo;re seemingly a no-op&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The purpose of this post is not to answer those questions (I did some digging in the bug ticked linked above if you&amp;rsquo;re curious where I got to), but instead to point out that using &lt;code&gt;--dump=insns&lt;/code&gt; as we&amp;rsquo;re doing here doesn&amp;rsquo;t show the whole picture.&lt;/p&gt;
&lt;p&gt;In the bytecode above all those jump instructions are just given offsets in the instruction sequence to jump to, but as we&amp;rsquo;re building the sequence we don&amp;rsquo;t really know what those offsets will be. So instead we insert labels into the bytecode that are used as jump targets, and then, when we jump, we jump to a label.&lt;/p&gt;
&lt;p&gt;Part of the compilation process is about taking those labels and turning them into offsets into our final instruction sequence and then stripping the actual labels so they don&amp;rsquo;t appear in our final bytecode.&lt;/p&gt;
&lt;p&gt;But in cases like this it&amp;rsquo;s interesting to see the labels, because doing so will tell us more about the possible uses of bytecode that seemingly doesn&amp;rsquo;t make sense. Whether or not we can observe a jump happening to a place, it&amp;rsquo;s interesting to know whether it&amp;rsquo;s &lt;em&gt;even possible&lt;/em&gt; for a jump to target that place!&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s another way to visualise Ruby bytecode, one that I often overlook because it&amp;rsquo;s more cumbersome to use than &lt;code&gt;--dump=insns&lt;/code&gt;, and that&amp;rsquo;s &lt;code&gt;RubyVM::InstructionSequence.compile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to use &lt;code&gt;RubyVM::InstructionSequence&lt;/code&gt; to generate the bytecode listing above we can do this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ruby -e &amp;#34;puts RubyVM::InstructionSequence.compile(&amp;#39;while 1+2; end&amp;#39;).disasm&amp;#34;
== disasm: #&amp;lt;ISeq:&amp;lt;compiled&amp;gt;@&amp;lt;compiled&amp;gt;:1 (1,0)-(1,14)&amp;gt; (catch: FALSE)
0000 jump                                   4                         (   1)[Li]
0002 putnil
0003 pop
0004 putobject_INT2FIX_1_
0005 putobject                              2
0007 opt_plus                               &amp;lt;calldata!mid:+, argc:1, ARGS_SIMPLE&amp;gt;[CcCr]
0009 branchif                               4
0011 putnil
0012 leave
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great! So that&amp;rsquo;s a lot more typing for no appreciable benefit. But if we take a look at the &lt;code&gt;RubyVM::InstructionSequence&lt;/code&gt; object we&amp;rsquo;re calling &lt;code&gt;disasm&lt;/code&gt; on, then things get a lot more interesting&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;irb(main):001:0&amp;gt; RubyVM::InstructionSequence.compile(&amp;#39;while 1+2; end&amp;#39;).to_a
=&amp;gt; 
[&amp;#34;YARVInstructionSequence/SimpleDataFormat&amp;#34;,                                 
 3,
 1,
 1,
 {:arg_size=&amp;gt;0,
  :local_size=&amp;gt;0,
  :stack_max=&amp;gt;2,
  :node_id=&amp;gt;6,
  :code_location=&amp;gt;[1, 0, 1, 14],
  :node_ids=&amp;gt;[5, 5, 5, 0, 1, 3, 3, 5, -1]},
 &amp;#34;&amp;lt;compiled&amp;gt;&amp;#34;,
 &amp;#34;&amp;lt;compiled&amp;gt;&amp;#34;,
 &amp;#34;&amp;lt;compiled&amp;gt;&amp;#34;,
 1,
 :top,
 [],
 {},
 [],
 [1,
  :RUBY_EVENT_LINE,
  [:jump, :label_4],
  [:putnil],
  [:pop],
  :label_4,
  [:putobject_INT2FIX_1_],
  [:putobject, 2],
  [:opt_plus, {:mid=&amp;gt;:+, :flag=&amp;gt;16, :orig_argc=&amp;gt;1}],
  [:branchif, :label_4],
  [:putnil],
  [:leave]]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Woah! What&amp;rsquo;s all this stuff then? &lt;a href=&#34;https://docs.ruby-lang.org/en/master/RubyVM/InstructionSequence.html#method-i-to_a&#34;&gt;You can read about it all in the Ruby docs&lt;/a&gt; but that&amp;rsquo;s a lot of information!&lt;/p&gt;
&lt;p&gt;Cutting to the chase, the last Array that&amp;rsquo;s returned shows us the actual instruction list that is going to get executed as part of this instruction sequence. Hopefully you can see how it maps to the &lt;code&gt;disasm&lt;/code&gt; and &lt;code&gt;dump&lt;/code&gt; output above. But look - there are labels in this one too. We can clearly see where &lt;code&gt;:label_4&lt;/code&gt; is being defined, and a jump to it.&lt;/p&gt;
&lt;p&gt;This is going to help us with our debugging as we&amp;rsquo;ll now be able to see that in some cases, there is in fact, a jump target between those two seemingly dead instructions, which we can use to aid us in our sleuthing.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;irb(main):007:0&amp;gt; RubyVM::InstructionSequence.compile(&amp;#39;while 1+2; class A; next; end; end&amp;#39;).to_a.last.map { |e| puts
 e.inspect };nil
1
:RUBY_EVENT_LINE                                                                                                   
[:jump, :label_14]                                                                                                 
[:putnil]                                                                                                          
:label_3                                                                                                           
[:pop]                                                                                                             
[:jump, :label_14]                                                                                                 
:label_6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, in summary. &lt;code&gt;--dump=insns&lt;/code&gt; and &lt;code&gt;--dump=insns_without_opt&lt;/code&gt; are still really useful tools (and I&amp;rsquo;ll continue to use them by default). But, if you&amp;rsquo;re scratching your head at a Ruby instruction sequence, then definitely check out the &lt;code&gt;RubyVM::InstructionSequence&lt;/code&gt; directly - there&amp;rsquo;s more that it can show you.&lt;/p&gt;
</description>
      <content>&lt;p&gt;I got &lt;a href=&#34;https://bugs.ruby-lang.org/issues/18801&#34;&gt;nerd sniped a little by a bug on the Ruby bug tracker&lt;/a&gt; recently. The author (üëã Hi &lt;a href=&#34;https://twitter.com/OngMaple&#34;&gt;Maple&lt;/a&gt;) noticed that whenever they looked at the instruction for certain Ruby code they always saw some instructions that looked like they were dead.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ruby --dump=insns -e &amp;#39;while 1+2; end&amp;#39;
== disasm: #&amp;lt;ISeq:&amp;lt;main&amp;gt;@-e:1 (1,0)-(1,14)&amp;gt; (catch: FALSE)
0000 jump                                   4                         (   1)[Li]
0002 putnil
0003 pop
0004 putobject_INT2FIX_1_
0005 putobject                              2
0007 opt_plus                               &amp;lt;calldata!mid:+, argc:1, ARGS_SIMPLE&amp;gt;[CcCr]
0009 branchif                               4
0011 putnil
0012 leave
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The instructions in question are the &lt;code&gt;putnil&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; at positions &lt;code&gt;0002&lt;/code&gt; and &lt;code&gt;0003&lt;/code&gt;. There are seemingly 2 problems with this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the &lt;code&gt;putnil&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; are immediately after an unconditional jump, that jumps over them, there&amp;rsquo;s nothing there that jumps back so they&amp;rsquo;re not going to get executed.&lt;/li&gt;
&lt;li&gt;Even if they were going to get executed, they&amp;rsquo;re seemingly a no-op&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The purpose of this post is not to answer those questions (I did some digging in the bug ticked linked above if you&amp;rsquo;re curious where I got to), but instead to point out that using &lt;code&gt;--dump=insns&lt;/code&gt; as we&amp;rsquo;re doing here doesn&amp;rsquo;t show the whole picture.&lt;/p&gt;
&lt;p&gt;In the bytecode above all those jump instructions are just given offsets in the instruction sequence to jump to, but as we&amp;rsquo;re building the sequence we don&amp;rsquo;t really know what those offsets will be. So instead we insert labels into the bytecode that are used as jump targets, and then, when we jump, we jump to a label.&lt;/p&gt;
&lt;p&gt;Part of the compilation process is about taking those labels and turning them into offsets into our final instruction sequence and then stripping the actual labels so they don&amp;rsquo;t appear in our final bytecode.&lt;/p&gt;
&lt;p&gt;But in cases like this it&amp;rsquo;s interesting to see the labels, because doing so will tell us more about the possible uses of bytecode that seemingly doesn&amp;rsquo;t make sense. Whether or not we can observe a jump happening to a place, it&amp;rsquo;s interesting to know whether it&amp;rsquo;s &lt;em&gt;even possible&lt;/em&gt; for a jump to target that place!&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s another way to visualise Ruby bytecode, one that I often overlook because it&amp;rsquo;s more cumbersome to use than &lt;code&gt;--dump=insns&lt;/code&gt;, and that&amp;rsquo;s &lt;code&gt;RubyVM::InstructionSequence.compile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to use &lt;code&gt;RubyVM::InstructionSequence&lt;/code&gt; to generate the bytecode listing above we can do this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ruby -e &amp;#34;puts RubyVM::InstructionSequence.compile(&amp;#39;while 1+2; end&amp;#39;).disasm&amp;#34;
== disasm: #&amp;lt;ISeq:&amp;lt;compiled&amp;gt;@&amp;lt;compiled&amp;gt;:1 (1,0)-(1,14)&amp;gt; (catch: FALSE)
0000 jump                                   4                         (   1)[Li]
0002 putnil
0003 pop
0004 putobject_INT2FIX_1_
0005 putobject                              2
0007 opt_plus                               &amp;lt;calldata!mid:+, argc:1, ARGS_SIMPLE&amp;gt;[CcCr]
0009 branchif                               4
0011 putnil
0012 leave
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great! So that&amp;rsquo;s a lot more typing for no appreciable benefit. But if we take a look at the &lt;code&gt;RubyVM::InstructionSequence&lt;/code&gt; object we&amp;rsquo;re calling &lt;code&gt;disasm&lt;/code&gt; on, then things get a lot more interesting&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;irb(main):001:0&amp;gt; RubyVM::InstructionSequence.compile(&amp;#39;while 1+2; end&amp;#39;).to_a
=&amp;gt; 
[&amp;#34;YARVInstructionSequence/SimpleDataFormat&amp;#34;,                                 
 3,
 1,
 1,
 {:arg_size=&amp;gt;0,
  :local_size=&amp;gt;0,
  :stack_max=&amp;gt;2,
  :node_id=&amp;gt;6,
  :code_location=&amp;gt;[1, 0, 1, 14],
  :node_ids=&amp;gt;[5, 5, 5, 0, 1, 3, 3, 5, -1]},
 &amp;#34;&amp;lt;compiled&amp;gt;&amp;#34;,
 &amp;#34;&amp;lt;compiled&amp;gt;&amp;#34;,
 &amp;#34;&amp;lt;compiled&amp;gt;&amp;#34;,
 1,
 :top,
 [],
 {},
 [],
 [1,
  :RUBY_EVENT_LINE,
  [:jump, :label_4],
  [:putnil],
  [:pop],
  :label_4,
  [:putobject_INT2FIX_1_],
  [:putobject, 2],
  [:opt_plus, {:mid=&amp;gt;:+, :flag=&amp;gt;16, :orig_argc=&amp;gt;1}],
  [:branchif, :label_4],
  [:putnil],
  [:leave]]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Woah! What&amp;rsquo;s all this stuff then? &lt;a href=&#34;https://docs.ruby-lang.org/en/master/RubyVM/InstructionSequence.html#method-i-to_a&#34;&gt;You can read about it all in the Ruby docs&lt;/a&gt; but that&amp;rsquo;s a lot of information!&lt;/p&gt;
&lt;p&gt;Cutting to the chase, the last Array that&amp;rsquo;s returned shows us the actual instruction list that is going to get executed as part of this instruction sequence. Hopefully you can see how it maps to the &lt;code&gt;disasm&lt;/code&gt; and &lt;code&gt;dump&lt;/code&gt; output above. But look - there are labels in this one too. We can clearly see where &lt;code&gt;:label_4&lt;/code&gt; is being defined, and a jump to it.&lt;/p&gt;
&lt;p&gt;This is going to help us with our debugging as we&amp;rsquo;ll now be able to see that in some cases, there is in fact, a jump target between those two seemingly dead instructions, which we can use to aid us in our sleuthing.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;irb(main):007:0&amp;gt; RubyVM::InstructionSequence.compile(&amp;#39;while 1+2; class A; next; end; end&amp;#39;).to_a.last.map { |e| puts
 e.inspect };nil
1
:RUBY_EVENT_LINE                                                                                                   
[:jump, :label_14]                                                                                                 
[:putnil]                                                                                                          
:label_3                                                                                                           
[:pop]                                                                                                             
[:jump, :label_14]                                                                                                 
:label_6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, in summary. &lt;code&gt;--dump=insns&lt;/code&gt; and &lt;code&gt;--dump=insns_without_opt&lt;/code&gt; are still really useful tools (and I&amp;rsquo;ll continue to use them by default). But, if you&amp;rsquo;re scratching your head at a Ruby instruction sequence, then definitely check out the &lt;code&gt;RubyVM::InstructionSequence&lt;/code&gt; directly - there&amp;rsquo;s more that it can show you.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Weird Ruby: Using `SUPPORT_JOKE` to actually help!</title>
      <link>https://www.eightbitraptor.com/2022/05/24/weird-ruby-using-support_joke-to-actually-help/</link>
      <pubDate>Tue, 24 May 2022 21:29:13 +0100</pubDate>
      
      <guid>https://www.eightbitraptor.com/2022/05/24/weird-ruby-using-support_joke-to-actually-help/</guid>
      <description>&lt;p&gt;So, Ruby, for whatever reason, has a bunch of easter eggs hidden in its VM.
There is the &lt;a href=&#34;https://patshaughnessy.net/2012/2/29/the-joke-is-on-us-how-ruby-1-9-supports-the-goto-statement&#34;&gt;&lt;code&gt; __goto__&lt;/code&gt; and &lt;code&gt;__label__&lt;/code&gt;
syntax&lt;/a&gt;;
for when you really really need a goto statement in your program! And there are
also a couple of specific VM instructions that you can optionally enable.&lt;/p&gt;
&lt;p&gt;To enable all this you need to hardcode the &lt;code&gt;OPT_SUPPORT_JOKE&lt;/code&gt;
preprocessor constant in &lt;code&gt;vm_opts.h&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; (it defaults to &lt;code&gt;0&lt;/code&gt; obviously).&lt;/p&gt;
&lt;p&gt;As an aside: this variable &lt;em&gt;is&lt;/em&gt; all wired up via the autotools, but setting it
the normal way using &lt;code&gt;cppflags=&amp;quot;-DOPT_SUPPORT_JOKE=1&amp;quot;&lt;/code&gt; doesn&amp;rsquo;t work, because the
Ruby script that parses the VMs instruction definition DSL into actual C
code relies on grepping the content of &lt;code&gt;vm_opts.h&lt;/code&gt; for its optional values, but
when you use &lt;code&gt;cflags&lt;/code&gt;, they&amp;rsquo;re effectively configured in the memory of a
different process.&lt;/p&gt;
&lt;p&gt;So if you rely on the &lt;code&gt;cflags&lt;/code&gt; only, you get a bunch of code inside &lt;code&gt;#ifdef&lt;/code&gt;&amp;rsquo;s
that is compiled assuming certain instructions exist, but those instructions
don&amp;rsquo;t exist because their existence depends on an actual &lt;code&gt;1&lt;/code&gt; being hard coded
inside the file.&lt;/p&gt;
&lt;p&gt;Ask me how I know.&lt;/p&gt;
&lt;p&gt;Anyway&amp;hellip; Ranting aside&lt;/p&gt;
&lt;p&gt;I went down this rabbit hole for a reason. I was looking at the output of
running ruby with the various &lt;code&gt;--dump&lt;/code&gt; options to work out which ast nodes
generated which YARV instructions.&lt;/p&gt;
&lt;p&gt;For instance, the Ruby code &lt;code&gt;while true; end&lt;/code&gt; generates this AST&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ruby --dump=parsetree_with_comment -e &amp;#39;while true; end&amp;#39;

# @ NODE_SCOPE (id: 3, line: 1, location: (1,0)-(1,15))
# | # new scope
# | # format: [nd_tbl]: local table, [nd_args]: arguments, [nd_body]: body
# +- nd_tbl (local table): (empty)
# +- nd_args (arguments):
# |   (null node)
# +- nd_body (body):
#     @ NODE_WHILE (id: 2, line: 1, location: (1,0)-(1,15))*
#     | # while statement
#     | # format: while [nd_cond]; [nd_body]; end
#     | # example: while x == 1; foo; end
#     +- nd_state (begin-end-while?): 1 (while-end)
#     +- nd_cond (condition):
#     |   @ NODE_TRUE (id: 0, line: 1, location: (1,6)-(1,10))
#     |   | # true
#     |   | # format: true
#     |   | # example: true
#     +- nd_body (body):
#         @ NODE_BEGIN (id: 1, line: 1, location: (1,11)-(1,11))
#         | # begin statement
#         | # format: begin; [nd_body]; end
#         | # example: begin; 1; end
#         +- nd_body (body):
#             (null node)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which then compiles into this YARV bytecode, which the VM then runs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ruby --dump=insns_without_opt -e &amp;#39;while true; end&amp;#39;
== disasm: #&amp;lt;ISeq:&amp;lt;main&amp;gt;@-e:1 (1,0)-(1,15)&amp;gt; (catch: FALSE)
0000 jump                                   6                         (   1)[Li]
0002 putnil
0003 pop
0004 jump                                   6
0006 jump                                   6
0008 putnil
0009 leave
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And what I wanted was basically &lt;code&gt;puts&lt;/code&gt; debugging, but for bytecode. I want to
know exactly which lines of bytecode are emitted from each AST node.&lt;/p&gt;
&lt;p&gt;My usual trick for this, in normal code land, would be to &lt;code&gt;puts&lt;/code&gt; some known text
out to &lt;code&gt;stderr&lt;/code&gt; or whatever, at the beginning, and at the end of the code region
I care about, so I can isolate in the output, exactly which log messages I care
about.&lt;/p&gt;
&lt;p&gt;So I wondered if I could make a couple of no-op YARV instructions that I could
just insert into my bytecode at various points to let me know where certain
things are being triggered from.&lt;/p&gt;
&lt;p&gt;And as we mentioned earlier, It turns out that YARV has a couple of extraneous,
random instructions that maybe we can used to help debug stuff. They&amp;rsquo;re not quite
no-ops, as they do push values back onto the stack (And I guess they were
probably funny once. Maybe[1]).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/* BLT */
DEFINE_INSN_IF(SUPPORT_JOKE)
bitblt
()
()
(VALUE ret)
{
    ret = rb_str_new2(&amp;#34;a bit of bacon, lettuce and tomato&amp;#34;);
}

/* The Answer to Life, the Universe, and Everything */
DEFINE_INSN_IF(SUPPORT_JOKE)
answer
()
()
(VALUE ret)
{
    ret = INT2FIX(42);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Neither of these take any operands (illustrated by the first set of empty
parenthesis); nor do they pop values from the stack (the second empty
parens); but they do push a value onto the stack (the value &lt;code&gt;ret&lt;/code&gt; in the third set of parens).&lt;/p&gt;
&lt;p&gt;This means that, providing you&amp;rsquo;re only debugging simple bytecode (my &lt;code&gt;while true; end&lt;/code&gt; is a good example), then you can use these as is. But as soon as you
are relying on the contents of the stack you&amp;rsquo;re going to need to do something a
bit more nuanced (even if that is just following up with a &lt;code&gt;pop&lt;/code&gt; instruction to
get rid of the crap you just pushed onto the stack).&lt;/p&gt;
&lt;p&gt;Add them to your bytecode at various points in &lt;code&gt;compile.c&lt;/code&gt; using the macro
&lt;code&gt;ADD_INSN&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ADD_INSN(ret, line_node, bitlt);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And wonder in the beauty of your work&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ./miniruby --dump=insns_without_opt -e &amp;#39;while true; end&amp;#39;
== disasm: #&amp;lt;ISeq:&amp;lt;main&amp;gt;@-e:1 (1,0)-(1,15)&amp;gt; (catch: FALSE)
0000 bitblt                                                           (   1)[Li]
0001 jump                                   7
0003 putnil
0004 pop
0005 jump                                   7
0007 jump                                   7
0009 putnil
0010 bitblt
0011 leave
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[1]: Look. I enjoy the Hitchhikers guide, and Douglas Adams, as much as the next
sci-fi loving, geriatric-millenial, british computer nerd. But can we just
accept that the number 42 is just a number. And that these jokes have been
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Associations/CollectionProxy.html#method-i-forty_two&#34;&gt;done to
death&lt;/a&gt;
at this point. Please.&lt;/p&gt;
</description>
      <content>&lt;p&gt;So, Ruby, for whatever reason, has a bunch of easter eggs hidden in its VM.
There is the &lt;a href=&#34;https://patshaughnessy.net/2012/2/29/the-joke-is-on-us-how-ruby-1-9-supports-the-goto-statement&#34;&gt;&lt;code&gt; __goto__&lt;/code&gt; and &lt;code&gt;__label__&lt;/code&gt;
syntax&lt;/a&gt;;
for when you really really need a goto statement in your program! And there are
also a couple of specific VM instructions that you can optionally enable.&lt;/p&gt;
&lt;p&gt;To enable all this you need to hardcode the &lt;code&gt;OPT_SUPPORT_JOKE&lt;/code&gt;
preprocessor constant in &lt;code&gt;vm_opts.h&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; (it defaults to &lt;code&gt;0&lt;/code&gt; obviously).&lt;/p&gt;
&lt;p&gt;As an aside: this variable &lt;em&gt;is&lt;/em&gt; all wired up via the autotools, but setting it
the normal way using &lt;code&gt;cppflags=&amp;quot;-DOPT_SUPPORT_JOKE=1&amp;quot;&lt;/code&gt; doesn&amp;rsquo;t work, because the
Ruby script that parses the VMs instruction definition DSL into actual C
code relies on grepping the content of &lt;code&gt;vm_opts.h&lt;/code&gt; for its optional values, but
when you use &lt;code&gt;cflags&lt;/code&gt;, they&amp;rsquo;re effectively configured in the memory of a
different process.&lt;/p&gt;
&lt;p&gt;So if you rely on the &lt;code&gt;cflags&lt;/code&gt; only, you get a bunch of code inside &lt;code&gt;#ifdef&lt;/code&gt;&amp;rsquo;s
that is compiled assuming certain instructions exist, but those instructions
don&amp;rsquo;t exist because their existence depends on an actual &lt;code&gt;1&lt;/code&gt; being hard coded
inside the file.&lt;/p&gt;
&lt;p&gt;Ask me how I know.&lt;/p&gt;
&lt;p&gt;Anyway&amp;hellip; Ranting aside&lt;/p&gt;
&lt;p&gt;I went down this rabbit hole for a reason. I was looking at the output of
running ruby with the various &lt;code&gt;--dump&lt;/code&gt; options to work out which ast nodes
generated which YARV instructions.&lt;/p&gt;
&lt;p&gt;For instance, the Ruby code &lt;code&gt;while true; end&lt;/code&gt; generates this AST&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ruby --dump=parsetree_with_comment -e &amp;#39;while true; end&amp;#39;

# @ NODE_SCOPE (id: 3, line: 1, location: (1,0)-(1,15))
# | # new scope
# | # format: [nd_tbl]: local table, [nd_args]: arguments, [nd_body]: body
# +- nd_tbl (local table): (empty)
# +- nd_args (arguments):
# |   (null node)
# +- nd_body (body):
#     @ NODE_WHILE (id: 2, line: 1, location: (1,0)-(1,15))*
#     | # while statement
#     | # format: while [nd_cond]; [nd_body]; end
#     | # example: while x == 1; foo; end
#     +- nd_state (begin-end-while?): 1 (while-end)
#     +- nd_cond (condition):
#     |   @ NODE_TRUE (id: 0, line: 1, location: (1,6)-(1,10))
#     |   | # true
#     |   | # format: true
#     |   | # example: true
#     +- nd_body (body):
#         @ NODE_BEGIN (id: 1, line: 1, location: (1,11)-(1,11))
#         | # begin statement
#         | # format: begin; [nd_body]; end
#         | # example: begin; 1; end
#         +- nd_body (body):
#             (null node)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which then compiles into this YARV bytecode, which the VM then runs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ruby --dump=insns_without_opt -e &amp;#39;while true; end&amp;#39;
== disasm: #&amp;lt;ISeq:&amp;lt;main&amp;gt;@-e:1 (1,0)-(1,15)&amp;gt; (catch: FALSE)
0000 jump                                   6                         (   1)[Li]
0002 putnil
0003 pop
0004 jump                                   6
0006 jump                                   6
0008 putnil
0009 leave
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And what I wanted was basically &lt;code&gt;puts&lt;/code&gt; debugging, but for bytecode. I want to
know exactly which lines of bytecode are emitted from each AST node.&lt;/p&gt;
&lt;p&gt;My usual trick for this, in normal code land, would be to &lt;code&gt;puts&lt;/code&gt; some known text
out to &lt;code&gt;stderr&lt;/code&gt; or whatever, at the beginning, and at the end of the code region
I care about, so I can isolate in the output, exactly which log messages I care
about.&lt;/p&gt;
&lt;p&gt;So I wondered if I could make a couple of no-op YARV instructions that I could
just insert into my bytecode at various points to let me know where certain
things are being triggered from.&lt;/p&gt;
&lt;p&gt;And as we mentioned earlier, It turns out that YARV has a couple of extraneous,
random instructions that maybe we can used to help debug stuff. They&amp;rsquo;re not quite
no-ops, as they do push values back onto the stack (And I guess they were
probably funny once. Maybe[1]).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/* BLT */
DEFINE_INSN_IF(SUPPORT_JOKE)
bitblt
()
()
(VALUE ret)
{
    ret = rb_str_new2(&amp;#34;a bit of bacon, lettuce and tomato&amp;#34;);
}

/* The Answer to Life, the Universe, and Everything */
DEFINE_INSN_IF(SUPPORT_JOKE)
answer
()
()
(VALUE ret)
{
    ret = INT2FIX(42);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Neither of these take any operands (illustrated by the first set of empty
parenthesis); nor do they pop values from the stack (the second empty
parens); but they do push a value onto the stack (the value &lt;code&gt;ret&lt;/code&gt; in the third set of parens).&lt;/p&gt;
&lt;p&gt;This means that, providing you&amp;rsquo;re only debugging simple bytecode (my &lt;code&gt;while true; end&lt;/code&gt; is a good example), then you can use these as is. But as soon as you
are relying on the contents of the stack you&amp;rsquo;re going to need to do something a
bit more nuanced (even if that is just following up with a &lt;code&gt;pop&lt;/code&gt; instruction to
get rid of the crap you just pushed onto the stack).&lt;/p&gt;
&lt;p&gt;Add them to your bytecode at various points in &lt;code&gt;compile.c&lt;/code&gt; using the macro
&lt;code&gt;ADD_INSN&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ADD_INSN(ret, line_node, bitlt);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And wonder in the beauty of your work&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‚ùØ ./miniruby --dump=insns_without_opt -e &amp;#39;while true; end&amp;#39;
== disasm: #&amp;lt;ISeq:&amp;lt;main&amp;gt;@-e:1 (1,0)-(1,15)&amp;gt; (catch: FALSE)
0000 bitblt                                                           (   1)[Li]
0001 jump                                   7
0003 putnil
0004 pop
0005 jump                                   7
0007 jump                                   7
0009 putnil
0010 bitblt
0011 leave
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[1]: Look. I enjoy the Hitchhikers guide, and Douglas Adams, as much as the next
sci-fi loving, geriatric-millenial, british computer nerd. But can we just
accept that the number 42 is just a number. And that these jokes have been
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Associations/CollectionProxy.html#method-i-forty_two&#34;&gt;done to
death&lt;/a&gt;
at this point. Please.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Brewing a DIPA: Moving from extract to all-grain Home brewing</title>
      <link>https://www.eightbitraptor.com/2021/04/20/brewing-a-dipa-moving-from-extract-to-all-grain-home-brewing/</link>
      <pubDate>Tue, 20 Apr 2021 22:14:18 +0100</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/04/20/brewing-a-dipa-moving-from-extract-to-all-grain-home-brewing/</guid>
      <description>&lt;p&gt;Back in my &lt;a href=&#34;https://www.eightbitraptor.com/2021/01/03/2020-a-year-in-review/&#34;&gt;retrospective on 2020&lt;/a&gt; I mentioned that I&amp;rsquo;d picked up brewing beer as a pandemic hobby.&lt;/p&gt;
&lt;p&gt;There are three main methods of brewing you see homebrewers in the UK doing. The first uses the beer-in-a-can kits that you can buy in &lt;a href=&#34;https://www.wilko.com/en-uk/wilko-ipa-brewing-kit-15kg/p/0440627&#34;&gt;home hardware stores in the UK&lt;/a&gt;: you get basically concentrated beer extract that you dilute down to the required concentration and ferment. These may or may not have extra hops added into the fermenter depending on the kit.&lt;/p&gt;
&lt;p&gt;The second is extract brewing. You start with a simple pale ale malt extract. The brewer can then use speciality grains, which are steeped like a tea in the diluted extract to create &lt;a href=&#34;https://en.wikipedia.org/wiki/Wort&#34;&gt;sweet wort&lt;/a&gt;. The sweet wort is then boiled with hops to add bitterness and more flavour to create wort, which is then fermented.&lt;/p&gt;
&lt;p&gt;The last way is all grain brewing: Instead of using malt extract, the brewer starts by crushing the grains, and then steeping them in hot water to activate the enzymes required to break the starches down into sugars in a process known as &lt;a href=&#34;https://beerandbrewing.com/dictionary/BkD3Ilopul/#:~:text=Mashing%20is%20the%20term%20given,soluble%2C%20creating%20the%20sweet%20fermentable&#34;&gt;mashing&lt;/a&gt;. Then the rest the process is the same as extract brewing. The wort is boiled with hops, and then fermented.&lt;/p&gt;
&lt;p&gt;This is proper brewing: (mostly) the way that beer has been made since the Sumerians carved the oldest known surviving beer recipe on stone tablets in 3900 BC&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I am the sort of person who likes processes and control (God that makes me sound like an arse) and for this reason I always wanted to do all-grain brewing. Having complete control over the whole beer making process with as few shortcuts as possible was always my main goal.&lt;/p&gt;
&lt;p&gt;That being said. I also didn&amp;rsquo;t want to invest in all the kit required to do all-grain without knowing if I was even going to enjoy making beer rather than just drinking it!&lt;/p&gt;
&lt;p&gt;In 2020, I was gifted a &lt;a href=&#34;https://www.northernbrewer.com/products/craft-beer-making-kit-with-siphonless-fermenter-1-gallon&#34;&gt;small batch extract kit&lt;/a&gt; for my birthday, which was perfect. It was just enough equipment to get started with the extract process, made a small amount of beer and allowed me to give the process a try without too much investment.&lt;/p&gt;
&lt;p&gt;I ended up doing 3 batches of ~4L each and I was hooked. I started to upgrade my equipment piece by piece, first was the fermenter - I got a plastic 12L Spiedel fermenter which allowed me to make a bigger batch using a partial boil process, then I got hold of a bigger 19L stock pot, so I could do full boils (and stop using the family pasta pot to make beer in).&lt;/p&gt;
&lt;p&gt;Finally, in the 2020 Back Friday Sales, I snagged a 20L SS Brewtech kettle, and the matching 13L SS Brewtech stainless fermenter with a decent discount. I vowed that with my new shiny equipment I was finally going to start brewing all-grain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-gear.jpeg&#34; alt=&#34;New Brew gear&#34;&gt;&lt;/p&gt;
&lt;p&gt;But be warned: I have no idea what I&amp;rsquo;m doing.&lt;/p&gt;
&lt;h2 id=&#34;the-recipe&#34;&gt;The Recipe&lt;/h2&gt;
&lt;p&gt;I wanted to start simple because I have never done a mash before, and the science behind enzyme activation and sugar extraction is intimidating. My grist is comprised of a single pale ale malt - Thomas Fawcett Golden Promise. I mostly just picked a pale malt at random, there are so many to choose from and without much experience of this stage of the brewing process it was all new to me. I do know that I like a lot of beers with Golden Promise as the base so that was good enough for this time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-ingredients.jpeg&#34; alt=&#34;Raw Ingredients&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next up was the choice of hops. It&amp;rsquo;s pretty typical to choose different types of hop, some high alpha acid varieties for bittering, and then different hops for flavour and aroma, to be used at different times during the boil. I chose to keep it simple and just use one type of hop throughout, because I want to start training my palette to identify the different characteristics that each hop could add to the brew.&lt;/p&gt;
&lt;p&gt;This time it&amp;rsquo;s some Nelson Sauvin I picked up on a whim from &lt;a href=&#34;https://www.themaltmiller.co.uk/&#34;&gt;the online homebrew store I use&lt;/a&gt;. I had originally planned to use some Azacca I already had, but these came through with a small hole in the packaging, which meant the vacuum seal wasn&amp;rsquo;t holding so I had to use them first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-hops.jpeg&#34; alt=&#34;My hop schedule&#34;&gt;&lt;/p&gt;
&lt;p&gt;This kind of beer is known as a SMASH beer: Single Malt And Single Hop. It&amp;rsquo;s a pretty common way of brewing when you want to test variations to a recipe: You can vary your base malt and the differences won&amp;rsquo;t be overpowered by darker speciality malts as they might be in other recipes. You can also really focus on the characteristics of your hop choice against a familiar known base.&lt;/p&gt;
&lt;p&gt;Brewing this multiple times and changing one variable each time is how I intend to start training myself to identify what impact each component has on the finished beer.&lt;/p&gt;
&lt;p&gt;Because I want to focus on the flavours of the malt and the hops I chose to use a yeast that I&amp;rsquo;m pretty familiar with, and conveniently, one that&amp;rsquo;s well known for being &amp;ldquo;clean&amp;rdquo;, or imparting few characteristics of its own to a brew: Safale US-05 dried american ale yeast.&lt;/p&gt;
&lt;p&gt;So with my ingredients chosen, I just had to work out how to combine them! After some tweaking, I settled on a recipe that looks a little like a double IPA: Using 4kg of Golden Promise for a pale straw coloured beer, at about 9%. Quite hoppy, with an IBU of 73, dry hopped with just over 4 g/L.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how it stacks up against the &lt;a href=&#34;https://beerrecipes.org/BJCP-2015-Style/72/22a-double-ipa.html&#34;&gt;BJCP 2015 style guidelines for an Imperial IPA&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-style.jpeg&#34; alt=&#34;the recipe numbers&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-process&#34;&gt;The Process&lt;/h2&gt;
&lt;p&gt;The traditional all-grain process goes something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First you collect your liquor (water), and heat it to strike temperature, this is a few degrees above your desired mash temperature to allow for cooling when the grain is added.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then you add your liquor to the mash tun, and pour in the grist (crushed grains) to create a porridge like mixture, stirring continuously to ensure you avoid dough balls. This is called mashing in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then you insulate the mash tun and leave it for an hour or more so the enzymes in the grain can activate and start converting starches in the grain into sugar, this is the mash.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the mash has finished you need to drain the sweet wort away from the spent grain (lautering), you can also rinse the grain bed with hot water to collect any residual sugar (sparging).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The boil is next. Wort is boiled for 60-90 minutes, with hops added at various times. Bittering hops go in at the start of the boil so their alpha acids can be isomerised into iso-alpha acids, the chemical that makes beer bitter. Flavour and aroma hops are added nearer the end of the boil so less of the volatile flavour compounds boil away.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that the boil is over we need to chill the wort down rapidly to around 25-30¬∞C and transfer it to our fermentation vessel. When it&amp;rsquo;s cool and in the fermenter we can add the yeast (pitching). This is the point where sanitisation becomes key. As soon as the wort is off the boil, the risk of contamination rises. This means wild yeast and other kinds of bacteria can infect your beer. In the best case you might end up with an awesome sour, in the worst case your wort is going down the drain. Either way you won&amp;rsquo;t end up with the beer you set out to make.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the yeast has been pitched, the beer is kept at a reasonably constant temperature for the yeast to ferment the sugars into alcohol. This is the leave it the heck alone stage!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now that you know all the steps involved to brew a beer using an all-grain process. I can tell you that this is not the process I used! Technically the process I used is called an all-grain single-vessel, no-sparge no-chill process. From what we&amp;rsquo;ve seen so far you should know what that means right?&lt;/p&gt;
&lt;p&gt;Just kidding.&lt;/p&gt;
&lt;p&gt;The process I used is normally called brew-in-a-bag (BIAB). this means that instead of mashing in a mash tun and then lautering (and sparging) into a boil kettle. I mash directly inside my brewing kettle using a large nylon bag to hold the grains. A lot like a massive tea bag.&lt;/p&gt;
&lt;p&gt;Instead of lautering I just needed to lift the bag containing the grain out of the kettle, and let it drain for a while, leaving the sweet wort behind in the kettle ready for the boil.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.einbrew.com/post/no-chill-brewing-saving-water&#34;&gt;no-chill part is a technique popularised by Australian homebrewers&lt;/a&gt;, where summer droughts and water shortages mean it&amp;rsquo;s often not possible to use the 100+ litres of water required to chill the wort down with an immersion chiller. It basicaly just involves shoving the hot wort straight off the boil into a sealed container, often a HDPE water container known as a cube, and letting it cool down to pitching temperature naturally over a day or two. Because the wort is transferred hot into the cube and then sealed so that it&amp;rsquo;s air tight, the heat sterilises the container and ensures that the wort cannot spoil while it&amp;rsquo;s cooling.&lt;/p&gt;
&lt;h2 id=&#34;brew-day&#34;&gt;Brew day&lt;/h2&gt;
&lt;p&gt;Brew day for me was a three part affair spread over the weekend. I mashed on a saturday morning, while the kids were around. It turns out helping daddy make beer is a good way of tempting a 3 year old away from the TV.&lt;/p&gt;
&lt;h3 id=&#34;part-1-saturday-morning-the-mash&#34;&gt;Part 1: Saturday morning. The Mash&lt;/h3&gt;
&lt;p&gt;First I collected 17 litres of water, and heated it to 68¬∞C.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-strike.jpeg&#34; alt=&#34;Collecting my liquour&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then I added my grains in the grain bag and stirred them in. I was aiming for a mash temperature of 65¬∞C - I&amp;rsquo;m not going to explain why because I&amp;rsquo;d be basically just cargo culting some science I don&amp;rsquo;t fully understand yet, but I was hoping for a good balance between the body of the final beer and the fermentability.&lt;/p&gt;
&lt;p&gt;What I hadn&amp;rsquo;t anticipated was the difficulty I would have holding on to 4Kg&amp;rsquo;s of grain in one hand, and attempting to pour it slowly and uniformly into the kettle whilst stirring with the other hand. I spent so long teasing out dough balls that my temperature dropped to ~62¬∞C.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-mash.jpeg&#34; alt=&#34;The mash&#34;&gt;&lt;/p&gt;
&lt;p&gt;I was planning on borrowing a technique from &lt;a href=&#34;https://www.youtube.com/channel/UCoAhRuxJb1K-d4BBSLNX1RQ&#34;&gt;an Australian homebrewer who&amp;rsquo;s Youtube channel I subscribe to&lt;/a&gt;, and put the pot in the oven at a really low temperature to keep it stable for the duration of the mash. So to try and compensate for some of the temperature drop I turned the oven up a bit higher than normal. This sort of worked I ended up mashing for two hours, and the temperature hit 64¬∞C about 45 minutes in and held for the rest of the time.&lt;/p&gt;
&lt;p&gt;While my grains were mashing I mowed the lawn and did some other things, and then came back to drain the wort. Lifiting the bag was harder than I anticipated, partly because my oven temperature shenanigans had resulting in me melting one of the handles off of my grain bag, which I now need to fix or replace before my next brew, and partly just because a bag that contained 4Kg of grain that had been soaking in hot water for 2 hours is pretty damn heavy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-lauter.jpeg&#34; alt=&#34;Lautering&#34;&gt;&lt;/p&gt;
&lt;p&gt;After a fairly hefty squeeze of the bag (to squeeze or not is a very hotly contested topic in homebrew circles) I extracted 14.5 Litres of sweet wort at 1.066 pre-boil gravity! My pre-boil numbers were very close to what my brewing calculator predicted, and had also meant that for my first attempt at mashing ever, I&amp;rsquo;d managed to hit a mash efficiency of 72%. Very happy with that as the average efficiency for BIAB brewers is about 75% and most places tell you to assume you&amp;rsquo;ll get 60% when starting out and work from there.&lt;/p&gt;
&lt;p&gt;I calculated how much wort was left in the grains and fed those numbers back into my calculator to make the next brew calculations more accurate, and left the brew alone for most of the day.&lt;/p&gt;
&lt;h3 id=&#34;part-2-saturday-evening-the-boil&#34;&gt;Part 2: Saturday evening. The Boil&lt;/h3&gt;
&lt;p&gt;I boil in the kitchen using the powerful wok burner on our gas cooker, so I always wait until the kids are in bed before I boil. I am terrified of the damage that could be inflicted by 15L of boiling sugar water if I mess something up or have an equipment failure.&lt;/p&gt;
&lt;p&gt;So I started heating at about 8pm. It took about 30 minutes to come to the boil and get passed the &lt;a href=&#34;http://howtobrew.com/book/section-1/boiling-and-cooling/7-2-the-hot-break&#34;&gt;hot break&lt;/a&gt;. Once it had, I added my 60 minute bittering addition of 15g Nelson Sauvin hops and started my timer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-hopadditions.jpeg&#34; alt=&#34;Hop additions measured out&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re passed the hot break of the boil there&amp;rsquo;s not really a lot to do, so I pottered around the kitchen tidying and sorting out some laundry and a few life admin tasks until it was done. Stopping whenever my timer told me to to add the next hop addition or some irish moss (for clarifying the beer).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-boil.jpeg&#34; alt=&#34;Boiling the wort&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once the boil was over, I turned off the heat, added my final hop addition and set another timer for 30 minutes. This is called the &lt;a href=&#34;https://byo.com/article/hop-stands-2/&#34;&gt;hop stand, or whirlpool&lt;/a&gt; addition and adds more hop character to a beer.&lt;/p&gt;
&lt;p&gt;Once the 30 minutes were up I drained the hot wort straight into my fermenter, which I&amp;rsquo;d already sanitised, and sealed the lid. Now it can sit there and cool down in it&amp;rsquo;s own time until I&amp;rsquo;m ready to pitch the yeast. I ended up with almost exactly 11 litres of wort post boil.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-draining.jpeg&#34; alt=&#34;Draining hot wort into the fermenter&#34;&gt;&lt;/p&gt;
&lt;p&gt;Only thing left to do this evening is to clean my equipment, and update my calculations and then I&amp;rsquo;m done for the day. All grain brewing leaves a lot more trub in the kettle than I&amp;rsquo;m used to with extract brewing. I measured out how much wort was left in the bottom of the pan, as well as my boil off rate and pushed those numbers into the brewing software I use ready for the next brew, and went to bed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-gunk.jpeg&#34; alt=&#34;Trub&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;part-3-sunday-lunchtime-pitching&#34;&gt;Part 3: Sunday lunchtime. Pitching&lt;/h3&gt;
&lt;p&gt;The wort took about 18 hours to come down to tempterature using my very scientific measuring apparatus. I put my hand on the outside of the fermenter and when it felt room temperature then it was probably good to go.&lt;/p&gt;
&lt;p&gt;I rehydrated the sached of Safale US-05 according to the instructions in &lt;a href=&#34;http://www.howtobrew.com/&#34;&gt;the brewing bible&lt;/a&gt;, sprinking the yeast onto 250ml of cooled boiled water and waiting 15 minutes before stirring it in and waiting another 15 minutes.&lt;/p&gt;
&lt;p&gt;Once my yeast starter was ready I unsealed my fermenter, tipped the yeast straight in, making sure not to touch or let anything fall into the wort. Then I quickly sealed the lid again and attached a blow-off tube with the other end sitting in a kilner jar full of sanitiser.&lt;/p&gt;
&lt;p&gt;I normally start my brews off with a blow-off tube for two or three days while the most vigorous fermentation is happening. I&amp;rsquo;ve been doing this since I filled a fermenter a bit too full once and the first few days of active fermentation caused beer and &lt;a href=&#34;https://beerandbrewing.com/dictionary/6E3PezlzAK/&#34;&gt;kr√§usen&lt;/a&gt; to explode through the airlock and pulse out of the fermenter for a while, turning my fermenter into a beer volcano and making a mess of the kitchen.&lt;/p&gt;
&lt;p&gt;6 hours later, I came back to find fermentation had started and was running along nicely. And a few hours after that, with bubbles burping regularly from the tube, I sat down with a beer and started writing this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-fermenter.jpeg&#34; alt=&#34;Fermentation&#34;&gt;&lt;/p&gt;
&lt;p&gt;I will never get bored of this stage! I&amp;rsquo;ll wait a few days for the fastest bubbles to subside, and then when it&amp;rsquo;s calmed down a bit I&amp;rsquo;ll swap the blow off tube for an airlock and put it somewhere out of sight for a couple of weeks. I&amp;rsquo;ve got some dry-hopping to do when primary fermentation has slowed down, but other than that there&amp;rsquo;s nothing else to do until it&amp;rsquo;s time to bottle the beer.&lt;/p&gt;
&lt;p&gt;Thanks for reading this far. I&amp;rsquo;m pretty proud of my first all-grain brew day. I really enjoy the process of brewing my own beer, it&amp;rsquo;s a very rewarding experience, despite have no idea what&amp;rsquo;s happening inside the fermenter. For all I know it could all be going horribly wrong and I&amp;rsquo;ll end up with vinegar, and for all my efforts it&amp;rsquo;ll go down the drain.&lt;/p&gt;
&lt;p&gt;But I can&amp;rsquo;t tell at the moment, and there&amp;rsquo;s nothing to do now but wait. So as the denizens of homebrew forums are fond of saying: Relax, don&amp;rsquo;t worry, have a homebrew. Cheers.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;As part of the Hymn to Ninkasi, the goddess of beer. The &lt;a href=&#34;https://www.winemag.com/2020/12/22/women-beer-history/&#34;&gt;history of women in brewing&lt;/a&gt; is fascinating, and depressing. Another example of a field &lt;a href=&#34;https://en.wikipedia.org/wiki/Women_in_computing&#34;&gt;dominated by women, until men decided it was profitable&lt;/a&gt;. Support your local &lt;a href=&#34;https://medium.com/the-lucy-ogilvie-archives/uk-breweries-run-by-women-39a3974fec3c&#34;&gt;women-owned&lt;/a&gt; &lt;a href=&#34;https://www.hopculture.com/women-craft-beer-breweries-to-support-right-now/&#34;&gt;breweries&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <content>&lt;p&gt;Back in my &lt;a href=&#34;https://www.eightbitraptor.com/2021/01/03/2020-a-year-in-review/&#34;&gt;retrospective on 2020&lt;/a&gt; I mentioned that I&amp;rsquo;d picked up brewing beer as a pandemic hobby.&lt;/p&gt;
&lt;p&gt;There are three main methods of brewing you see homebrewers in the UK doing. The first uses the beer-in-a-can kits that you can buy in &lt;a href=&#34;https://www.wilko.com/en-uk/wilko-ipa-brewing-kit-15kg/p/0440627&#34;&gt;home hardware stores in the UK&lt;/a&gt;: you get basically concentrated beer extract that you dilute down to the required concentration and ferment. These may or may not have extra hops added into the fermenter depending on the kit.&lt;/p&gt;
&lt;p&gt;The second is extract brewing. You start with a simple pale ale malt extract. The brewer can then use speciality grains, which are steeped like a tea in the diluted extract to create &lt;a href=&#34;https://en.wikipedia.org/wiki/Wort&#34;&gt;sweet wort&lt;/a&gt;. The sweet wort is then boiled with hops to add bitterness and more flavour to create wort, which is then fermented.&lt;/p&gt;
&lt;p&gt;The last way is all grain brewing: Instead of using malt extract, the brewer starts by crushing the grains, and then steeping them in hot water to activate the enzymes required to break the starches down into sugars in a process known as &lt;a href=&#34;https://beerandbrewing.com/dictionary/BkD3Ilopul/#:~:text=Mashing%20is%20the%20term%20given,soluble%2C%20creating%20the%20sweet%20fermentable&#34;&gt;mashing&lt;/a&gt;. Then the rest the process is the same as extract brewing. The wort is boiled with hops, and then fermented.&lt;/p&gt;
&lt;p&gt;This is proper brewing: (mostly) the way that beer has been made since the Sumerians carved the oldest known surviving beer recipe on stone tablets in 3900 BC&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I am the sort of person who likes processes and control (God that makes me sound like an arse) and for this reason I always wanted to do all-grain brewing. Having complete control over the whole beer making process with as few shortcuts as possible was always my main goal.&lt;/p&gt;
&lt;p&gt;That being said. I also didn&amp;rsquo;t want to invest in all the kit required to do all-grain without knowing if I was even going to enjoy making beer rather than just drinking it!&lt;/p&gt;
&lt;p&gt;In 2020, I was gifted a &lt;a href=&#34;https://www.northernbrewer.com/products/craft-beer-making-kit-with-siphonless-fermenter-1-gallon&#34;&gt;small batch extract kit&lt;/a&gt; for my birthday, which was perfect. It was just enough equipment to get started with the extract process, made a small amount of beer and allowed me to give the process a try without too much investment.&lt;/p&gt;
&lt;p&gt;I ended up doing 3 batches of ~4L each and I was hooked. I started to upgrade my equipment piece by piece, first was the fermenter - I got a plastic 12L Spiedel fermenter which allowed me to make a bigger batch using a partial boil process, then I got hold of a bigger 19L stock pot, so I could do full boils (and stop using the family pasta pot to make beer in).&lt;/p&gt;
&lt;p&gt;Finally, in the 2020 Back Friday Sales, I snagged a 20L SS Brewtech kettle, and the matching 13L SS Brewtech stainless fermenter with a decent discount. I vowed that with my new shiny equipment I was finally going to start brewing all-grain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-gear.jpeg&#34; alt=&#34;New Brew gear&#34;&gt;&lt;/p&gt;
&lt;p&gt;But be warned: I have no idea what I&amp;rsquo;m doing.&lt;/p&gt;
&lt;h2 id=&#34;the-recipe&#34;&gt;The Recipe&lt;/h2&gt;
&lt;p&gt;I wanted to start simple because I have never done a mash before, and the science behind enzyme activation and sugar extraction is intimidating. My grist is comprised of a single pale ale malt - Thomas Fawcett Golden Promise. I mostly just picked a pale malt at random, there are so many to choose from and without much experience of this stage of the brewing process it was all new to me. I do know that I like a lot of beers with Golden Promise as the base so that was good enough for this time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-ingredients.jpeg&#34; alt=&#34;Raw Ingredients&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next up was the choice of hops. It&amp;rsquo;s pretty typical to choose different types of hop, some high alpha acid varieties for bittering, and then different hops for flavour and aroma, to be used at different times during the boil. I chose to keep it simple and just use one type of hop throughout, because I want to start training my palette to identify the different characteristics that each hop could add to the brew.&lt;/p&gt;
&lt;p&gt;This time it&amp;rsquo;s some Nelson Sauvin I picked up on a whim from &lt;a href=&#34;https://www.themaltmiller.co.uk/&#34;&gt;the online homebrew store I use&lt;/a&gt;. I had originally planned to use some Azacca I already had, but these came through with a small hole in the packaging, which meant the vacuum seal wasn&amp;rsquo;t holding so I had to use them first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-hops.jpeg&#34; alt=&#34;My hop schedule&#34;&gt;&lt;/p&gt;
&lt;p&gt;This kind of beer is known as a SMASH beer: Single Malt And Single Hop. It&amp;rsquo;s a pretty common way of brewing when you want to test variations to a recipe: You can vary your base malt and the differences won&amp;rsquo;t be overpowered by darker speciality malts as they might be in other recipes. You can also really focus on the characteristics of your hop choice against a familiar known base.&lt;/p&gt;
&lt;p&gt;Brewing this multiple times and changing one variable each time is how I intend to start training myself to identify what impact each component has on the finished beer.&lt;/p&gt;
&lt;p&gt;Because I want to focus on the flavours of the malt and the hops I chose to use a yeast that I&amp;rsquo;m pretty familiar with, and conveniently, one that&amp;rsquo;s well known for being &amp;ldquo;clean&amp;rdquo;, or imparting few characteristics of its own to a brew: Safale US-05 dried american ale yeast.&lt;/p&gt;
&lt;p&gt;So with my ingredients chosen, I just had to work out how to combine them! After some tweaking, I settled on a recipe that looks a little like a double IPA: Using 4kg of Golden Promise for a pale straw coloured beer, at about 9%. Quite hoppy, with an IBU of 73, dry hopped with just over 4 g/L.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how it stacks up against the &lt;a href=&#34;https://beerrecipes.org/BJCP-2015-Style/72/22a-double-ipa.html&#34;&gt;BJCP 2015 style guidelines for an Imperial IPA&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-style.jpeg&#34; alt=&#34;the recipe numbers&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-process&#34;&gt;The Process&lt;/h2&gt;
&lt;p&gt;The traditional all-grain process goes something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First you collect your liquor (water), and heat it to strike temperature, this is a few degrees above your desired mash temperature to allow for cooling when the grain is added.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then you add your liquor to the mash tun, and pour in the grist (crushed grains) to create a porridge like mixture, stirring continuously to ensure you avoid dough balls. This is called mashing in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then you insulate the mash tun and leave it for an hour or more so the enzymes in the grain can activate and start converting starches in the grain into sugar, this is the mash.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the mash has finished you need to drain the sweet wort away from the spent grain (lautering), you can also rinse the grain bed with hot water to collect any residual sugar (sparging).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The boil is next. Wort is boiled for 60-90 minutes, with hops added at various times. Bittering hops go in at the start of the boil so their alpha acids can be isomerised into iso-alpha acids, the chemical that makes beer bitter. Flavour and aroma hops are added nearer the end of the boil so less of the volatile flavour compounds boil away.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that the boil is over we need to chill the wort down rapidly to around 25-30¬∞C and transfer it to our fermentation vessel. When it&amp;rsquo;s cool and in the fermenter we can add the yeast (pitching). This is the point where sanitisation becomes key. As soon as the wort is off the boil, the risk of contamination rises. This means wild yeast and other kinds of bacteria can infect your beer. In the best case you might end up with an awesome sour, in the worst case your wort is going down the drain. Either way you won&amp;rsquo;t end up with the beer you set out to make.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the yeast has been pitched, the beer is kept at a reasonably constant temperature for the yeast to ferment the sugars into alcohol. This is the leave it the heck alone stage!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now that you know all the steps involved to brew a beer using an all-grain process. I can tell you that this is not the process I used! Technically the process I used is called an all-grain single-vessel, no-sparge no-chill process. From what we&amp;rsquo;ve seen so far you should know what that means right?&lt;/p&gt;
&lt;p&gt;Just kidding.&lt;/p&gt;
&lt;p&gt;The process I used is normally called brew-in-a-bag (BIAB). this means that instead of mashing in a mash tun and then lautering (and sparging) into a boil kettle. I mash directly inside my brewing kettle using a large nylon bag to hold the grains. A lot like a massive tea bag.&lt;/p&gt;
&lt;p&gt;Instead of lautering I just needed to lift the bag containing the grain out of the kettle, and let it drain for a while, leaving the sweet wort behind in the kettle ready for the boil.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.einbrew.com/post/no-chill-brewing-saving-water&#34;&gt;no-chill part is a technique popularised by Australian homebrewers&lt;/a&gt;, where summer droughts and water shortages mean it&amp;rsquo;s often not possible to use the 100+ litres of water required to chill the wort down with an immersion chiller. It basicaly just involves shoving the hot wort straight off the boil into a sealed container, often a HDPE water container known as a cube, and letting it cool down to pitching temperature naturally over a day or two. Because the wort is transferred hot into the cube and then sealed so that it&amp;rsquo;s air tight, the heat sterilises the container and ensures that the wort cannot spoil while it&amp;rsquo;s cooling.&lt;/p&gt;
&lt;h2 id=&#34;brew-day&#34;&gt;Brew day&lt;/h2&gt;
&lt;p&gt;Brew day for me was a three part affair spread over the weekend. I mashed on a saturday morning, while the kids were around. It turns out helping daddy make beer is a good way of tempting a 3 year old away from the TV.&lt;/p&gt;
&lt;h3 id=&#34;part-1-saturday-morning-the-mash&#34;&gt;Part 1: Saturday morning. The Mash&lt;/h3&gt;
&lt;p&gt;First I collected 17 litres of water, and heated it to 68¬∞C.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-strike.jpeg&#34; alt=&#34;Collecting my liquour&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then I added my grains in the grain bag and stirred them in. I was aiming for a mash temperature of 65¬∞C - I&amp;rsquo;m not going to explain why because I&amp;rsquo;d be basically just cargo culting some science I don&amp;rsquo;t fully understand yet, but I was hoping for a good balance between the body of the final beer and the fermentability.&lt;/p&gt;
&lt;p&gt;What I hadn&amp;rsquo;t anticipated was the difficulty I would have holding on to 4Kg&amp;rsquo;s of grain in one hand, and attempting to pour it slowly and uniformly into the kettle whilst stirring with the other hand. I spent so long teasing out dough balls that my temperature dropped to ~62¬∞C.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-mash.jpeg&#34; alt=&#34;The mash&#34;&gt;&lt;/p&gt;
&lt;p&gt;I was planning on borrowing a technique from &lt;a href=&#34;https://www.youtube.com/channel/UCoAhRuxJb1K-d4BBSLNX1RQ&#34;&gt;an Australian homebrewer who&amp;rsquo;s Youtube channel I subscribe to&lt;/a&gt;, and put the pot in the oven at a really low temperature to keep it stable for the duration of the mash. So to try and compensate for some of the temperature drop I turned the oven up a bit higher than normal. This sort of worked I ended up mashing for two hours, and the temperature hit 64¬∞C about 45 minutes in and held for the rest of the time.&lt;/p&gt;
&lt;p&gt;While my grains were mashing I mowed the lawn and did some other things, and then came back to drain the wort. Lifiting the bag was harder than I anticipated, partly because my oven temperature shenanigans had resulting in me melting one of the handles off of my grain bag, which I now need to fix or replace before my next brew, and partly just because a bag that contained 4Kg of grain that had been soaking in hot water for 2 hours is pretty damn heavy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-lauter.jpeg&#34; alt=&#34;Lautering&#34;&gt;&lt;/p&gt;
&lt;p&gt;After a fairly hefty squeeze of the bag (to squeeze or not is a very hotly contested topic in homebrew circles) I extracted 14.5 Litres of sweet wort at 1.066 pre-boil gravity! My pre-boil numbers were very close to what my brewing calculator predicted, and had also meant that for my first attempt at mashing ever, I&amp;rsquo;d managed to hit a mash efficiency of 72%. Very happy with that as the average efficiency for BIAB brewers is about 75% and most places tell you to assume you&amp;rsquo;ll get 60% when starting out and work from there.&lt;/p&gt;
&lt;p&gt;I calculated how much wort was left in the grains and fed those numbers back into my calculator to make the next brew calculations more accurate, and left the brew alone for most of the day.&lt;/p&gt;
&lt;h3 id=&#34;part-2-saturday-evening-the-boil&#34;&gt;Part 2: Saturday evening. The Boil&lt;/h3&gt;
&lt;p&gt;I boil in the kitchen using the powerful wok burner on our gas cooker, so I always wait until the kids are in bed before I boil. I am terrified of the damage that could be inflicted by 15L of boiling sugar water if I mess something up or have an equipment failure.&lt;/p&gt;
&lt;p&gt;So I started heating at about 8pm. It took about 30 minutes to come to the boil and get passed the &lt;a href=&#34;http://howtobrew.com/book/section-1/boiling-and-cooling/7-2-the-hot-break&#34;&gt;hot break&lt;/a&gt;. Once it had, I added my 60 minute bittering addition of 15g Nelson Sauvin hops and started my timer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-hopadditions.jpeg&#34; alt=&#34;Hop additions measured out&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re passed the hot break of the boil there&amp;rsquo;s not really a lot to do, so I pottered around the kitchen tidying and sorting out some laundry and a few life admin tasks until it was done. Stopping whenever my timer told me to to add the next hop addition or some irish moss (for clarifying the beer).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-boil.jpeg&#34; alt=&#34;Boiling the wort&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once the boil was over, I turned off the heat, added my final hop addition and set another timer for 30 minutes. This is called the &lt;a href=&#34;https://byo.com/article/hop-stands-2/&#34;&gt;hop stand, or whirlpool&lt;/a&gt; addition and adds more hop character to a beer.&lt;/p&gt;
&lt;p&gt;Once the 30 minutes were up I drained the hot wort straight into my fermenter, which I&amp;rsquo;d already sanitised, and sealed the lid. Now it can sit there and cool down in it&amp;rsquo;s own time until I&amp;rsquo;m ready to pitch the yeast. I ended up with almost exactly 11 litres of wort post boil.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-draining.jpeg&#34; alt=&#34;Draining hot wort into the fermenter&#34;&gt;&lt;/p&gt;
&lt;p&gt;Only thing left to do this evening is to clean my equipment, and update my calculations and then I&amp;rsquo;m done for the day. All grain brewing leaves a lot more trub in the kettle than I&amp;rsquo;m used to with extract brewing. I measured out how much wort was left in the bottom of the pan, as well as my boil off rate and pushed those numbers into the brewing software I use ready for the next brew, and went to bed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-gunk.jpeg&#34; alt=&#34;Trub&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;part-3-sunday-lunchtime-pitching&#34;&gt;Part 3: Sunday lunchtime. Pitching&lt;/h3&gt;
&lt;p&gt;The wort took about 18 hours to come down to tempterature using my very scientific measuring apparatus. I put my hand on the outside of the fermenter and when it felt room temperature then it was probably good to go.&lt;/p&gt;
&lt;p&gt;I rehydrated the sached of Safale US-05 according to the instructions in &lt;a href=&#34;http://www.howtobrew.com/&#34;&gt;the brewing bible&lt;/a&gt;, sprinking the yeast onto 250ml of cooled boiled water and waiting 15 minutes before stirring it in and waiting another 15 minutes.&lt;/p&gt;
&lt;p&gt;Once my yeast starter was ready I unsealed my fermenter, tipped the yeast straight in, making sure not to touch or let anything fall into the wort. Then I quickly sealed the lid again and attached a blow-off tube with the other end sitting in a kilner jar full of sanitiser.&lt;/p&gt;
&lt;p&gt;I normally start my brews off with a blow-off tube for two or three days while the most vigorous fermentation is happening. I&amp;rsquo;ve been doing this since I filled a fermenter a bit too full once and the first few days of active fermentation caused beer and &lt;a href=&#34;https://beerandbrewing.com/dictionary/6E3PezlzAK/&#34;&gt;kr√§usen&lt;/a&gt; to explode through the airlock and pulse out of the fermenter for a while, turning my fermenter into a beer volcano and making a mess of the kitchen.&lt;/p&gt;
&lt;p&gt;6 hours later, I came back to find fermentation had started and was running along nicely. And a few hours after that, with bubbles burping regularly from the tube, I sat down with a beer and started writing this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/brewday-fermenter.jpeg&#34; alt=&#34;Fermentation&#34;&gt;&lt;/p&gt;
&lt;p&gt;I will never get bored of this stage! I&amp;rsquo;ll wait a few days for the fastest bubbles to subside, and then when it&amp;rsquo;s calmed down a bit I&amp;rsquo;ll swap the blow off tube for an airlock and put it somewhere out of sight for a couple of weeks. I&amp;rsquo;ve got some dry-hopping to do when primary fermentation has slowed down, but other than that there&amp;rsquo;s nothing else to do until it&amp;rsquo;s time to bottle the beer.&lt;/p&gt;
&lt;p&gt;Thanks for reading this far. I&amp;rsquo;m pretty proud of my first all-grain brew day. I really enjoy the process of brewing my own beer, it&amp;rsquo;s a very rewarding experience, despite have no idea what&amp;rsquo;s happening inside the fermenter. For all I know it could all be going horribly wrong and I&amp;rsquo;ll end up with vinegar, and for all my efforts it&amp;rsquo;ll go down the drain.&lt;/p&gt;
&lt;p&gt;But I can&amp;rsquo;t tell at the moment, and there&amp;rsquo;s nothing to do now but wait. So as the denizens of homebrew forums are fond of saying: Relax, don&amp;rsquo;t worry, have a homebrew. Cheers.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;As part of the Hymn to Ninkasi, the goddess of beer. The &lt;a href=&#34;https://www.winemag.com/2020/12/22/women-beer-history/&#34;&gt;history of women in brewing&lt;/a&gt; is fascinating, and depressing. Another example of a field &lt;a href=&#34;https://en.wikipedia.org/wiki/Women_in_computing&#34;&gt;dominated by women, until men decided it was profitable&lt;/a&gt;. Support your local &lt;a href=&#34;https://medium.com/the-lucy-ogilvie-archives/uk-breweries-run-by-women-39a3974fec3c&#34;&gt;women-owned&lt;/a&gt; &lt;a href=&#34;https://www.hopculture.com/women-craft-beer-breweries-to-support-right-now/&#34;&gt;breweries&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>GC in Ruby: Part 2 (a), What is GC, Mark &amp; Sweep, and how Ruby marks objects</title>
      <link>https://www.eightbitraptor.com/2021/04/15/gc-in-ruby-part-2-a-what-is-gc-mark-sweep-and-how-ruby-marks-objects/</link>
      <pubDate>Thu, 15 Apr 2021 15:30:38 +0100</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/04/15/gc-in-ruby-part-2-a-what-is-gc-mark-sweep-and-how-ruby-marks-objects/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This is the second part in a series. If you need a refresher of how the Ruby memory model works you can read part 1 &lt;a href=&#34;https://www.eightbitraptor.com/2021/03/23/gc-in-ruby-part-1-an-overview-of-memory-layout/&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m assuming that a huge proportion of the folks reading this post are programming with languages that implement automatic dynamic memory management. Ruby, Python, Go, JavaScript, Haskell, Swift, Lisp, Dart, and of course anything based on the .NET CLR or the JVM are all languages that manage memory automatically.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s highly likely that, if you&amp;rsquo;ve never had to explicitly call &lt;code&gt;malloc&lt;/code&gt; or a related API, then you&amp;rsquo;re working in a language with automatic dynamic memory management&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Memory management generally consists of two main concerns. How memory is claimed from the Operating System for the program to use, and how it is returned to the Operating System when it&amp;rsquo;s no longer needed.&lt;/p&gt;
&lt;p&gt;In languages with manual memory management, you&amp;rsquo;d typically ask for memory using one of the &lt;code&gt;malloc&lt;/code&gt; functions and then give it back when when you&amp;rsquo;re finished with it with &lt;code&gt;free&lt;/code&gt; (except Rust, which takes a completely different approach to memory management).&lt;/p&gt;
&lt;p&gt;In languages with automatic memory management the language runtime or compiler takes care of claiming memory using an allocator, and releasing this memory using a garbage collector.&lt;/p&gt;
&lt;p&gt;In this post we&amp;rsquo;re going to look at some basics of garbage collection. We&amp;rsquo;ll talk about some of the terminology that&amp;rsquo;s used in this subject area, and then we&amp;rsquo;re going to look at the specifics of the Mark &amp;amp; Sweep algorithm, which is one of the simpler GC&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; algorithms.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll then look at how Ruby implements the initial phase of Mark &amp;amp; Sweep: object marking&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Because the GC story in Ruby has a lot of layers these days - Incremental marking and sweeping, a generational collector that partitions objects by age, and a memory compactor that runs in tandem with GC - we&amp;rsquo;re occasionally going to see parts of the code that don&amp;rsquo;t make sense yet. I&amp;rsquo;ll go through a lot of these in future posts, and will always try and call out the stuff that isn&amp;rsquo;t relevant to the current discussion.&lt;/p&gt;
&lt;p&gt;I had intended to speak about both marking and sweeping in this post, but when I started writing I realised how much there is to cover, so I&amp;rsquo;ve chosen to cover sweeing in a separate post.&lt;/p&gt;
&lt;p&gt;Most of the things I&amp;rsquo;ve learned about GC have come from 2 main places. The first is working on the Ruby source code and pairing with my supremely talented colleagues. The second is a book called &lt;a href=&#34;https://gchandbook.org/&#34;&gt;The Garbage Collection Handbook, The Art of Automatic Memory Management&lt;/a&gt;, written by Richard Jones, Antony Hosking and Eliot Moss and published by CRC Press.&lt;/p&gt;
&lt;p&gt;This book is fantastic and I recommend it whole-heartedly if GC implementations are something that you&amp;rsquo;d like to learn more about. And without further ado, let&amp;rsquo;s jump in!&lt;/p&gt;
&lt;h2 id=&#34;terminology&#34;&gt;Terminology&lt;/h2&gt;
&lt;p&gt;There are a few concepts that are used extensively throughout GC literature. Before we can start discussing algorithms we&amp;rsquo;re going to need to know how to refer to these concepts.&lt;/p&gt;
&lt;h3 id=&#34;the-heap&#34;&gt;The heap&lt;/h3&gt;
&lt;p&gt;The heap is where all of our automatic memory management occurs. Objects are allocated out of the heap, live on the heap and the memory is made available on the heap again when they are garbage collected.&lt;/p&gt;
&lt;p&gt;It can either be a single contiguous region of memory, or it can be a set of many contiguous regions of memory (often referred to as pages). Which approach is taken will be dependant on the implementation. We&amp;rsquo;ve already seen in our previous post that Ruby uses the second approach: It allocates from heap pages within the eden heap.&lt;/p&gt;
&lt;h3 id=&#34;granules-and-objects&#34;&gt;Granules and Objects.&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;granule&lt;/strong&gt; is the smallest amount of memory we can allocate in our automatic system.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; is a contiguous region of 1 or more granules that is allocated for use by the application. Objects contain fields which may either contain data, or references to other objects in the system.&lt;/p&gt;
&lt;p&gt;In Ruby, the smallest amount of memory we can allocate on the GC heap is the size of a slot, which is 40 bytes, as every slot contains a single &lt;code&gt;RVALUE&lt;/code&gt;. This means that our granule is a 40 byte section of memory.&lt;/p&gt;
&lt;p&gt;An object in our implementation, is represented by an &lt;code&gt;RVALUE&lt;/code&gt;. This is the common type for all Ruby objects and consists of a header, along with a set of fields that may or may not refer to other objects.&lt;/p&gt;
&lt;p&gt;In the current implementations of Ruby we can only allocate one &lt;code&gt;RVALUE&lt;/code&gt; at a time. This means that an object is always exactly one granule, although this will hopfully change in the future as I&amp;rsquo;m working on introducing variable length objects to Ruby. I&amp;rsquo;ll write more about this in a future post.&lt;/p&gt;
&lt;h3 id=&#34;the-mutator-and-the-collector&#34;&gt;The mutator and the collector&lt;/h3&gt;
&lt;p&gt;These are the two main parts of any garbage collected program. The &lt;strong&gt;mutator&lt;/strong&gt; is the thread (or threads) that execute application code. This part of the system also contains the part of the memory management system that allocates objects, as well as mutate objects and their references.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;collector&lt;/strong&gt; is the thread (or threads) that execute code related to garbage collection. That is, it follows all the object references in the system to discover objects that are no longer being used by the system and reclaims their storage space, so that the mutator can re-use that memory in order to create new objects.&lt;/p&gt;
&lt;p&gt;All of the mutator and collector threads operate over the same heap.&lt;/p&gt;
&lt;h3 id=&#34;references-and-fields&#34;&gt;References and Fields&lt;/h3&gt;
&lt;p&gt;Objects can contain references to other objects. Consider the following Ruby code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Matthew&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code is going to heap allocate a few &lt;code&gt;RVALUE&lt;/code&gt; objects; among them a &lt;code&gt;T_CLASS&lt;/code&gt; representing the class &lt;code&gt;Foo&lt;/code&gt;, a &lt;code&gt;T_OBJECT&lt;/code&gt; for the instance of the class &lt;code&gt;Foo&lt;/code&gt;, and a &lt;code&gt;T_STRING&lt;/code&gt; that contains the string &amp;ldquo;Matthew&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;To keep our program consistent we need our programming language to keep track of some relationships between these things: like our &lt;code&gt;@name&lt;/code&gt; instance variable, which is itself an &lt;code&gt;RVALUE&lt;/code&gt;, and is being used by the &lt;code&gt;T_OBJECT&lt;/code&gt; which is our instance of &lt;code&gt;Foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Obviously it would be bad if the String object was garbage collected and it&amp;rsquo;s memory reused while the Object referencing it was still live!&lt;/p&gt;
&lt;p&gt;But this small example also allocates other objects, that our class references: Every &lt;code&gt;RVALUE&lt;/code&gt; struct has a &lt;strong&gt;field&lt;/strong&gt; named &lt;code&gt;class&lt;/code&gt; that contains a pointer to its class object, which in turn has a class field pointing to its class, all the way back up to &lt;code&gt;BasicObject&lt;/code&gt;. These are in addition to the specific references each type of object can hold.&lt;/p&gt;
&lt;p&gt;As we can see, these relationship graphs build up quickly, even in trivial programs. It&amp;rsquo;s these relationships that we mean when we talk about references.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;reference&lt;/strong&gt; is a field of an object that contains a pointer to another object on the heap.&lt;/p&gt;
&lt;p&gt;A pointer is a term meaning the memory address of another object. Ruby uses a type called &lt;code&gt;VALUE&lt;/code&gt; to store it&amp;rsquo;s object pointers, and they always point to the starting address of an &lt;code&gt;RVALUE&lt;/code&gt; on the heap.&lt;/p&gt;
&lt;p&gt;The GC Handbook defines this more formally:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-=&#34; data-lang=&#34;=&#34;&gt;Pointers(N) = { a | a = &amp;amp;N[i]; ‚àÄi: 0 ‚â§ i &amp;lt; |N| where N[i] is a pointer}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a statement, written in Set notation, that tells us how to define the set of references for an object. It says:&lt;/p&gt;
&lt;p&gt;For an object &lt;code&gt;N&lt;/code&gt;: The set of addresses that are the pointer fields of &lt;code&gt;N&lt;/code&gt; are all the addresses to fields that are contained in the field list of &lt;code&gt;N&lt;/code&gt; where the contents of the field is a pointer.&lt;/p&gt;
&lt;p&gt;Or, more basically: references are the fields of an object that are pointers to other objects.&lt;/p&gt;
&lt;h3 id=&#34;mutator-roots-and-the-root-object-set&#34;&gt;Mutator Roots and the Root object set&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Mutator roots&lt;/strong&gt; are the pointers to objects in the heap that are directly accessible to the mutator threads, without having to traverse any intermediate objects. We call the set of ojects accessible via the mutator roots the &lt;strong&gt;Root objects&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These mutator roots are usually thread local storage, such as execution stacks, or global variables. These will all contain references to other objects.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not possible in a type safe language to find an unreachable object in the heap by traversing the graph starting at the mutator roots. Once all pointers to that object have been discarded, it&amp;rsquo;s gone, and arithmetic pointer construction is prohibited.&lt;/p&gt;
&lt;h3 id=&#34;liveness-correctness-and-reachability&#34;&gt;Liveness, correctness and reachability.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A garbage collector is only &lt;strong&gt;correct&lt;/strong&gt; if it never reclaims live objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An object is &lt;strong&gt;live&lt;/strong&gt; if it will be accessed at some time in the future execution of the mutator.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately for us, liveness is an &lt;a href=&#34;https://www.khanacademy.org/computing/ap-computer-science-principles/algorithms-101/solving-hard-problems/a/undecidable-problems&#34;&gt;undecidable problem&lt;/a&gt;. We can never accurately know for an arbitrary heap object whether or not the program will ever access it.&lt;/p&gt;
&lt;p&gt;This is where &lt;strong&gt;reachability&lt;/strong&gt; comes in: We use an objects reachability as a way of determining an objects approximate liveness. An object &lt;code&gt;M&lt;/code&gt; is reachable from object &lt;code&gt;N&lt;/code&gt; only if object &lt;code&gt;M&lt;/code&gt; can be discovered by following a chain of pointers from a field on object &lt;code&gt;N&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So if an object is reachable from one of the mutator roots, then that the object may be accessed at some point during the programs life and is therefore considered to be a live object. If an object cannot be reached then it can never be accessed again and is dead.&lt;/p&gt;
&lt;p&gt;This conservating approach to liveness is not perfect, but it is reasonable. We may find that we mark dead objects as live because they are reachable (even though we never access them again). But importantly the reverse cannot happen - we&amp;rsquo;ll never mark live objects as dead, because we assume everything that &lt;em&gt;could&lt;/em&gt; be live &lt;em&gt;is&lt;/em&gt; live.&lt;/p&gt;
&lt;p&gt;Garbage collection algorithms that use reachability as an indicator of liveness, like Mark &amp;amp; Sweep are known as tracing garbage collectors, and are the most common type of GC algorithm.&lt;/p&gt;
&lt;h2 id=&#34;mark--sweep-garbage-collection&#34;&gt;Mark &amp;amp; Sweep Garbage collection&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve introduced the subject of garbage collection, and we&amp;rsquo;re familiar with some of the terms it&amp;rsquo;s time to introduce our first algorithm: Mark &amp;amp; Sweep.&lt;/p&gt;
&lt;p&gt;To make talking about this algorithm simpler we&amp;rsquo;re going to make a few assumptions about the operation of the system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There may be more than one mutator thread, but there is only ever one collector thread&lt;/li&gt;
&lt;li&gt;All mutator threads are stopped while the collector thread runs. There is no modificiations to the heap being made during collection other than the ones that the collector is making.&lt;/li&gt;
&lt;li&gt;Collection appears to be atomic. That is, the mutator threads will never see an intermediate state of the collector, or an intermediate state of the heap.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These assumptions are convenient not only because they avoid us having to deal with any hard concurrency problems, but also because it&amp;rsquo;s the way that GC in Ruby is implemented. So a definite win for us.&lt;/p&gt;
&lt;p&gt;Mark &amp;amp; Sweep is an algorithm invented in 1960 by James McCarthy, originally for Lisp. It&amp;rsquo;s a two phase algorithm. The first phase: Marking, involves traversing all reachable objects from the mutator roots, and recording somewhere that every object we come across is live.&lt;/p&gt;
&lt;p&gt;The second phase: Sweeping, involves walking the heap, examining the mark status for every object in the heap. Any object that is unmarked is dead, and it&amp;rsquo;s space is reclaimed.&lt;/p&gt;
&lt;h3 id=&#34;triggering-mark--sweep-gc&#34;&gt;Triggering Mark &amp;amp; Sweep GC&lt;/h3&gt;
&lt;p&gt;From the point of view of the collector, the mutator threads only do three jobs: &lt;code&gt;New&lt;/code&gt;, &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt;. These are the hooks into the program that the collector needs to reimplement in order to integrate itself with the program. &lt;code&gt;New&lt;/code&gt; allocates a new heap object and returns an address to it, &lt;code&gt;Read&lt;/code&gt; accesses an object field in memory and returns its value, and &lt;code&gt;Write&lt;/code&gt; modifies an object in memory.&lt;/p&gt;
&lt;p&gt;Mark &amp;amp; sweep doesn&amp;rsquo;t rely on information stored in the objects themselves in order to collect garbage, it relies on object reachability, so there&amp;rsquo;s no need for us to implement our own implementations for &lt;code&gt;Read&lt;/code&gt; or &lt;code&gt;Write&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead the Mark &amp;amp; Sweep collector interfaces with the mutators during object allocation. If a thread tries to allocate an object and there is no space left on the heap, then collection runs and the allocation is retried. If the allocation fails again, we are therefore out of memory and the program terminates.&lt;/p&gt;
&lt;p&gt;In Ruby, this could look something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ref&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nil?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    collect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ref&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nil?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fail &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Out of Memory&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  with_mutator_lock &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mark_from_roots
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sweep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at this code we can see that there are two main paths through the object allocation method. The first is nice and quick - we request an reference from the allocator, which immediately allocates us an object and returns it. The second is much less efficient - because the first allocation fails so now we have to stop the world and run GC before we can try again.&lt;/p&gt;
&lt;p&gt;Ruby uses an algorithm similar to this internally, but there are some differences - arising mainly because the heap is divided up into separate pages.&lt;/p&gt;
&lt;p&gt;We can see the basic shape of Ruby&amp;rsquo;s implementation of this &lt;code&gt;New&lt;/code&gt; GC hook in action by looking at the function &lt;code&gt;newobj_of0&lt;/code&gt; in &lt;code&gt;gc.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; VALUE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_of0&lt;/span&gt;(VALUE klass, VALUE flags, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; wb_protected, &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_ractor_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ractor_cached_freeobj&lt;/span&gt;(objspace, cr)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; Qfalse) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_init&lt;/span&gt;(klass, flags, wb_protected, objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wb_protected &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_slowpath_wb_protected&lt;/span&gt;(klass, flags, objspace, cr) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_slowpath_wb_unprotected&lt;/span&gt;(klass, flags, objspace, cr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; obj;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve removed some parts of the function in order to better expose the basic algorithm, which we can see is almost the same as the &lt;code&gt;new_object&lt;/code&gt; method in my psuedo Ruby example above.&lt;/p&gt;
&lt;p&gt;The test expression for the conditional combines the allocate call with the check to see whether the allocation was successfull, and if it was, we can then assign data into the slot using &lt;code&gt;newobj_init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;ractor_cached_freeobj&lt;/code&gt; is the equivalent to our call to &lt;code&gt;allocate&lt;/code&gt;. Ruby&amp;rsquo;s Ractors&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; cache a heap page, and reserve it for exclusive use by that Ractor in order to avoid data races and other concurrency related issues. But essentially this function is pulling a slot from the freelist of a heap page and returning it&amp;rsquo;s address (as a &lt;code&gt;VALUE&lt;/code&gt; pointer).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that, even when we&amp;rsquo;re not explicitly using Ractors in our code behind the scenes, there is always one ractor - which Ruby refers to as the main Ractor. You can dig deeper into this by looking at the macro &lt;code&gt;GET_RACTOR&lt;/code&gt; and the ractor struct &lt;code&gt;ruby_single_main_ractor&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If the object was not allocated successfully (ie. the call to &lt;code&gt;ractor_cached_freeobj&lt;/code&gt; returns &lt;code&gt;Qfalse&lt;/code&gt;), then we follow the slowpath.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll discuss what it means for an object to be write-barrier protected or unprotected in a later post about Generational GC, but for this discussion they&amp;rsquo;re not relevent. Both of these funtions eventually lead us to &lt;code&gt;newobj_slowpath&lt;/code&gt; which is where the second path of our &lt;code&gt;New&lt;/code&gt; job is implemented:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ractor_cached_freeobj&lt;/span&gt;(objspace, cr)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Qfalse) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ractor_cache_slots&lt;/span&gt;(objspace, cr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GC_ASSERT&lt;/span&gt;(obj &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_init&lt;/span&gt;(klass, flags, wb_protected, objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s a bit of indirection here - We&amp;rsquo;re going to need to follow the rabbit hole a little deeper before we find out whether we actually need to run GC.&lt;/p&gt;
&lt;p&gt;In our first variation from our naive &lt;code&gt;New&lt;/code&gt; implementation we actually attempt the allocation again multiple times instead of just once, by calling &lt;code&gt;ractor_cached_freeobj&lt;/code&gt; and &lt;code&gt;ractor_cache_slots&lt;/code&gt; in a loop until we get a free slot back successfully.&lt;/p&gt;
&lt;p&gt;The job of &lt;code&gt;ractor_cache_slots&lt;/code&gt; is to find the next page in the heap that has free slots and cache it onto the ractor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ractor_cache_slots&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_ractor_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;ASSERT_vm_locking&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;GC_ASSERT&lt;/span&gt;(cr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;newobj_cache.freelist &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; heap_page &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap_next_freepage&lt;/span&gt;(objspace, heap_eden);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   cr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;newobj_cache.using_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   cr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;newobj_cache.freelist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;freelist;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;free_slots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;freelist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The actual caching isn&amp;rsquo;t that interesting, it&amp;rsquo;s just modifying some pointers in a linked list, but &lt;code&gt;heap_next_freepage&lt;/code&gt; looks important. This function returns the next page on the heap that contains free slots, and when there are no free pages left - then we start GC to reclaim space. We can see the actual call to &lt;code&gt;gc_start&lt;/code&gt; here, buried inside the test expression for the last conditional in &lt;code&gt;heap_prepare&lt;/code&gt; in &lt;code&gt;gc.c&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;heap_prepare&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_heap_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;heap)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;GC_ASSERT&lt;/span&gt;(heap&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;free_pages &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// spoiler alert
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_lazy_sweeping&lt;/span&gt;(heap)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_sweep_continue&lt;/span&gt;(objspace, heap);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_incremental_marking&lt;/span&gt;(objspace)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    	&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_marks_continue&lt;/span&gt;(objspace, heap);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (heap&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;free_pages &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (&lt;span style=&#34;color:#a6e22e&#34;&gt;will_be_incremental_marking&lt;/span&gt;(objspace) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap_increment&lt;/span&gt;(objspace, heap) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_start&lt;/span&gt;(objspace, GPR_FLAG_NEWOBJ) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_memerror&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Side rant: There&amp;rsquo;s a pattern here I see a lot in the MRI codebase and I don&amp;rsquo;t like it. the actual important work is being done in a really long and complext test expression of an if statement, and the body of the conditional just raises an error. I feels like it&amp;rsquo;s obfuscating the most important part of the function, which is that we should start GC when there are no free pages. C developers: &lt;a href=&#34;https://twitter.com/eightbitraptor&#34;&gt;tell me why I&amp;rsquo;m wrong!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve found the actual call to &lt;code&gt;gc_start&lt;/code&gt; we can step back through our algorithm and try and write it out in psuedo-Ruby, to compare with our generic Mark &amp;amp; Sweep &lt;code&gt;New&lt;/code&gt; implementation to see what changes Ruby is making to compensate for the division of the heap into pages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ref&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nil?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; free_pages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        collect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; free_pages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          fail &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Out of Memory&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; free_pages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can still see the differentiation between the fast path and the slow path but there are definitely a few more steps in there. I&amp;rsquo;ve also completely ignored what happens when the collector runs but cannot free up enough memory (it definitly does not just fail the first time we run out of free pages). But I want to focus on garbage collection rather than allocation. So for now we&amp;rsquo;ll skip over that and move onto the first phase of the Mark &amp;amp; Sweep algorithm:&lt;/p&gt;
&lt;h2 id=&#34;the-mark-step&#34;&gt;The Mark step&lt;/h2&gt;
&lt;p&gt;We said earlier that the mark phase was the process by which we walk the graph of reachable objects, starting at the mutator roots, and set some flag somewhere for every live object we come across.&lt;/p&gt;
&lt;p&gt;The actual marking algorithm isn&amp;rsquo;t too complex. First we find the root objects, mark them and add them to a worklist. Then, until the worklist is empty, we pop an object off and traverse it&amp;rsquo;s set of pointers, marking and adding the object at the end of each reference to the worklist.&lt;/p&gt;
&lt;p&gt;Because this worklist is used like a stack (ie. last in, first out) of marked objects, it&amp;rsquo;s often referred to as the mark stack.&lt;/p&gt;
&lt;p&gt;An example of this would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mark_roots&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @worklist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  roots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mark_object(root)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @worklist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; root
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_mark_stack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; @worklist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @worklist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pointers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;pointer&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dereference(pointer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;.&lt;/span&gt;marked?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mark_object(child)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @worklist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; child
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mark_roots
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;process_mark_stack
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-tricolour-abstraction&#34;&gt;the tricolour abstraction&lt;/h3&gt;
&lt;p&gt;Because it&amp;rsquo;s useful to be able to refer to the different states an object can be in during the collection phase we can identify these states and give them names. The tricolour abstraction comes from a paper by Djikstra et al from 1976 and proposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects that are possibly dead are white. Initially this is every object, these objects are not marked, not on the worklist and are not currently being processed.&lt;/li&gt;
&lt;li&gt;When a white node is encountered during the marking phase it is coloured grey, this means the object is on the worklist or currently being processed.&lt;/li&gt;
&lt;li&gt;When a grey node has been fully processed and it&amp;rsquo;s children identified then it is coloured black. Black objects are marked and are no longer being processed or on the worklist.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, we don&amp;rsquo;t &lt;em&gt;actually&lt;/em&gt; colour our objects, but this abstraction gives us some new ways of thinking about how we traverse the heap.&lt;/p&gt;
&lt;p&gt;Marking looks like a wave of grey objects moving through the heap, with all white objects ahead of the wave and all black objects behind. Eventually when marking has finished, there will be no grey objects left, all reachable objects will be black.&lt;/p&gt;
&lt;p&gt;One property of this algorithm that is always true is that there are never any references from black to white objects, and therefore, any white object left at the end of the mark step is unreachable and can be collected.&lt;/p&gt;
&lt;h3 id=&#34;marking-in-ruby&#34;&gt;Marking in Ruby&lt;/h3&gt;
&lt;p&gt;The mark step in Ruby gets started from a function called &lt;code&gt;gc_marks&lt;/code&gt; which is called at the end of &lt;code&gt;gc_start&lt;/code&gt;. &lt;code&gt;gc_start&lt;/code&gt; actually does a load of work before it starts the mark step, in order to set up the conditions necessary for the GC to run, and to determine what kind of GC is running, but none of this is relevant to the discussion of simple Mark &amp;amp; Sweep.&lt;/p&gt;
&lt;p&gt;For now the only interesting work that &lt;code&gt;gc_start&lt;/code&gt; does is to call &lt;code&gt;gc_enter&lt;/code&gt; which stops all other Ractors and mutator threads and claims a VM lock, so that nothing can happen while the collector is running. This is the stop-the-world part of the process. It does this before calling &lt;code&gt;gc_marks&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gc_marks&lt;/code&gt; splits the mark phase into two. &lt;code&gt;gc_marks_start&lt;/code&gt; and &lt;code&gt;gc_marks_rest&lt;/code&gt;. This split is an artifact of incremental marking which we&amp;rsquo;ll talk about in a future post, but for now all we need to know is that &lt;code&gt;gc_marks_start&lt;/code&gt; is where the roots are marked and added to the mark stack and &lt;code&gt;gc_marks_rest&lt;/code&gt; is what processes the mark list, popping objects off and marking their children.&lt;/p&gt;
&lt;h4 id=&#34;marking-the-roots&#34;&gt;Marking the roots&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_roots&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;categoryp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; gc_list &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;list;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_execution_context_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GET_EC&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_vm_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;vm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_ec_vm_ptr&lt;/span&gt;(ec);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    objspace&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rgengc.parent_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Qfalse;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_vm_mark&lt;/span&gt;(vm);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (vm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;self) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark&lt;/span&gt;(objspace, vm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;self);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mark_finalizer_tbl&lt;/span&gt;(objspace, finalizer_table);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mark_current_machine_context&lt;/span&gt;(objspace, ec);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; global_list; list; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_maybe&lt;/span&gt;(objspace, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;varptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_mark_end_proc&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_gc_mark_global_tbl&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_gc_mark&lt;/span&gt;(objspace&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_object_id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mark_tbl_no_pin&lt;/span&gt;(objspace, objspace&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;obj_to_id_tbl);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (stress_to_class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_gc_mark&lt;/span&gt;(stress_to_class);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above is an abridged version of the &lt;code&gt;gc_mark_roots&lt;/code&gt; function. I&amp;rsquo;ve removed all the debug and logging related code, to expose the actual marking code more clearly. From this we can identify exactly what Ruby considers Root objects.&lt;/p&gt;
&lt;p&gt;We can see that the root object set contains the Ruby virtual machine itself, as well as any reference directly attached to the VM, this includes all the individual Ractors, the Ruby load path, as well as all the global call cache tables and their contents.&lt;/p&gt;
&lt;p&gt;The global variable table itself, and the list of globals are also considered roots, as well as the finalizer table (finalizers are blocks of code, attached to an object, that are run when that object is garbage collected), and the current VM context object.&lt;/p&gt;
&lt;p&gt;There are a bunch of interesting functions here: &lt;code&gt;gc_mark&lt;/code&gt;, &lt;code&gt;gc_mark_maybe&lt;/code&gt;, &lt;code&gt;mark_tbl_no_pin&lt;/code&gt; that all deal with actually marking various types of objects, in various states. All of them, when you follow the path down, eventually lead to &lt;code&gt;gc_mark_ptr&lt;/code&gt; which is where the core marking logic really starts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_ptr&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, VALUE obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;LIKELY&lt;/span&gt;(during_gc)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;rgengc_check_relation&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_set&lt;/span&gt;(objspace, obj)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* already marked */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;UNLIKELY&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;RB_TYPE_P&lt;/span&gt;(obj, T_NONE))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;rp&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_bug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;try to mark T_NONE object&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* check here will help debugging */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_aging&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_grey&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;reachable_objects_from_callback&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll talk more about checking relations and &lt;code&gt;gc_aging&lt;/code&gt; in a later post when we talk about the generational garbage collector.&lt;/p&gt;
&lt;p&gt;There are 2 interesting parts to this function. the first is the slightly misleading line here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_set&lt;/span&gt;(objspace, obj)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* already marked */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See my earlier side note about burying side effect laden code inside conditional tests - This line is what actually does the marking.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, VALUE obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ASSERT_vm_locking&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;RVALUE_MARKED&lt;/span&gt;(obj)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;MARK_IN_BITMAP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;GET_HEAP_MARK_BITS&lt;/span&gt;(obj), obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we can see we first make sure that the VM is locked, ie. we&amp;rsquo;ve stopped the world so that nothing happens to our heap while we&amp;rsquo;re collecting. Then if the object is already marked we return false, otherwise we actually mark the object and return true.&lt;/p&gt;
&lt;p&gt;Objects are marked not by setting a flag on the object itself, but by marking them in a seperate table. In Ruby&amp;rsquo;s case, each heap page has a data structure called the &lt;code&gt;mark_bits&lt;/code&gt; that is an array of bits, with each bit corresponding to a slot in the heap.&lt;/p&gt;
&lt;p&gt;The slot is marked if its mark bit is &lt;code&gt;1&lt;/code&gt; and not if its mark bit is &lt;code&gt;0&lt;/code&gt;. In the GC Handbook, this is known as bitmap marking. It has a few benefits: It doesn&amp;rsquo;t mutate objects in the heap during GC. It also allows the marking information to be stored densely. This can have speed gains when sweeping as we can keep more marking information in a single CPU cache line.&lt;/p&gt;
&lt;p&gt;Moving back to &lt;code&gt;gc_mark_ptr&lt;/code&gt;, once we get past the sanity checking code we can see the call to &lt;code&gt;gc_grey&lt;/code&gt;! This is the part of the process where we start to recognise terminology from what we know so far about mark &amp;amp; sweep!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_grey&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, VALUE obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if RGENGC_CHECK_MODE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;RVALUE_MARKED&lt;/span&gt;(obj) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE) &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_bug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gc_grey: %s is not marked.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_info&lt;/span&gt;(obj));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;RVALUE_MARKING&lt;/span&gt;(obj) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; TRUE) &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_bug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gc_grey: %s is marking/remembered.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_info&lt;/span&gt;(obj));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if GC_ENABLE_INCREMENTAL_MARK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_incremental_marking&lt;/span&gt;(objspace)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;MARK_IN_BITMAP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;GET_HEAP_MARKING_BITS&lt;/span&gt;(obj), obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push_mark_stack&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;objspace&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mark_stack, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing we see here (aside from the sanity check logic) is that we&amp;rsquo;re marking in a bitmap, but only if incremental marking is enabled.&lt;/p&gt;
&lt;p&gt;This looks relevant to us, but is actually a red herring! We&amp;rsquo;ve already marked our object in the &lt;code&gt;mark_bits&lt;/code&gt; in the previous step - these &lt;code&gt;marking_bits&lt;/code&gt; are used for something else.&lt;/p&gt;
&lt;p&gt;In this case it&amp;rsquo;s to keep track of the marking status between marking steps when incremental marking is enabled, just in case we need to invalidate the mark stack at any point. This can be required if functions written inside C extensions (and therefore outside of the control of the VM) decide to forcefully free their own objects.&lt;/p&gt;
&lt;p&gt;The last thing this function does is push our marked object onto the mark stack. Just like our pseudo-code implementation of Mark &amp;amp; Sweep earlier on in the post.&lt;/p&gt;
&lt;p&gt;Hooray! Now that we&amp;rsquo;ve got a mark stack that is populated with our marked root objects, let&amp;rsquo;s investigate how we mark the rest of the heap.&lt;/p&gt;
&lt;h3 id=&#34;marking-the-rest-of-the-heap&#34;&gt;Marking the rest of the heap&lt;/h3&gt;
&lt;p&gt;We said earlier that the mark phase was shared between two functions. Here&amp;rsquo;s the second: &lt;code&gt;gc_marks_rest&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_marks_rest&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_report&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, objspace, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gc_marks_rest&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if GC_ENABLE_INCREMENTAL_MARK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    heap_eden&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pooled_pages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_incremental_marking&lt;/span&gt;(objspace)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_stacked_objects_incremental&lt;/span&gt;(objspace, INT_MAX) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_marks_finish&lt;/span&gt;(objspace) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_stacked_objects_all&lt;/span&gt;(objspace);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_marks_finish&lt;/span&gt;(objspace);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* move to sweep */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_sweep&lt;/span&gt;(objspace);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ignoring the code paths that relate to incremental marking until another post. This code calls &lt;code&gt;gc_mark_stacked_objects_all&lt;/code&gt;, and then the slightly ambiguously named &lt;code&gt;gc_marks_finish&lt;/code&gt;, and finally moves us on to the sweeping stage with &lt;code&gt;gc_sweep&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at how the stacked objects are marked because this is where the core of our algorithm that walks the reachable objects lives.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gc_mark_stacked_objects_all&lt;/code&gt; eventually leads us to &lt;code&gt;gc_mark_stacked_objects&lt;/code&gt; and specifically, these lines of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;pop_mark_stack&lt;/span&gt;(mstack, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;obj)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_children&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hopefully it&amp;rsquo;s clear that this function pops an object (&lt;code&gt;obj&lt;/code&gt;) off the mark stack (&lt;code&gt;mstack&lt;/code&gt;), calls &lt;code&gt;gc_mark_children&lt;/code&gt; on the object and then repeats until the mark stack is empty. Just like our psuedo-implementation earlier in this article! The function &lt;code&gt;gc_mark_children&lt;/code&gt; is massive so we&amp;rsquo;re going to walk through the important parts, rather than look at the whole function at once.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_children&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, VALUE obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;register&lt;/span&gt; RVALUE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;any &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RANY&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_set_parent&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark&lt;/span&gt;(objspace, any&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;as.basic.klass);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve cut out some special case code for unexpected objects and Ruby internals here, but this is the bulk of the work of this part of the function. We flag that the object we&amp;rsquo;re looking at is our parent object, and then make sure it&amp;rsquo;s marked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;BUILTIN_TYPE&lt;/span&gt;(obj)) {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rest of this function is the body of this switch statement. We have different marking behaviour depending on what the type of the &lt;code&gt;RVALUE&lt;/code&gt; in the slot is, because each object type is arranged differently in memory and has differing fields and references to other data in the heap. Taking a Ruby Array as an example (represented by the type &lt;code&gt;T_ARRAY&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; T_ARRAY:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;FL_TEST&lt;/span&gt;(obj, ELTS_SHARED)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VALUE root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; any&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;as.array.as.heap.aux.shared_root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark&lt;/span&gt;(objspace, root);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; i, len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RARRAY_LEN&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; VALUE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RARRAY_CONST_PTR_TRANSIENT&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark&lt;/span&gt;(objspace, ptr[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;LIKELY&lt;/span&gt;(during_gc)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FL_TEST_RAW&lt;/span&gt;(obj, RARRAY_EMBED_FLAG) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;RARRAY_TRANSIENT_P&lt;/span&gt;(obj)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_transient_heap_mark&lt;/span&gt;(obj, ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how this code uses &lt;code&gt;RARRAY_CONST_PTR_TRANSIENT&lt;/code&gt; to get a pointer to the actual C array that backs the Ruby array (storing it in &lt;code&gt;ptr&lt;/code&gt;), and then uses a for loop to iterate over each &lt;code&gt;RVALUE&lt;/code&gt; contained in the array and marking it with &lt;code&gt;gc_mark&lt;/code&gt;. We know from our previous investigations that calling &lt;code&gt;gc_mark&lt;/code&gt; will result in this object being marked and added itself to the mark stack.&lt;/p&gt;
&lt;p&gt;Zooming out a little we see that this conforms to the shape of our initial mark and sweep pseudo-ruby algorithm - we&amp;rsquo;re iterating over the mark stack, and for each marked object adding their direct children back to the mark stack, which will themselves be popped off the stack and their children marked. This repeats until the stack is empty, meaning that we&amp;rsquo;ve reached everything that is reachable.&lt;/p&gt;
&lt;p&gt;The next function we identified, &lt;code&gt;gc_marks_finish&lt;/code&gt; is primarily concerned with accounting information and is mostly not relevant to our discussion of generic Mark &amp;amp; Sweep - it does do some cleanup of the heap and some reporting - but all the major work is now done. üéâ&lt;/p&gt;
&lt;p&gt;With that we can move on to sweeping. Which we&amp;rsquo;re going to discuss in another post. This post ended up being way longer than I expected going into it so thank you so much for reading and congratulations on making it this far! I had a good time writing this and putting together all the material and I hope that this was a useful insight into how a real world programming language starts to implement its own automatic dynamic memory management system!&lt;/p&gt;
&lt;p&gt;Look forward to part 2b soon‚Ñ¢ where we&amp;rsquo;ll move on to sweeping (and maybe an intro to Generational GC if I get that far).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;note that this is different to the term &amp;lsquo;dynamic languages&amp;rsquo;, which are languages in which operations that would traditionally be done at compile time, are done at run-time, examples of this are type checking and meta-programming. Dynamic is a pretty overused word when talking about programming languages tbh.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;The abbreviation can mean both &amp;ldquo;garbage collector&amp;rdquo; and &amp;ldquo;garbage collection&amp;rdquo;. Hopefully this is obvious given the context.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Code in this article is correct as of commit &lt;code&gt;df7efdcb6b7fd4286fe7d1fe853fb679aa6a5120&lt;/code&gt; on the Ruby master branch.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Ractors are an actor like concurrency framework introduced in Ruby 3.0&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This is the second part in a series. If you need a refresher of how the Ruby memory model works you can read part 1 &lt;a href=&#34;https://www.eightbitraptor.com/2021/03/23/gc-in-ruby-part-1-an-overview-of-memory-layout/&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m assuming that a huge proportion of the folks reading this post are programming with languages that implement automatic dynamic memory management. Ruby, Python, Go, JavaScript, Haskell, Swift, Lisp, Dart, and of course anything based on the .NET CLR or the JVM are all languages that manage memory automatically.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s highly likely that, if you&amp;rsquo;ve never had to explicitly call &lt;code&gt;malloc&lt;/code&gt; or a related API, then you&amp;rsquo;re working in a language with automatic dynamic memory management&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Memory management generally consists of two main concerns. How memory is claimed from the Operating System for the program to use, and how it is returned to the Operating System when it&amp;rsquo;s no longer needed.&lt;/p&gt;
&lt;p&gt;In languages with manual memory management, you&amp;rsquo;d typically ask for memory using one of the &lt;code&gt;malloc&lt;/code&gt; functions and then give it back when when you&amp;rsquo;re finished with it with &lt;code&gt;free&lt;/code&gt; (except Rust, which takes a completely different approach to memory management).&lt;/p&gt;
&lt;p&gt;In languages with automatic memory management the language runtime or compiler takes care of claiming memory using an allocator, and releasing this memory using a garbage collector.&lt;/p&gt;
&lt;p&gt;In this post we&amp;rsquo;re going to look at some basics of garbage collection. We&amp;rsquo;ll talk about some of the terminology that&amp;rsquo;s used in this subject area, and then we&amp;rsquo;re going to look at the specifics of the Mark &amp;amp; Sweep algorithm, which is one of the simpler GC&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; algorithms.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll then look at how Ruby implements the initial phase of Mark &amp;amp; Sweep: object marking&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Because the GC story in Ruby has a lot of layers these days - Incremental marking and sweeping, a generational collector that partitions objects by age, and a memory compactor that runs in tandem with GC - we&amp;rsquo;re occasionally going to see parts of the code that don&amp;rsquo;t make sense yet. I&amp;rsquo;ll go through a lot of these in future posts, and will always try and call out the stuff that isn&amp;rsquo;t relevant to the current discussion.&lt;/p&gt;
&lt;p&gt;I had intended to speak about both marking and sweeping in this post, but when I started writing I realised how much there is to cover, so I&amp;rsquo;ve chosen to cover sweeing in a separate post.&lt;/p&gt;
&lt;p&gt;Most of the things I&amp;rsquo;ve learned about GC have come from 2 main places. The first is working on the Ruby source code and pairing with my supremely talented colleagues. The second is a book called &lt;a href=&#34;https://gchandbook.org/&#34;&gt;The Garbage Collection Handbook, The Art of Automatic Memory Management&lt;/a&gt;, written by Richard Jones, Antony Hosking and Eliot Moss and published by CRC Press.&lt;/p&gt;
&lt;p&gt;This book is fantastic and I recommend it whole-heartedly if GC implementations are something that you&amp;rsquo;d like to learn more about. And without further ado, let&amp;rsquo;s jump in!&lt;/p&gt;
&lt;h2 id=&#34;terminology&#34;&gt;Terminology&lt;/h2&gt;
&lt;p&gt;There are a few concepts that are used extensively throughout GC literature. Before we can start discussing algorithms we&amp;rsquo;re going to need to know how to refer to these concepts.&lt;/p&gt;
&lt;h3 id=&#34;the-heap&#34;&gt;The heap&lt;/h3&gt;
&lt;p&gt;The heap is where all of our automatic memory management occurs. Objects are allocated out of the heap, live on the heap and the memory is made available on the heap again when they are garbage collected.&lt;/p&gt;
&lt;p&gt;It can either be a single contiguous region of memory, or it can be a set of many contiguous regions of memory (often referred to as pages). Which approach is taken will be dependant on the implementation. We&amp;rsquo;ve already seen in our previous post that Ruby uses the second approach: It allocates from heap pages within the eden heap.&lt;/p&gt;
&lt;h3 id=&#34;granules-and-objects&#34;&gt;Granules and Objects.&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;granule&lt;/strong&gt; is the smallest amount of memory we can allocate in our automatic system.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; is a contiguous region of 1 or more granules that is allocated for use by the application. Objects contain fields which may either contain data, or references to other objects in the system.&lt;/p&gt;
&lt;p&gt;In Ruby, the smallest amount of memory we can allocate on the GC heap is the size of a slot, which is 40 bytes, as every slot contains a single &lt;code&gt;RVALUE&lt;/code&gt;. This means that our granule is a 40 byte section of memory.&lt;/p&gt;
&lt;p&gt;An object in our implementation, is represented by an &lt;code&gt;RVALUE&lt;/code&gt;. This is the common type for all Ruby objects and consists of a header, along with a set of fields that may or may not refer to other objects.&lt;/p&gt;
&lt;p&gt;In the current implementations of Ruby we can only allocate one &lt;code&gt;RVALUE&lt;/code&gt; at a time. This means that an object is always exactly one granule, although this will hopfully change in the future as I&amp;rsquo;m working on introducing variable length objects to Ruby. I&amp;rsquo;ll write more about this in a future post.&lt;/p&gt;
&lt;h3 id=&#34;the-mutator-and-the-collector&#34;&gt;The mutator and the collector&lt;/h3&gt;
&lt;p&gt;These are the two main parts of any garbage collected program. The &lt;strong&gt;mutator&lt;/strong&gt; is the thread (or threads) that execute application code. This part of the system also contains the part of the memory management system that allocates objects, as well as mutate objects and their references.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;collector&lt;/strong&gt; is the thread (or threads) that execute code related to garbage collection. That is, it follows all the object references in the system to discover objects that are no longer being used by the system and reclaims their storage space, so that the mutator can re-use that memory in order to create new objects.&lt;/p&gt;
&lt;p&gt;All of the mutator and collector threads operate over the same heap.&lt;/p&gt;
&lt;h3 id=&#34;references-and-fields&#34;&gt;References and Fields&lt;/h3&gt;
&lt;p&gt;Objects can contain references to other objects. Consider the following Ruby code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Matthew&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code is going to heap allocate a few &lt;code&gt;RVALUE&lt;/code&gt; objects; among them a &lt;code&gt;T_CLASS&lt;/code&gt; representing the class &lt;code&gt;Foo&lt;/code&gt;, a &lt;code&gt;T_OBJECT&lt;/code&gt; for the instance of the class &lt;code&gt;Foo&lt;/code&gt;, and a &lt;code&gt;T_STRING&lt;/code&gt; that contains the string &amp;ldquo;Matthew&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;To keep our program consistent we need our programming language to keep track of some relationships between these things: like our &lt;code&gt;@name&lt;/code&gt; instance variable, which is itself an &lt;code&gt;RVALUE&lt;/code&gt;, and is being used by the &lt;code&gt;T_OBJECT&lt;/code&gt; which is our instance of &lt;code&gt;Foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Obviously it would be bad if the String object was garbage collected and it&amp;rsquo;s memory reused while the Object referencing it was still live!&lt;/p&gt;
&lt;p&gt;But this small example also allocates other objects, that our class references: Every &lt;code&gt;RVALUE&lt;/code&gt; struct has a &lt;strong&gt;field&lt;/strong&gt; named &lt;code&gt;class&lt;/code&gt; that contains a pointer to its class object, which in turn has a class field pointing to its class, all the way back up to &lt;code&gt;BasicObject&lt;/code&gt;. These are in addition to the specific references each type of object can hold.&lt;/p&gt;
&lt;p&gt;As we can see, these relationship graphs build up quickly, even in trivial programs. It&amp;rsquo;s these relationships that we mean when we talk about references.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;reference&lt;/strong&gt; is a field of an object that contains a pointer to another object on the heap.&lt;/p&gt;
&lt;p&gt;A pointer is a term meaning the memory address of another object. Ruby uses a type called &lt;code&gt;VALUE&lt;/code&gt; to store it&amp;rsquo;s object pointers, and they always point to the starting address of an &lt;code&gt;RVALUE&lt;/code&gt; on the heap.&lt;/p&gt;
&lt;p&gt;The GC Handbook defines this more formally:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-=&#34; data-lang=&#34;=&#34;&gt;Pointers(N) = { a | a = &amp;amp;N[i]; ‚àÄi: 0 ‚â§ i &amp;lt; |N| where N[i] is a pointer}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a statement, written in Set notation, that tells us how to define the set of references for an object. It says:&lt;/p&gt;
&lt;p&gt;For an object &lt;code&gt;N&lt;/code&gt;: The set of addresses that are the pointer fields of &lt;code&gt;N&lt;/code&gt; are all the addresses to fields that are contained in the field list of &lt;code&gt;N&lt;/code&gt; where the contents of the field is a pointer.&lt;/p&gt;
&lt;p&gt;Or, more basically: references are the fields of an object that are pointers to other objects.&lt;/p&gt;
&lt;h3 id=&#34;mutator-roots-and-the-root-object-set&#34;&gt;Mutator Roots and the Root object set&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Mutator roots&lt;/strong&gt; are the pointers to objects in the heap that are directly accessible to the mutator threads, without having to traverse any intermediate objects. We call the set of ojects accessible via the mutator roots the &lt;strong&gt;Root objects&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These mutator roots are usually thread local storage, such as execution stacks, or global variables. These will all contain references to other objects.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not possible in a type safe language to find an unreachable object in the heap by traversing the graph starting at the mutator roots. Once all pointers to that object have been discarded, it&amp;rsquo;s gone, and arithmetic pointer construction is prohibited.&lt;/p&gt;
&lt;h3 id=&#34;liveness-correctness-and-reachability&#34;&gt;Liveness, correctness and reachability.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A garbage collector is only &lt;strong&gt;correct&lt;/strong&gt; if it never reclaims live objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An object is &lt;strong&gt;live&lt;/strong&gt; if it will be accessed at some time in the future execution of the mutator.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately for us, liveness is an &lt;a href=&#34;https://www.khanacademy.org/computing/ap-computer-science-principles/algorithms-101/solving-hard-problems/a/undecidable-problems&#34;&gt;undecidable problem&lt;/a&gt;. We can never accurately know for an arbitrary heap object whether or not the program will ever access it.&lt;/p&gt;
&lt;p&gt;This is where &lt;strong&gt;reachability&lt;/strong&gt; comes in: We use an objects reachability as a way of determining an objects approximate liveness. An object &lt;code&gt;M&lt;/code&gt; is reachable from object &lt;code&gt;N&lt;/code&gt; only if object &lt;code&gt;M&lt;/code&gt; can be discovered by following a chain of pointers from a field on object &lt;code&gt;N&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So if an object is reachable from one of the mutator roots, then that the object may be accessed at some point during the programs life and is therefore considered to be a live object. If an object cannot be reached then it can never be accessed again and is dead.&lt;/p&gt;
&lt;p&gt;This conservating approach to liveness is not perfect, but it is reasonable. We may find that we mark dead objects as live because they are reachable (even though we never access them again). But importantly the reverse cannot happen - we&amp;rsquo;ll never mark live objects as dead, because we assume everything that &lt;em&gt;could&lt;/em&gt; be live &lt;em&gt;is&lt;/em&gt; live.&lt;/p&gt;
&lt;p&gt;Garbage collection algorithms that use reachability as an indicator of liveness, like Mark &amp;amp; Sweep are known as tracing garbage collectors, and are the most common type of GC algorithm.&lt;/p&gt;
&lt;h2 id=&#34;mark--sweep-garbage-collection&#34;&gt;Mark &amp;amp; Sweep Garbage collection&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve introduced the subject of garbage collection, and we&amp;rsquo;re familiar with some of the terms it&amp;rsquo;s time to introduce our first algorithm: Mark &amp;amp; Sweep.&lt;/p&gt;
&lt;p&gt;To make talking about this algorithm simpler we&amp;rsquo;re going to make a few assumptions about the operation of the system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There may be more than one mutator thread, but there is only ever one collector thread&lt;/li&gt;
&lt;li&gt;All mutator threads are stopped while the collector thread runs. There is no modificiations to the heap being made during collection other than the ones that the collector is making.&lt;/li&gt;
&lt;li&gt;Collection appears to be atomic. That is, the mutator threads will never see an intermediate state of the collector, or an intermediate state of the heap.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These assumptions are convenient not only because they avoid us having to deal with any hard concurrency problems, but also because it&amp;rsquo;s the way that GC in Ruby is implemented. So a definite win for us.&lt;/p&gt;
&lt;p&gt;Mark &amp;amp; Sweep is an algorithm invented in 1960 by James McCarthy, originally for Lisp. It&amp;rsquo;s a two phase algorithm. The first phase: Marking, involves traversing all reachable objects from the mutator roots, and recording somewhere that every object we come across is live.&lt;/p&gt;
&lt;p&gt;The second phase: Sweeping, involves walking the heap, examining the mark status for every object in the heap. Any object that is unmarked is dead, and it&amp;rsquo;s space is reclaimed.&lt;/p&gt;
&lt;h3 id=&#34;triggering-mark--sweep-gc&#34;&gt;Triggering Mark &amp;amp; Sweep GC&lt;/h3&gt;
&lt;p&gt;From the point of view of the collector, the mutator threads only do three jobs: &lt;code&gt;New&lt;/code&gt;, &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt;. These are the hooks into the program that the collector needs to reimplement in order to integrate itself with the program. &lt;code&gt;New&lt;/code&gt; allocates a new heap object and returns an address to it, &lt;code&gt;Read&lt;/code&gt; accesses an object field in memory and returns its value, and &lt;code&gt;Write&lt;/code&gt; modifies an object in memory.&lt;/p&gt;
&lt;p&gt;Mark &amp;amp; sweep doesn&amp;rsquo;t rely on information stored in the objects themselves in order to collect garbage, it relies on object reachability, so there&amp;rsquo;s no need for us to implement our own implementations for &lt;code&gt;Read&lt;/code&gt; or &lt;code&gt;Write&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead the Mark &amp;amp; Sweep collector interfaces with the mutators during object allocation. If a thread tries to allocate an object and there is no space left on the heap, then collection runs and the allocation is retried. If the allocation fails again, we are therefore out of memory and the program terminates.&lt;/p&gt;
&lt;p&gt;In Ruby, this could look something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ref&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nil?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    collect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ref&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nil?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fail &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Out of Memory&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  with_mutator_lock &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mark_from_roots
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sweep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at this code we can see that there are two main paths through the object allocation method. The first is nice and quick - we request an reference from the allocator, which immediately allocates us an object and returns it. The second is much less efficient - because the first allocation fails so now we have to stop the world and run GC before we can try again.&lt;/p&gt;
&lt;p&gt;Ruby uses an algorithm similar to this internally, but there are some differences - arising mainly because the heap is divided up into separate pages.&lt;/p&gt;
&lt;p&gt;We can see the basic shape of Ruby&amp;rsquo;s implementation of this &lt;code&gt;New&lt;/code&gt; GC hook in action by looking at the function &lt;code&gt;newobj_of0&lt;/code&gt; in &lt;code&gt;gc.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; VALUE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_of0&lt;/span&gt;(VALUE klass, VALUE flags, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; wb_protected, &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_ractor_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ractor_cached_freeobj&lt;/span&gt;(objspace, cr)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; Qfalse) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_init&lt;/span&gt;(klass, flags, wb_protected, objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wb_protected &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_slowpath_wb_protected&lt;/span&gt;(klass, flags, objspace, cr) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_slowpath_wb_unprotected&lt;/span&gt;(klass, flags, objspace, cr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; obj;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve removed some parts of the function in order to better expose the basic algorithm, which we can see is almost the same as the &lt;code&gt;new_object&lt;/code&gt; method in my psuedo Ruby example above.&lt;/p&gt;
&lt;p&gt;The test expression for the conditional combines the allocate call with the check to see whether the allocation was successfull, and if it was, we can then assign data into the slot using &lt;code&gt;newobj_init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;ractor_cached_freeobj&lt;/code&gt; is the equivalent to our call to &lt;code&gt;allocate&lt;/code&gt;. Ruby&amp;rsquo;s Ractors&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; cache a heap page, and reserve it for exclusive use by that Ractor in order to avoid data races and other concurrency related issues. But essentially this function is pulling a slot from the freelist of a heap page and returning it&amp;rsquo;s address (as a &lt;code&gt;VALUE&lt;/code&gt; pointer).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that, even when we&amp;rsquo;re not explicitly using Ractors in our code behind the scenes, there is always one ractor - which Ruby refers to as the main Ractor. You can dig deeper into this by looking at the macro &lt;code&gt;GET_RACTOR&lt;/code&gt; and the ractor struct &lt;code&gt;ruby_single_main_ractor&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If the object was not allocated successfully (ie. the call to &lt;code&gt;ractor_cached_freeobj&lt;/code&gt; returns &lt;code&gt;Qfalse&lt;/code&gt;), then we follow the slowpath.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll discuss what it means for an object to be write-barrier protected or unprotected in a later post about Generational GC, but for this discussion they&amp;rsquo;re not relevent. Both of these funtions eventually lead us to &lt;code&gt;newobj_slowpath&lt;/code&gt; which is where the second path of our &lt;code&gt;New&lt;/code&gt; job is implemented:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ractor_cached_freeobj&lt;/span&gt;(objspace, cr)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Qfalse) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ractor_cache_slots&lt;/span&gt;(objspace, cr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GC_ASSERT&lt;/span&gt;(obj &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newobj_init&lt;/span&gt;(klass, flags, wb_protected, objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s a bit of indirection here - We&amp;rsquo;re going to need to follow the rabbit hole a little deeper before we find out whether we actually need to run GC.&lt;/p&gt;
&lt;p&gt;In our first variation from our naive &lt;code&gt;New&lt;/code&gt; implementation we actually attempt the allocation again multiple times instead of just once, by calling &lt;code&gt;ractor_cached_freeobj&lt;/code&gt; and &lt;code&gt;ractor_cache_slots&lt;/code&gt; in a loop until we get a free slot back successfully.&lt;/p&gt;
&lt;p&gt;The job of &lt;code&gt;ractor_cache_slots&lt;/code&gt; is to find the next page in the heap that has free slots and cache it onto the ractor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ractor_cache_slots&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_ractor_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;ASSERT_vm_locking&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;GC_ASSERT&lt;/span&gt;(cr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;newobj_cache.freelist &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; heap_page &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap_next_freepage&lt;/span&gt;(objspace, heap_eden);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   cr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;newobj_cache.using_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   cr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;newobj_cache.freelist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;freelist;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;free_slots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;freelist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The actual caching isn&amp;rsquo;t that interesting, it&amp;rsquo;s just modifying some pointers in a linked list, but &lt;code&gt;heap_next_freepage&lt;/code&gt; looks important. This function returns the next page on the heap that contains free slots, and when there are no free pages left - then we start GC to reclaim space. We can see the actual call to &lt;code&gt;gc_start&lt;/code&gt; here, buried inside the test expression for the last conditional in &lt;code&gt;heap_prepare&lt;/code&gt; in &lt;code&gt;gc.c&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;heap_prepare&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_heap_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;heap)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;GC_ASSERT&lt;/span&gt;(heap&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;free_pages &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// spoiler alert
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_lazy_sweeping&lt;/span&gt;(heap)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_sweep_continue&lt;/span&gt;(objspace, heap);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_incremental_marking&lt;/span&gt;(objspace)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    	&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_marks_continue&lt;/span&gt;(objspace, heap);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (heap&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;free_pages &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (&lt;span style=&#34;color:#a6e22e&#34;&gt;will_be_incremental_marking&lt;/span&gt;(objspace) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap_increment&lt;/span&gt;(objspace, heap) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_start&lt;/span&gt;(objspace, GPR_FLAG_NEWOBJ) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_memerror&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Side rant: There&amp;rsquo;s a pattern here I see a lot in the MRI codebase and I don&amp;rsquo;t like it. the actual important work is being done in a really long and complext test expression of an if statement, and the body of the conditional just raises an error. I feels like it&amp;rsquo;s obfuscating the most important part of the function, which is that we should start GC when there are no free pages. C developers: &lt;a href=&#34;https://twitter.com/eightbitraptor&#34;&gt;tell me why I&amp;rsquo;m wrong!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve found the actual call to &lt;code&gt;gc_start&lt;/code&gt; we can step back through our algorithm and try and write it out in psuedo-Ruby, to compare with our generic Mark &amp;amp; Sweep &lt;code&gt;New&lt;/code&gt; implementation to see what changes Ruby is making to compensate for the division of the heap into pages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ref&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nil?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;allocate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; free_pages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        collect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; free_pages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          fail &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Out of Memory&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      current_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; free_pages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can still see the differentiation between the fast path and the slow path but there are definitely a few more steps in there. I&amp;rsquo;ve also completely ignored what happens when the collector runs but cannot free up enough memory (it definitly does not just fail the first time we run out of free pages). But I want to focus on garbage collection rather than allocation. So for now we&amp;rsquo;ll skip over that and move onto the first phase of the Mark &amp;amp; Sweep algorithm:&lt;/p&gt;
&lt;h2 id=&#34;the-mark-step&#34;&gt;The Mark step&lt;/h2&gt;
&lt;p&gt;We said earlier that the mark phase was the process by which we walk the graph of reachable objects, starting at the mutator roots, and set some flag somewhere for every live object we come across.&lt;/p&gt;
&lt;p&gt;The actual marking algorithm isn&amp;rsquo;t too complex. First we find the root objects, mark them and add them to a worklist. Then, until the worklist is empty, we pop an object off and traverse it&amp;rsquo;s set of pointers, marking and adding the object at the end of each reference to the worklist.&lt;/p&gt;
&lt;p&gt;Because this worklist is used like a stack (ie. last in, first out) of marked objects, it&amp;rsquo;s often referred to as the mark stack.&lt;/p&gt;
&lt;p&gt;An example of this would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mark_roots&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @worklist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  roots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mark_object(root)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @worklist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; root
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_mark_stack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; @worklist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @worklist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pointers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;pointer&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dereference(pointer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;.&lt;/span&gt;marked?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mark_object(child)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @worklist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; child
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mark_roots
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;process_mark_stack
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-tricolour-abstraction&#34;&gt;the tricolour abstraction&lt;/h3&gt;
&lt;p&gt;Because it&amp;rsquo;s useful to be able to refer to the different states an object can be in during the collection phase we can identify these states and give them names. The tricolour abstraction comes from a paper by Djikstra et al from 1976 and proposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects that are possibly dead are white. Initially this is every object, these objects are not marked, not on the worklist and are not currently being processed.&lt;/li&gt;
&lt;li&gt;When a white node is encountered during the marking phase it is coloured grey, this means the object is on the worklist or currently being processed.&lt;/li&gt;
&lt;li&gt;When a grey node has been fully processed and it&amp;rsquo;s children identified then it is coloured black. Black objects are marked and are no longer being processed or on the worklist.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, we don&amp;rsquo;t &lt;em&gt;actually&lt;/em&gt; colour our objects, but this abstraction gives us some new ways of thinking about how we traverse the heap.&lt;/p&gt;
&lt;p&gt;Marking looks like a wave of grey objects moving through the heap, with all white objects ahead of the wave and all black objects behind. Eventually when marking has finished, there will be no grey objects left, all reachable objects will be black.&lt;/p&gt;
&lt;p&gt;One property of this algorithm that is always true is that there are never any references from black to white objects, and therefore, any white object left at the end of the mark step is unreachable and can be collected.&lt;/p&gt;
&lt;h3 id=&#34;marking-in-ruby&#34;&gt;Marking in Ruby&lt;/h3&gt;
&lt;p&gt;The mark step in Ruby gets started from a function called &lt;code&gt;gc_marks&lt;/code&gt; which is called at the end of &lt;code&gt;gc_start&lt;/code&gt;. &lt;code&gt;gc_start&lt;/code&gt; actually does a load of work before it starts the mark step, in order to set up the conditions necessary for the GC to run, and to determine what kind of GC is running, but none of this is relevant to the discussion of simple Mark &amp;amp; Sweep.&lt;/p&gt;
&lt;p&gt;For now the only interesting work that &lt;code&gt;gc_start&lt;/code&gt; does is to call &lt;code&gt;gc_enter&lt;/code&gt; which stops all other Ractors and mutator threads and claims a VM lock, so that nothing can happen while the collector is running. This is the stop-the-world part of the process. It does this before calling &lt;code&gt;gc_marks&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gc_marks&lt;/code&gt; splits the mark phase into two. &lt;code&gt;gc_marks_start&lt;/code&gt; and &lt;code&gt;gc_marks_rest&lt;/code&gt;. This split is an artifact of incremental marking which we&amp;rsquo;ll talk about in a future post, but for now all we need to know is that &lt;code&gt;gc_marks_start&lt;/code&gt; is where the roots are marked and added to the mark stack and &lt;code&gt;gc_marks_rest&lt;/code&gt; is what processes the mark list, popping objects off and marking their children.&lt;/p&gt;
&lt;h4 id=&#34;marking-the-roots&#34;&gt;Marking the roots&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_roots&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;categoryp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; gc_list &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;list;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_execution_context_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GET_EC&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;rb_vm_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;vm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_ec_vm_ptr&lt;/span&gt;(ec);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    objspace&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rgengc.parent_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Qfalse;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_vm_mark&lt;/span&gt;(vm);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (vm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;self) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark&lt;/span&gt;(objspace, vm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;self);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mark_finalizer_tbl&lt;/span&gt;(objspace, finalizer_table);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mark_current_machine_context&lt;/span&gt;(objspace, ec);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; global_list; list; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_maybe&lt;/span&gt;(objspace, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;varptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_mark_end_proc&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_gc_mark_global_tbl&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_gc_mark&lt;/span&gt;(objspace&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_object_id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mark_tbl_no_pin&lt;/span&gt;(objspace, objspace&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;obj_to_id_tbl);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (stress_to_class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_gc_mark&lt;/span&gt;(stress_to_class);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above is an abridged version of the &lt;code&gt;gc_mark_roots&lt;/code&gt; function. I&amp;rsquo;ve removed all the debug and logging related code, to expose the actual marking code more clearly. From this we can identify exactly what Ruby considers Root objects.&lt;/p&gt;
&lt;p&gt;We can see that the root object set contains the Ruby virtual machine itself, as well as any reference directly attached to the VM, this includes all the individual Ractors, the Ruby load path, as well as all the global call cache tables and their contents.&lt;/p&gt;
&lt;p&gt;The global variable table itself, and the list of globals are also considered roots, as well as the finalizer table (finalizers are blocks of code, attached to an object, that are run when that object is garbage collected), and the current VM context object.&lt;/p&gt;
&lt;p&gt;There are a bunch of interesting functions here: &lt;code&gt;gc_mark&lt;/code&gt;, &lt;code&gt;gc_mark_maybe&lt;/code&gt;, &lt;code&gt;mark_tbl_no_pin&lt;/code&gt; that all deal with actually marking various types of objects, in various states. All of them, when you follow the path down, eventually lead to &lt;code&gt;gc_mark_ptr&lt;/code&gt; which is where the core marking logic really starts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_ptr&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, VALUE obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;LIKELY&lt;/span&gt;(during_gc)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;rgengc_check_relation&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_set&lt;/span&gt;(objspace, obj)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* already marked */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;UNLIKELY&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;RB_TYPE_P&lt;/span&gt;(obj, T_NONE))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;rp&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_bug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;try to mark T_NONE object&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* check here will help debugging */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_aging&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_grey&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;reachable_objects_from_callback&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll talk more about checking relations and &lt;code&gt;gc_aging&lt;/code&gt; in a later post when we talk about the generational garbage collector.&lt;/p&gt;
&lt;p&gt;There are 2 interesting parts to this function. the first is the slightly misleading line here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_set&lt;/span&gt;(objspace, obj)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* already marked */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See my earlier side note about burying side effect laden code inside conditional tests - This line is what actually does the marking.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, VALUE obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ASSERT_vm_locking&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;RVALUE_MARKED&lt;/span&gt;(obj)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;MARK_IN_BITMAP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;GET_HEAP_MARK_BITS&lt;/span&gt;(obj), obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we can see we first make sure that the VM is locked, ie. we&amp;rsquo;ve stopped the world so that nothing happens to our heap while we&amp;rsquo;re collecting. Then if the object is already marked we return false, otherwise we actually mark the object and return true.&lt;/p&gt;
&lt;p&gt;Objects are marked not by setting a flag on the object itself, but by marking them in a seperate table. In Ruby&amp;rsquo;s case, each heap page has a data structure called the &lt;code&gt;mark_bits&lt;/code&gt; that is an array of bits, with each bit corresponding to a slot in the heap.&lt;/p&gt;
&lt;p&gt;The slot is marked if its mark bit is &lt;code&gt;1&lt;/code&gt; and not if its mark bit is &lt;code&gt;0&lt;/code&gt;. In the GC Handbook, this is known as bitmap marking. It has a few benefits: It doesn&amp;rsquo;t mutate objects in the heap during GC. It also allows the marking information to be stored densely. This can have speed gains when sweeping as we can keep more marking information in a single CPU cache line.&lt;/p&gt;
&lt;p&gt;Moving back to &lt;code&gt;gc_mark_ptr&lt;/code&gt;, once we get past the sanity checking code we can see the call to &lt;code&gt;gc_grey&lt;/code&gt;! This is the part of the process where we start to recognise terminology from what we know so far about mark &amp;amp; sweep!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_grey&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, VALUE obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if RGENGC_CHECK_MODE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;RVALUE_MARKED&lt;/span&gt;(obj) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE) &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_bug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gc_grey: %s is not marked.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_info&lt;/span&gt;(obj));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;RVALUE_MARKING&lt;/span&gt;(obj) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; TRUE) &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_bug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gc_grey: %s is marking/remembered.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_info&lt;/span&gt;(obj));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if GC_ENABLE_INCREMENTAL_MARK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_incremental_marking&lt;/span&gt;(objspace)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;MARK_IN_BITMAP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;GET_HEAP_MARKING_BITS&lt;/span&gt;(obj), obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push_mark_stack&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;objspace&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mark_stack, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing we see here (aside from the sanity check logic) is that we&amp;rsquo;re marking in a bitmap, but only if incremental marking is enabled.&lt;/p&gt;
&lt;p&gt;This looks relevant to us, but is actually a red herring! We&amp;rsquo;ve already marked our object in the &lt;code&gt;mark_bits&lt;/code&gt; in the previous step - these &lt;code&gt;marking_bits&lt;/code&gt; are used for something else.&lt;/p&gt;
&lt;p&gt;In this case it&amp;rsquo;s to keep track of the marking status between marking steps when incremental marking is enabled, just in case we need to invalidate the mark stack at any point. This can be required if functions written inside C extensions (and therefore outside of the control of the VM) decide to forcefully free their own objects.&lt;/p&gt;
&lt;p&gt;The last thing this function does is push our marked object onto the mark stack. Just like our pseudo-code implementation of Mark &amp;amp; Sweep earlier on in the post.&lt;/p&gt;
&lt;p&gt;Hooray! Now that we&amp;rsquo;ve got a mark stack that is populated with our marked root objects, let&amp;rsquo;s investigate how we mark the rest of the heap.&lt;/p&gt;
&lt;h3 id=&#34;marking-the-rest-of-the-heap&#34;&gt;Marking the rest of the heap&lt;/h3&gt;
&lt;p&gt;We said earlier that the mark phase was shared between two functions. Here&amp;rsquo;s the second: &lt;code&gt;gc_marks_rest&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_marks_rest&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_report&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, objspace, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gc_marks_rest&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if GC_ENABLE_INCREMENTAL_MARK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    heap_eden&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pooled_pages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;is_incremental_marking&lt;/span&gt;(objspace)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_stacked_objects_incremental&lt;/span&gt;(objspace, INT_MAX) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_marks_finish&lt;/span&gt;(objspace) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FALSE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_stacked_objects_all&lt;/span&gt;(objspace);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_marks_finish&lt;/span&gt;(objspace);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* move to sweep */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_sweep&lt;/span&gt;(objspace);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ignoring the code paths that relate to incremental marking until another post. This code calls &lt;code&gt;gc_mark_stacked_objects_all&lt;/code&gt;, and then the slightly ambiguously named &lt;code&gt;gc_marks_finish&lt;/code&gt;, and finally moves us on to the sweeping stage with &lt;code&gt;gc_sweep&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at how the stacked objects are marked because this is where the core of our algorithm that walks the reachable objects lives.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gc_mark_stacked_objects_all&lt;/code&gt; eventually leads us to &lt;code&gt;gc_mark_stacked_objects&lt;/code&gt; and specifically, these lines of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;pop_mark_stack&lt;/span&gt;(mstack, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;obj)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_children&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hopefully it&amp;rsquo;s clear that this function pops an object (&lt;code&gt;obj&lt;/code&gt;) off the mark stack (&lt;code&gt;mstack&lt;/code&gt;), calls &lt;code&gt;gc_mark_children&lt;/code&gt; on the object and then repeats until the mark stack is empty. Just like our psuedo-implementation earlier in this article! The function &lt;code&gt;gc_mark_children&lt;/code&gt; is massive so we&amp;rsquo;re going to walk through the important parts, rather than look at the whole function at once.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_children&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;rb_objspace_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;objspace, VALUE obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;register&lt;/span&gt; RVALUE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;any &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RANY&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark_set_parent&lt;/span&gt;(objspace, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark&lt;/span&gt;(objspace, any&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;as.basic.klass);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve cut out some special case code for unexpected objects and Ruby internals here, but this is the bulk of the work of this part of the function. We flag that the object we&amp;rsquo;re looking at is our parent object, and then make sure it&amp;rsquo;s marked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;BUILTIN_TYPE&lt;/span&gt;(obj)) {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rest of this function is the body of this switch statement. We have different marking behaviour depending on what the type of the &lt;code&gt;RVALUE&lt;/code&gt; in the slot is, because each object type is arranged differently in memory and has differing fields and references to other data in the heap. Taking a Ruby Array as an example (represented by the type &lt;code&gt;T_ARRAY&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; T_ARRAY:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;FL_TEST&lt;/span&gt;(obj, ELTS_SHARED)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VALUE root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; any&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;as.array.as.heap.aux.shared_root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark&lt;/span&gt;(objspace, root);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; i, len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RARRAY_LEN&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; VALUE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RARRAY_CONST_PTR_TRANSIENT&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;gc_mark&lt;/span&gt;(objspace, ptr[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;LIKELY&lt;/span&gt;(during_gc)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FL_TEST_RAW&lt;/span&gt;(obj, RARRAY_EMBED_FLAG) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;RARRAY_TRANSIENT_P&lt;/span&gt;(obj)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_transient_heap_mark&lt;/span&gt;(obj, ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how this code uses &lt;code&gt;RARRAY_CONST_PTR_TRANSIENT&lt;/code&gt; to get a pointer to the actual C array that backs the Ruby array (storing it in &lt;code&gt;ptr&lt;/code&gt;), and then uses a for loop to iterate over each &lt;code&gt;RVALUE&lt;/code&gt; contained in the array and marking it with &lt;code&gt;gc_mark&lt;/code&gt;. We know from our previous investigations that calling &lt;code&gt;gc_mark&lt;/code&gt; will result in this object being marked and added itself to the mark stack.&lt;/p&gt;
&lt;p&gt;Zooming out a little we see that this conforms to the shape of our initial mark and sweep pseudo-ruby algorithm - we&amp;rsquo;re iterating over the mark stack, and for each marked object adding their direct children back to the mark stack, which will themselves be popped off the stack and their children marked. This repeats until the stack is empty, meaning that we&amp;rsquo;ve reached everything that is reachable.&lt;/p&gt;
&lt;p&gt;The next function we identified, &lt;code&gt;gc_marks_finish&lt;/code&gt; is primarily concerned with accounting information and is mostly not relevant to our discussion of generic Mark &amp;amp; Sweep - it does do some cleanup of the heap and some reporting - but all the major work is now done. üéâ&lt;/p&gt;
&lt;p&gt;With that we can move on to sweeping. Which we&amp;rsquo;re going to discuss in another post. This post ended up being way longer than I expected going into it so thank you so much for reading and congratulations on making it this far! I had a good time writing this and putting together all the material and I hope that this was a useful insight into how a real world programming language starts to implement its own automatic dynamic memory management system!&lt;/p&gt;
&lt;p&gt;Look forward to part 2b soon‚Ñ¢ where we&amp;rsquo;ll move on to sweeping (and maybe an intro to Generational GC if I get that far).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;note that this is different to the term &amp;lsquo;dynamic languages&amp;rsquo;, which are languages in which operations that would traditionally be done at compile time, are done at run-time, examples of this are type checking and meta-programming. Dynamic is a pretty overused word when talking about programming languages tbh.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;The abbreviation can mean both &amp;ldquo;garbage collector&amp;rdquo; and &amp;ldquo;garbage collection&amp;rdquo;. Hopefully this is obvious given the context.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Code in this article is correct as of commit &lt;code&gt;df7efdcb6b7fd4286fe7d1fe853fb679aa6a5120&lt;/code&gt; on the Ruby master branch.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Ractors are an actor like concurrency framework introduced in Ruby 3.0&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>GC in Ruby: Part 1, An overview of memory layout</title>
      <link>https://www.eightbitraptor.com/2021/03/23/gc-in-ruby-part-1-an-overview-of-memory-layout/</link>
      <pubDate>Tue, 23 Mar 2021 22:04:13 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/03/23/gc-in-ruby-part-1-an-overview-of-memory-layout/</guid>
      <description>&lt;h2 id=&#34;introduction-and-raison-d√™tre&#34;&gt;Introduction (and raison d&amp;rsquo;√™tre)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Part 2 (a) of this post is now live &lt;a href=&#34;https://www.eightbitraptor.com/2021/04/15/gc-in-ruby-part-2-a-what-is-gc-mark-sweep-and-how-ruby-marks-objects/&#34;&gt;here&lt;/a&gt;, where we move on to discussing our first GC algorithm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My working life is currently spent working on the internals of Matz&amp;rsquo;s Ruby Interpreter(&lt;a href=&#34;https://www.ruby-lang.org/en/about/&#34;&gt;MRI&lt;/a&gt;) as part of the Ruby Infrastructure team at Shopify.&lt;/p&gt;
&lt;p&gt;I am pretty new to this kind of work. I&amp;rsquo;ve been a Ruby developer for a long time, but when I moved to this team in June 2020 I had no professional experience writing C, and had never seen the inside of a programming language interpreter before. So a lot of concepts were (and still are) very new to me.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been learning a lot, through my work and through self-directed study. One of the tools that has always helped me learn about something is to write about it. I originally wrote this post in the beginning of December 2020, to help cement what I&amp;rsquo;d learned about Ruby&amp;rsquo;s memory architecture in my head.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tenderlovemaking.com/2017/09/27/visualizing-your-ruby-heap.html&#34;&gt;Many&lt;/a&gt; &lt;a href=&#34;https://blog.peterzhu.ca/notes-on-ruby-gc/&#34;&gt;smarter&lt;/a&gt; &lt;a href=&#34;https://jemma.dev/blog/gc-mark-and-sweep&#34;&gt;people&lt;/a&gt; &lt;a href=&#34;https://ruby-hacking-guide.github.io/gc.html&#34;&gt;than&lt;/a&gt; &lt;a href=&#34;https://www.atdot.net/~ko1/activities/rgengc_ismm.pdf&#34;&gt;me&lt;/a&gt; have written a lot about memory layout and GC in Ruby, so this post probably won&amp;rsquo;t add a lot to the discussion, which is why I&amp;rsquo;ve held off from posting it for so long.&lt;/p&gt;
&lt;p&gt;That being said, I decided to publish this here anyway. There&amp;rsquo;s always a slim possibility it&amp;rsquo;s entertaining/useful to someone, and if nothing else, it&amp;rsquo;ll be a good backup so I can find it again in the future.&lt;/p&gt;
&lt;p&gt;According to the notes that went along with this post there&amp;rsquo;s a section about all the posts I apparently intended to write:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Heap structure, memory management, requirements (ie. this post)&lt;/li&gt;
&lt;li&gt;Garbage Collection, Mark and sweep and how it&amp;rsquo;s implemented. How it&amp;rsquo;s triggered, tricolour abstraction&lt;/li&gt;
&lt;li&gt;RGENGC, The Generational garbage collector, old and new objects and the transient heap. Major and minor collections.&lt;/li&gt;
&lt;li&gt;RINCGC, The incremental garbage collector, incremental marking, incremental sweeping&lt;/li&gt;
&lt;li&gt;Compaction, auto-compaction&lt;/li&gt;
&lt;li&gt;Variable width allocation (&lt;a href=&#34;https://bugs.ruby-lang.org/issues/17570&#34;&gt;my current work project&lt;/a&gt;) and its implications.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So far I have only done &lt;code&gt;1&lt;/code&gt;. So I&amp;rsquo;ll just leave this here and lets let history be the judge of how far I got.&lt;/p&gt;
&lt;h2 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;Garbage Collection in Ruby&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is an interesting and varied picture these days. This series of posts will attempt to explain the various different collectors that are in operation inside Ruby and how they work.&lt;/p&gt;
&lt;p&gt;The code snippets included in this post are all correct as of &lt;a href=&#34;https://github.com/ruby/ruby/commit/f4386413f16f9e492a74f6b65e981e20e22c4849&#34;&gt;this commit on Ruby&amp;rsquo;s master branch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before we can start talking about garbage collection, we need to understand how Ruby organises memory. How objects are created and allocated and what happens during the lifecycle of a Ruby process.&lt;/p&gt;
&lt;h2 id=&#34;rvalues-objects-and-how-we-identify-them&#34;&gt;RValues, Objects, and how we identify them.&lt;/h2&gt;
&lt;p&gt;The first thing that we need to know is that all Ruby objects are the same size. They are stored as C structs that are 40 bytes wide called &lt;code&gt;RVALUE&lt;/code&gt;s. There are shenanigans that happen when an objects data cannot actually fit inside of 40 bytes (consider a long string for example), but, for the purposes of garbage collection we just need to remember that every Ruby object corresponds to exactly one &lt;code&gt;RVALUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the basic structure of an &lt;code&gt;RVALUE&lt;/code&gt;. Some parts that aren&amp;rsquo;t relevant to this topic have been elided for readability.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;typedef struct RVALUE {
    union {
	struct {
	    VALUE flags;		/* always 0 for freed obj */
	    struct RVALUE *next;
	} free;
        struct RMoved  moved;
	struct RBasic  basic;
	struct RObject object;
	struct RClass  klass;
	struct RFloat  flonum;
	struct RString string;
	struct RArray  array;
	struct RRegexp regexp;
	struct RHash   hash;
	struct RData   data;
	struct RTypedData   typeddata;
	struct RStruct rstruct;
	struct RBignum bignum;
	struct RFile   file;
	struct RMatch  match;
	struct RRational rational;
	struct RComplex complex;
        /* .... */
    } as;
} RVALUE;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An &lt;code&gt;RVALUE&lt;/code&gt; contains a union of every possible Ruby type (such as &lt;code&gt;RString&lt;/code&gt;, &lt;code&gt;RClass&lt;/code&gt;, &lt;code&gt;RHash&lt;/code&gt; etc), as well as some internal types under the member name &lt;code&gt;as&lt;/code&gt;. This means that we need to know what type the &lt;code&gt;RVALUE&lt;/code&gt; is before we can safely operate on it.&lt;/p&gt;
&lt;p&gt;Developers familiar with using unions in C will recognise a consequence of this arrangement, which is that without some kind of type information it&amp;rsquo;s possible for us to treat one member of a union as a different member.&lt;/p&gt;
&lt;p&gt;This can get us into trouble, as the memory layout wouldn&amp;rsquo;t necessarily map to the member fields of the other struct.&lt;/p&gt;
&lt;p&gt;For example: Assume we have an &lt;code&gt;RVALUE&lt;/code&gt; pointer called &lt;code&gt;rval&lt;/code&gt; that represents a String (&lt;code&gt;RString&lt;/code&gt; in Ruby parlance). The correct way to access the data for that string is&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;RString str;
str = rval-&amp;gt;as.string;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But, there&amp;rsquo;s nothing stopping us from accessing it as something else. We could equally assume that &lt;code&gt;rval&lt;/code&gt; is a &lt;code&gt;Regexp&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;RRegexp regex;
regex = rval-&amp;gt;as.regexp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And in this case, because &lt;code&gt;struct RString&lt;/code&gt; and &lt;code&gt;struct RRegexp&lt;/code&gt; have different layouts, the information is going to be garbled. In the best case our code will error, and in the worst case we&amp;rsquo;ll be able to use the &lt;code&gt;struct&lt;/code&gt; in ways that look sensible but are wrong - causing hard to detect problems later on in our code.&lt;/p&gt;
&lt;p&gt;Ruby does provide type tagging to mitigate this in a struct called &lt;code&gt;RBasic&lt;/code&gt; that is always defined consistently at the start of every type struct included in the &lt;code&gt;as&lt;/code&gt; union.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RBasic&lt;/code&gt; is defined as follows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;struct RBasic {
    VALUE flags;                /**&amp;lt; @see enum ::ruby_fl_type. */
    const VALUE klass;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we can see how it&amp;rsquo;s used by looking at &lt;code&gt;RString&lt;/code&gt; and &lt;code&gt;RArray&lt;/code&gt; as examples.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;// rstring.h
struct RString {
    struct RBasic basic;
    /* .... content snipped .... */
}

//rarray.h
struct RArray {
    struct RBasic basic;
    /* .... content snipped .... */
}

/* and so on for all other Ruby types */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Because &lt;code&gt;basic&lt;/code&gt; is always the first member of the struct, it is therefore in the same memory location relative to the start of every &lt;code&gt;RVALUE&lt;/code&gt;. This means that it&amp;rsquo;s always possible to get hold of the &lt;code&gt;flags&lt;/code&gt; and &lt;code&gt;klass&lt;/code&gt; in a consistent way no matter the &lt;code&gt;RVALUE&lt;/code&gt; type:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;VALUE flags = rval-&amp;gt;as.basic.flags;
VALUE my_klass = rval-&amp;gt;as.basic.klass;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;RBasic&lt;/code&gt; struct is relatively compact, taking up just 16 bytes (&lt;code&gt;VALUE&lt;/code&gt; is a type alias for an &lt;code&gt;unsigned long&lt;/code&gt;, which is 8 bytes on a 64 bit architecture).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;flags&lt;/code&gt; member is treated as an array of bits, and stores a lot of information about the state of an object, whether it&amp;rsquo;s frozen, whether it&amp;rsquo;s a singleton and much more, including some user-definable bits that can be used when implementing new Ruby types - but importantly for us, the 5 least significant bits are used to store a builtin type code.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;klass&lt;/code&gt; member is also a &lt;code&gt;VALUE&lt;/code&gt; but in this case it&amp;rsquo;s being used as a pointer (more on this later), to an &lt;code&gt;RValue&lt;/code&gt; object of type &lt;code&gt;RClass&lt;/code&gt;, this loosely corresponds to the Ruby class of the object being represented.&lt;/p&gt;
&lt;p&gt;So now we have a consistent way of finding out which builtin type an &lt;code&gt;RVALUE&lt;/code&gt; is, as well as it&amp;rsquo;s Ruby class.&lt;/p&gt;
&lt;p&gt;Ruby provides pre-processor macros to make working with this information easier and less error-prone than accessing the flags manually every time, and these macros make working with &lt;code&gt;RVALUE&lt;/code&gt;s easier.&lt;/p&gt;
&lt;p&gt;The first is &lt;code&gt;BUILTIN_TYPE&lt;/code&gt;. This takes a pointer to an &lt;code&gt;RValue&lt;/code&gt; as its argument, dereferences it, applies a mask to the &lt;code&gt;flags&lt;/code&gt; to focus just on the type bits, and then compares that to a known list of types. A good example can be seen in the &lt;code&gt;obj_free&lt;/code&gt; function inside &lt;code&gt;gc.c&lt;/code&gt;. This function reclaims memory for objects that are no longer needed, and the way in which memory is reclaimed will depend on how the object in question stores references to its external data.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;switch (BUILTIN_TYPE(obj)) {
    case T_OBJECT:
        /* .... some stuff .... */
        break;
    case T_MODULE:
    case T_CLASS:
        /* .... some stuff .... */
        break;
    case T_STRING:
        /* .... some stuff .... */
        break;
    case T_ARRAY:
        /* .... some stuff .... */
        break;
    case T_HASH:
        /* .... some stuff .... */
        break;
    /* ... and so on for all other builtin types .... */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another is &lt;code&gt;RB_TYPE_P&lt;/code&gt;, which is a predicate allowing you to check an &lt;code&gt;RVALUE&lt;/code&gt; against a specific type. You can see this being used in &lt;code&gt;string.c&lt;/code&gt;: &lt;code&gt;rb_str_eql&lt;/code&gt; is the underlying function that runs when you call &lt;code&gt;String#eql?&lt;/code&gt; in your Ruby code.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;VALUE
rb_str_eql(VALUE str1, VALUE str2)
{
    if (str1 == str2) return Qtrue;
    if (!RB_TYPE_P(str2, T_STRING)) return Qfalse;
    return rb_str_eql_internal(str1, str2);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From this code we can see that we first check whether the argument and the receiver are the exact same string, if they&amp;rsquo;re not then we check whether the argument is even a &lt;code&gt;String&lt;/code&gt; using &lt;code&gt;RB_TYPE_P&lt;/code&gt;; if it&amp;rsquo;s not then we know that it can never be equal to the receiver, so we fail fast (returning False in this case).&lt;/p&gt;
&lt;p&gt;Macros are also provided for casting &lt;code&gt;RVALUE&lt;/code&gt; pointers to known types, such as &lt;code&gt;RSTRING&lt;/code&gt;, &lt;code&gt;RARRAY&lt;/code&gt; etc. As well as the macro &lt;code&gt;RANY&lt;/code&gt; which signifies that we don&amp;rsquo;t care what type the &lt;code&gt;RVALUE&lt;/code&gt; is, we just want to access struct members that are common to all.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use these a lot later on, but for now lets talk about Ruby organises the &lt;code&gt;RVALUE&lt;/code&gt; structs.&lt;/p&gt;
&lt;h2 id=&#34;how-objects-are-organised&#34;&gt;How objects are organised&lt;/h2&gt;
&lt;p&gt;We now know that every Ruby object is represented internally as an instance of a C struct called an &lt;code&gt;RVALUE&lt;/code&gt; and that we have easy ways of identifying from an &lt;code&gt;RVALUE&lt;/code&gt; what object is being represented. So now we need to look at how these &lt;code&gt;RVALUE&lt;/code&gt; objects are organised in memory.&lt;/p&gt;
&lt;p&gt;The abriged version is that Ruby stores &lt;code&gt;RVALUE&lt;/code&gt; objects in a structure called a heap, and that the heap is divided into pages. We&amp;rsquo;re going to look into this in a bit more detail and explore some of the implications of that and what that structure allows us to do.&lt;/p&gt;
&lt;p&gt;One thing to note is that when we&amp;rsquo;re referring to heaps and heap pages the terminology changes slightly. We refer to heap pages as having &amp;ldquo;slots&amp;rdquo;, where each slot contains one &lt;code&gt;RVALUE&lt;/code&gt;. An empty slot can be accessed in the same way as any other slot containing an &lt;code&gt;RVALUE&lt;/code&gt;. The difference is that empty &lt;code&gt;RVALUE&lt;/code&gt;&amp;rsquo;s will have a &lt;code&gt;BUILTIN_TYPE&lt;/code&gt; of &lt;code&gt;T_NONE&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;heap-pages&#34;&gt;Heap pages&lt;/h3&gt;
&lt;p&gt;The first unit of organisation that we&amp;rsquo;ll consider is the &lt;code&gt;struct heap_page&lt;/code&gt;. A heap page is a container for a series of slots that are contiguous in memory. It contains accounting information about the number of slots in a page and how many are free, a reference to the starting slot in memory, some bitmasks that are used during the garbage collection process to tell whether an object is marked or pinned (more on this later).&lt;/p&gt;
&lt;p&gt;Heap pages are exactly 16Kb in size, so they can be aligned to multiples of the operating system page size, in order to use memory as efficiently as we can. Most OS pages are 4Kb, so each 16Kb Ruby heap page maps to 4 OS pages.&lt;/p&gt;
&lt;p&gt;Because each page is a fixed size, it can only contain a limited number of slots, this is calculated by subtracting some space for header information and dividing the size of the rest of the page by the size of an &lt;code&gt;RVALUE&lt;/code&gt;, which it does in the following way.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;HEAP_PAGE_OBJ_LIMIT = (unsigned int)(
  (HEAP_PAGE_SIZE - sizeof(struct heap_page_header))/sizeof(struct RVALUE)
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gives us a limit of 409 slots per page.&lt;/p&gt;
&lt;p&gt;An interesting quirk of this is that due to memory alignment constraints, a heap page may not necessarily contain 409 slots, sometimes it&amp;rsquo;ll contain 408.&lt;/p&gt;
&lt;p&gt;This happens because during the ruby page/os page allocation we may find ourselves with a starting address that doesn&amp;rsquo;t evenly divide by the size of an &lt;code&gt;RVALUE&lt;/code&gt;. In this case Ruby juggles the &lt;code&gt;page-&amp;gt;start&lt;/code&gt; pointer up a few bits so that its aligned. This causes the 409th slot to not fit on the page anymore so Ruby removes it. The code that does that is in &lt;code&gt;heap_page_allocate&lt;/code&gt; in &lt;code&gt;gc.c&lt;/code&gt; and it looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;/* assign heap_page body (contains heap_page_header and RVALUEs) */
page_body = (struct heap_page_body *)rb_aligned_malloc(HEAP_PAGE_ALIGN, HEAP_PAGE_SIZE);

/* assign heap_page entry */
page = calloc1(sizeof(struct heap_page));

/* adjust obj_limit (object number available in this page) */
start = (RVALUE*)((VALUE)page_body + sizeof(struct heap_page_header));
if ((VALUE)start % sizeof(RVALUE) != 0) {
    int delta = (int)(sizeof(RVALUE) - ((VALUE)start % sizeof(RVALUE)));
    start = (RVALUE*)((VALUE)start + delta);
    limit = (HEAP_PAGE_SIZE - (int)((VALUE)start - (VALUE)page_body))/(int)sizeof(RVALUE);
}
end = start + limit;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In addition to the information above, each page also contains a pointer to the start of the freelist. The freelist is an important concept in Ruby memory management, it is a singly linked list of all the &lt;code&gt;T_NONE&lt;/code&gt; slots within a page where all new &lt;code&gt;RVALUE&lt;/code&gt;s get allocated.&lt;/p&gt;
&lt;h3 id=&#34;the-freelist&#34;&gt;The freelist&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Some of this code has changed between the commit I was looking at when I wrote this and the latest trunk. Ractors, an actor-like concurrency framework was introduced in Ruby 3.0.0 - released Dec 25th 2020. This has resulted in heap pages and their freelists being cached in the context of a Ractor now. Without this exclusivity, having multiple Ractors allocate in a single freelist would have been a concurrency nightmare. I&amp;rsquo;ll try and remember to write up something about the differences in a later post, I promise&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Earlier we mentioned that an empty slot is just an &lt;code&gt;RVALUE&lt;/code&gt; of type &lt;code&gt;T_NONE&lt;/code&gt;. Let&amp;rsquo;s look a little closer at the implementation of the &lt;code&gt;RVALUE&lt;/code&gt; struct, particularly the first entry in the &lt;code&gt;as&lt;/code&gt; union:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;typedef struct RVALUE {
    union {
        struct {
            VALUE flags;		/* always 0 for freed obj */
            struct RVALUE *next;
        } free;
        /* other types cut for brevity */
    } as
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The inline &lt;code&gt;struct free&lt;/code&gt; is what allows us to build the freelist.&lt;/p&gt;
&lt;p&gt;Remember when we said that there was nothing stopping us from treating one member of a union like any other? Well this is where that behaviour is useful:&lt;/p&gt;
&lt;p&gt;When we free an object from a slot we can use a helper &lt;code&gt;RFREE&lt;/code&gt; to treat our &lt;code&gt;RVALUE&lt;/code&gt; as a &lt;code&gt;struct free&lt;/code&gt;. This allows us to set the &lt;code&gt;flags&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; and the &lt;code&gt;next&lt;/code&gt; pointer to the address of the next free slot in the page. The next time we need a slot in which to allocate an &lt;code&gt;RVALUE&lt;/code&gt; we can just pop off the head of the freelist and write whatever we want into it.&lt;/p&gt;
&lt;p&gt;This means that finding space to assign our object is a constant time operation, and is always fast. Without this linked list, we&amp;rsquo;d have to scan the whole heap page looking for a slot, which is a linear time operation: the time it takes would depend on where in the page the next free slot is.&lt;/p&gt;
&lt;p&gt;We can see this freelist manipulation happening in the functions &lt;code&gt;heap_page_add_freeobj&lt;/code&gt; and &lt;code&gt;heap_get_freeobj&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Removing some verification and memory protection code from these functions to highlight just the important parts for this discussion leaves us with:&lt;/p&gt;
&lt;h3 id=&#34;heap_get_freeobj&#34;&gt;heap_get_freeobj&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;static inline VALUE
heap_get_freeobj(rb_objspace_t *objspace, rb_heap_t *heap)
{
    RVALUE *p = heap-&amp;gt;freelist;

    while (1) {
	    if (p != NULL) {
	        heap-&amp;gt;freelist = p-&amp;gt;as.free.next;
	        return (VALUE)p;
	    } else {
	        p = heap_get_freeobj_from_next_freepage(objspace, heap);
	    }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This function is called during the new object allocation code path, we can see it grabs an &lt;code&gt;RVALUE&lt;/code&gt; from the freelist, and returns it. Astute readers will notice that this function pulls an &lt;code&gt;RVALUE&lt;/code&gt; from the freelist defined on the heap, rather than a heap page. The heap as a whole maintains a pointer to the freelist on the first heap page as well as a list of all the pages that have free slots, allowing us to walk the entire freelist for a heap easily.&lt;/p&gt;
&lt;p&gt;The other thing this code does once it&amp;rsquo;s pulled a free slot from the freelist is to update the heap&amp;rsquo;s freelist pointer to the next free slot.&lt;/p&gt;
&lt;p&gt;It does this by checking whether the free slot we&amp;rsquo;re using has a next pointer defined, if so we can use that directly.&lt;/p&gt;
&lt;p&gt;If there is not next pointer defined then we may be at the end of the heap so we need to do some more work - &lt;code&gt;heap_get_freeobj_from_next_freepage&lt;/code&gt; hides some complexity about what we do if there isn&amp;rsquo;t any free space left, but hopefully the function name makes the intent obvious.&lt;/p&gt;
&lt;h4 id=&#34;heap_page_add_freeobj&#34;&gt;heap_page_add_freeobj&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;static inline void
heap_page_add_freeobj(rb_objspace_t *objspace, struct heap_page *page, VALUE obj)
{
    RVALUE *p = (RVALUE *)obj;

    p-&amp;gt;as.free.flags = 0;
    p-&amp;gt;as.free.next = page-&amp;gt;freelist;
    page-&amp;gt;freelist = p;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This operation is much simpler. When we want to remove an &lt;code&gt;RVALUE&lt;/code&gt; and add the slot back to the freelist, we have to blank out the &lt;code&gt;flags&lt;/code&gt;, which makes Ruby treat this as a &lt;code&gt;T_NONE&lt;/code&gt; rather than whatever type it was before, and then we add it to the front of the freelist by setting its &lt;code&gt;next&lt;/code&gt; pointer to the current freelist head and setting the freelist head to this slot.&lt;/p&gt;
&lt;p&gt;Looking at these two operations we can see that whilst the freelist is implemented as a linked list, we&amp;rsquo;re actually using it like a stack. We pop slots off the list to fill with data and then when we&amp;rsquo;re done with the slot we add it back to the front of the list.&lt;/p&gt;
&lt;h4 id=&#34;a-quirk-of-the-freelist-its-all-backwards&#34;&gt;A quirk of the freelist: it&amp;rsquo;s all backwards&lt;/h4&gt;
&lt;p&gt;When heap pages are built, first all the memory required is allocated and the slots are defined. Then the freelist is built:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;for (p = start; p != end; p++) {
	gc_report(3, objspace, &amp;#34;assign_heap_page: %p is added to freelist\n&amp;#34;, (void *)p);
	heap_page_add_freeobj(objspace, page, (VALUE)p);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looking at that loop it might not be immediately obvious, but we&amp;rsquo;re walking up the page, from start to end and calling &lt;code&gt;heap_page_add_freeobj&lt;/code&gt;; which we know adds the slot to the &lt;em&gt;front&lt;/em&gt; of the freelist.&lt;/p&gt;
&lt;p&gt;This means that the first slot on the freelist is actually the last slot, contiguously, on the page. Walking &lt;em&gt;up&lt;/em&gt; the freelist, by traversing &lt;code&gt;next&lt;/code&gt; pointers, is actually walking down the page, by memory address.&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t really have much impact on the general functioning of the freelist, but it can cause some headaches if (like me), your work is very dependant on contiguous regions of memory.&lt;/p&gt;
&lt;h3 id=&#34;the-heap-eden-and-tomb&#34;&gt;The Heap; Eden and Tomb&lt;/h3&gt;
&lt;p&gt;The second organisational unit that we&amp;rsquo;re going to look at is the &lt;code&gt;struct rb_heap_struct&lt;/code&gt;, which is more commonly referred to by its &lt;code&gt;typedef&lt;/code&gt;: &lt;code&gt;rb_heap_t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ruby maintains two heaps, the Eden heap and the Tomb heap, strucuturally they are both identical, but they are used in different ways.&lt;/p&gt;
&lt;p&gt;Each heap contains a list of pages that contain free slots, called &lt;code&gt;free_pages&lt;/code&gt; and a pointer to the page that is currently being allocated into, called &lt;code&gt;using_page&lt;/code&gt;, as well as an iterator of all pages that is used during the sweeping phase of garbage collection.&lt;/p&gt;
&lt;p&gt;Both Eden and Tomb heaps are initialised at the start of the Ruby interpreter bootup, using default parameters that can be overridden by the user.&lt;/p&gt;
&lt;p&gt;The code for that lives inside &lt;code&gt;gc.c&lt;/code&gt; as part of the &lt;code&gt;Init_heap&lt;/code&gt; function&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;void
Init_heap(void)
{
    rb_objspace_t *objspace = &amp;amp;rb_objspace;

    /* ... snipped code that is irrelevant to us at this time ... */

    heap_add_pages(objspace, heap_eden, gc_params.heap_init_slots / HEAP_PAGE_OBJ_LIMIT);

    /* ... snipped code that is irrelevant to us at this time ... */
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;rb_objspace&lt;/code&gt; is a global struct that is defined on VM initialisation and contains pointers to both of the heaps. It contains a lot of information about the garbage collection lifecycle of the running Ruby interpreter, as such we&amp;rsquo;ll discuss it in more detail in a later post, but for now we just need to know that it contains two member fields &lt;code&gt;eden_heap&lt;/code&gt; and &lt;code&gt;tomb_heap&lt;/code&gt; that are instances of &lt;code&gt;rb_heap_t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;heap_add_pages&lt;/code&gt; gives us some interesting information. Firstly that we only add pages to the &lt;code&gt;heap_eden&lt;/code&gt; when we start the VM. Secondly that the number of pages we&amp;rsquo;ll start with is configurable by tuning the parameter &lt;code&gt;gc_params.heap_init_slots&lt;/code&gt;. This is exposed to the user as the environment variable &lt;code&gt;RUBY_GC_HEAP_INIT_SLOTS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, now that we know that Ruby prefills our &lt;code&gt;eden_heap&lt;/code&gt; with a set number of empty pages when our interpreter starts, it should follow that the &lt;code&gt;eden_heap&lt;/code&gt; is where all of our objects are allocated. So what is the &lt;code&gt;tomb_heap&lt;/code&gt; used for?&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll cover this in more detail in a future post when we cover mark &amp;amp; sweep garbage collection, but some relevant code for this lives inside the &lt;code&gt;gc_sweep_step&lt;/code&gt; function:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;if (sweep_page-&amp;gt;final_slots + free_slots == sweep_page-&amp;gt;total_slots &amp;amp;&amp;amp;
    heap_pages_freeable_pages &amp;gt; 0 &amp;amp;&amp;amp;
    unlink_limit &amp;gt; 0) {
    heap_pages_freeable_pages--;
    unlink_limit--;
    /* there are no living objects -&amp;gt; move this page to tomb heap */
    heap_unlink_page(objspace, heap, sweep_page);
    heap_add_page(objspace, heap_tomb, sweep_page);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Handwaving away some details for now - this code says that if the number of free slots on the page that we&amp;rsquo;re currently sweeping is the same as the total number of slots on the page (ie. there are no live objects left on the page), then we remove the page from the Eden heap and move it into the Tomb heap.&lt;/p&gt;
&lt;p&gt;This contrasts nicely with the code in &lt;code&gt;heap_page_create&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;static struct heap_page *
heap_page_create(rb_objspace_t *objspace)
{
    struct heap_page *page;
    const char *method = &amp;#34;recycle&amp;#34;;

    heap_allocatable_pages--;

    page = heap_page_resurrect(objspace);

    if (page == NULL) {
	page = heap_page_allocate(objspace);
	method = &amp;#34;allocate&amp;#34;;
    }

    return page;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;heap_page_resurrect&lt;/code&gt; removes a page from the tomb heap and returns it. So the tomb heap can be viewed as a memory efficiency optimisation. After the garbage collector runs, instead of freeing empty pages back to the operating system, we store them somewhere, and then the next time we run out of heap pages, we first check whether we have any dead pages stored that we can recycle, and we only ask the OS to allocate us more memory if we really need it.&lt;/p&gt;
&lt;p&gt;This storage space for dead pages is what the &lt;code&gt;tomb_heap&lt;/code&gt; is used for.&lt;/p&gt;
&lt;p&gt;This is a slight simplification, as it doesn&amp;rsquo;t take into account Ruby objects with finalizers (finalizers are a way of assigning code to run when an object is garbage collected), but for our purposes it&amp;rsquo;s enough to know that finalizers exist, we&amp;rsquo;ll discuss them in more detail in a future post.&lt;/p&gt;
&lt;h2 id=&#34;summary-and-whats-next&#34;&gt;Summary, and what&amp;rsquo;s next&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s summarise what we&amp;rsquo;ve learned. We now know that all Ruby objects are fixed width C structs. They&amp;rsquo;re organised into pages, and each page holds 409 objects.&lt;/p&gt;
&lt;p&gt;We know that when the Ruby interpreter boots up it allocates a large chunk of memory from the OS, which it divides into pages and groups these pages together in a heap.&lt;/p&gt;
&lt;p&gt;We also know that a mechanism exists whereby we can recycle used pages, saving them for later use without releasing them to the operating system, and that this allows us to be a bit more efficient with our memory usage and reduce the number of times we ask the OS for more memory.&lt;/p&gt;
&lt;p&gt;We know that the heap and its pages keep track of all the free slots in a freelist, which we can use to quickly find a place in which we can assign a new object. And we know that when an object is no longer needed Ruby will push that object back onto the freelist so we can use it again later.&lt;/p&gt;
&lt;p&gt;We haven&amp;rsquo;t yet talked about when an object would be removed, and how that happens. In the next post we&amp;rsquo;ll inroduce the idea of garbage collection. We&amp;rsquo;ll talk about how Ruby determines Object liveness, how the two phases of the main Mark &amp;amp; Sweep algorithm work together to remove objects that are no longer used and return their space back to the freelist. We&amp;rsquo;ll also talk on the various ways that GC can be triggered, whether manually, or automatically during the lifetime of your programs.&lt;/p&gt;
&lt;p&gt;Lastly we&amp;rsquo;ll talk about some of the limitations of Mark &amp;amp; Sweep, the ways in which they can be mitigated against and introduce some of the concepts Ruby uses to do so, which we&amp;rsquo;ll explore in the rest of this series.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I&amp;rsquo;ll use &amp;ldquo;Ruby&amp;rdquo; a lot in this post. I know that there are many Rubies in the world and that I&amp;rsquo;m only talking about one, and so the generic use of Ruby may be incorrect. But it&amp;rsquo;s prudent to bear in mind that everything I talk about here applies specifically to the default Ruby Implementation, started by Matz, written in C and hosted on &lt;a href=&#34;https://www.ruby-lang.org&#34;&gt;https://www.ruby-lang.org&lt;/a&gt;. Other implementations may do things differently.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <content>&lt;h2 id=&#34;introduction-and-raison-d√™tre&#34;&gt;Introduction (and raison d&amp;rsquo;√™tre)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Part 2 (a) of this post is now live &lt;a href=&#34;https://www.eightbitraptor.com/2021/04/15/gc-in-ruby-part-2-a-what-is-gc-mark-sweep-and-how-ruby-marks-objects/&#34;&gt;here&lt;/a&gt;, where we move on to discussing our first GC algorithm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My working life is currently spent working on the internals of Matz&amp;rsquo;s Ruby Interpreter(&lt;a href=&#34;https://www.ruby-lang.org/en/about/&#34;&gt;MRI&lt;/a&gt;) as part of the Ruby Infrastructure team at Shopify.&lt;/p&gt;
&lt;p&gt;I am pretty new to this kind of work. I&amp;rsquo;ve been a Ruby developer for a long time, but when I moved to this team in June 2020 I had no professional experience writing C, and had never seen the inside of a programming language interpreter before. So a lot of concepts were (and still are) very new to me.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been learning a lot, through my work and through self-directed study. One of the tools that has always helped me learn about something is to write about it. I originally wrote this post in the beginning of December 2020, to help cement what I&amp;rsquo;d learned about Ruby&amp;rsquo;s memory architecture in my head.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tenderlovemaking.com/2017/09/27/visualizing-your-ruby-heap.html&#34;&gt;Many&lt;/a&gt; &lt;a href=&#34;https://blog.peterzhu.ca/notes-on-ruby-gc/&#34;&gt;smarter&lt;/a&gt; &lt;a href=&#34;https://jemma.dev/blog/gc-mark-and-sweep&#34;&gt;people&lt;/a&gt; &lt;a href=&#34;https://ruby-hacking-guide.github.io/gc.html&#34;&gt;than&lt;/a&gt; &lt;a href=&#34;https://www.atdot.net/~ko1/activities/rgengc_ismm.pdf&#34;&gt;me&lt;/a&gt; have written a lot about memory layout and GC in Ruby, so this post probably won&amp;rsquo;t add a lot to the discussion, which is why I&amp;rsquo;ve held off from posting it for so long.&lt;/p&gt;
&lt;p&gt;That being said, I decided to publish this here anyway. There&amp;rsquo;s always a slim possibility it&amp;rsquo;s entertaining/useful to someone, and if nothing else, it&amp;rsquo;ll be a good backup so I can find it again in the future.&lt;/p&gt;
&lt;p&gt;According to the notes that went along with this post there&amp;rsquo;s a section about all the posts I apparently intended to write:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Heap structure, memory management, requirements (ie. this post)&lt;/li&gt;
&lt;li&gt;Garbage Collection, Mark and sweep and how it&amp;rsquo;s implemented. How it&amp;rsquo;s triggered, tricolour abstraction&lt;/li&gt;
&lt;li&gt;RGENGC, The Generational garbage collector, old and new objects and the transient heap. Major and minor collections.&lt;/li&gt;
&lt;li&gt;RINCGC, The incremental garbage collector, incremental marking, incremental sweeping&lt;/li&gt;
&lt;li&gt;Compaction, auto-compaction&lt;/li&gt;
&lt;li&gt;Variable width allocation (&lt;a href=&#34;https://bugs.ruby-lang.org/issues/17570&#34;&gt;my current work project&lt;/a&gt;) and its implications.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So far I have only done &lt;code&gt;1&lt;/code&gt;. So I&amp;rsquo;ll just leave this here and lets let history be the judge of how far I got.&lt;/p&gt;
&lt;h2 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;Garbage Collection in Ruby&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is an interesting and varied picture these days. This series of posts will attempt to explain the various different collectors that are in operation inside Ruby and how they work.&lt;/p&gt;
&lt;p&gt;The code snippets included in this post are all correct as of &lt;a href=&#34;https://github.com/ruby/ruby/commit/f4386413f16f9e492a74f6b65e981e20e22c4849&#34;&gt;this commit on Ruby&amp;rsquo;s master branch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before we can start talking about garbage collection, we need to understand how Ruby organises memory. How objects are created and allocated and what happens during the lifecycle of a Ruby process.&lt;/p&gt;
&lt;h2 id=&#34;rvalues-objects-and-how-we-identify-them&#34;&gt;RValues, Objects, and how we identify them.&lt;/h2&gt;
&lt;p&gt;The first thing that we need to know is that all Ruby objects are the same size. They are stored as C structs that are 40 bytes wide called &lt;code&gt;RVALUE&lt;/code&gt;s. There are shenanigans that happen when an objects data cannot actually fit inside of 40 bytes (consider a long string for example), but, for the purposes of garbage collection we just need to remember that every Ruby object corresponds to exactly one &lt;code&gt;RVALUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the basic structure of an &lt;code&gt;RVALUE&lt;/code&gt;. Some parts that aren&amp;rsquo;t relevant to this topic have been elided for readability.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;typedef struct RVALUE {
    union {
	struct {
	    VALUE flags;		/* always 0 for freed obj */
	    struct RVALUE *next;
	} free;
        struct RMoved  moved;
	struct RBasic  basic;
	struct RObject object;
	struct RClass  klass;
	struct RFloat  flonum;
	struct RString string;
	struct RArray  array;
	struct RRegexp regexp;
	struct RHash   hash;
	struct RData   data;
	struct RTypedData   typeddata;
	struct RStruct rstruct;
	struct RBignum bignum;
	struct RFile   file;
	struct RMatch  match;
	struct RRational rational;
	struct RComplex complex;
        /* .... */
    } as;
} RVALUE;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An &lt;code&gt;RVALUE&lt;/code&gt; contains a union of every possible Ruby type (such as &lt;code&gt;RString&lt;/code&gt;, &lt;code&gt;RClass&lt;/code&gt;, &lt;code&gt;RHash&lt;/code&gt; etc), as well as some internal types under the member name &lt;code&gt;as&lt;/code&gt;. This means that we need to know what type the &lt;code&gt;RVALUE&lt;/code&gt; is before we can safely operate on it.&lt;/p&gt;
&lt;p&gt;Developers familiar with using unions in C will recognise a consequence of this arrangement, which is that without some kind of type information it&amp;rsquo;s possible for us to treat one member of a union as a different member.&lt;/p&gt;
&lt;p&gt;This can get us into trouble, as the memory layout wouldn&amp;rsquo;t necessarily map to the member fields of the other struct.&lt;/p&gt;
&lt;p&gt;For example: Assume we have an &lt;code&gt;RVALUE&lt;/code&gt; pointer called &lt;code&gt;rval&lt;/code&gt; that represents a String (&lt;code&gt;RString&lt;/code&gt; in Ruby parlance). The correct way to access the data for that string is&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;RString str;
str = rval-&amp;gt;as.string;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But, there&amp;rsquo;s nothing stopping us from accessing it as something else. We could equally assume that &lt;code&gt;rval&lt;/code&gt; is a &lt;code&gt;Regexp&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;RRegexp regex;
regex = rval-&amp;gt;as.regexp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And in this case, because &lt;code&gt;struct RString&lt;/code&gt; and &lt;code&gt;struct RRegexp&lt;/code&gt; have different layouts, the information is going to be garbled. In the best case our code will error, and in the worst case we&amp;rsquo;ll be able to use the &lt;code&gt;struct&lt;/code&gt; in ways that look sensible but are wrong - causing hard to detect problems later on in our code.&lt;/p&gt;
&lt;p&gt;Ruby does provide type tagging to mitigate this in a struct called &lt;code&gt;RBasic&lt;/code&gt; that is always defined consistently at the start of every type struct included in the &lt;code&gt;as&lt;/code&gt; union.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RBasic&lt;/code&gt; is defined as follows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;struct RBasic {
    VALUE flags;                /**&amp;lt; @see enum ::ruby_fl_type. */
    const VALUE klass;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we can see how it&amp;rsquo;s used by looking at &lt;code&gt;RString&lt;/code&gt; and &lt;code&gt;RArray&lt;/code&gt; as examples.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;// rstring.h
struct RString {
    struct RBasic basic;
    /* .... content snipped .... */
}

//rarray.h
struct RArray {
    struct RBasic basic;
    /* .... content snipped .... */
}

/* and so on for all other Ruby types */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Because &lt;code&gt;basic&lt;/code&gt; is always the first member of the struct, it is therefore in the same memory location relative to the start of every &lt;code&gt;RVALUE&lt;/code&gt;. This means that it&amp;rsquo;s always possible to get hold of the &lt;code&gt;flags&lt;/code&gt; and &lt;code&gt;klass&lt;/code&gt; in a consistent way no matter the &lt;code&gt;RVALUE&lt;/code&gt; type:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;VALUE flags = rval-&amp;gt;as.basic.flags;
VALUE my_klass = rval-&amp;gt;as.basic.klass;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;RBasic&lt;/code&gt; struct is relatively compact, taking up just 16 bytes (&lt;code&gt;VALUE&lt;/code&gt; is a type alias for an &lt;code&gt;unsigned long&lt;/code&gt;, which is 8 bytes on a 64 bit architecture).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;flags&lt;/code&gt; member is treated as an array of bits, and stores a lot of information about the state of an object, whether it&amp;rsquo;s frozen, whether it&amp;rsquo;s a singleton and much more, including some user-definable bits that can be used when implementing new Ruby types - but importantly for us, the 5 least significant bits are used to store a builtin type code.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;klass&lt;/code&gt; member is also a &lt;code&gt;VALUE&lt;/code&gt; but in this case it&amp;rsquo;s being used as a pointer (more on this later), to an &lt;code&gt;RValue&lt;/code&gt; object of type &lt;code&gt;RClass&lt;/code&gt;, this loosely corresponds to the Ruby class of the object being represented.&lt;/p&gt;
&lt;p&gt;So now we have a consistent way of finding out which builtin type an &lt;code&gt;RVALUE&lt;/code&gt; is, as well as it&amp;rsquo;s Ruby class.&lt;/p&gt;
&lt;p&gt;Ruby provides pre-processor macros to make working with this information easier and less error-prone than accessing the flags manually every time, and these macros make working with &lt;code&gt;RVALUE&lt;/code&gt;s easier.&lt;/p&gt;
&lt;p&gt;The first is &lt;code&gt;BUILTIN_TYPE&lt;/code&gt;. This takes a pointer to an &lt;code&gt;RValue&lt;/code&gt; as its argument, dereferences it, applies a mask to the &lt;code&gt;flags&lt;/code&gt; to focus just on the type bits, and then compares that to a known list of types. A good example can be seen in the &lt;code&gt;obj_free&lt;/code&gt; function inside &lt;code&gt;gc.c&lt;/code&gt;. This function reclaims memory for objects that are no longer needed, and the way in which memory is reclaimed will depend on how the object in question stores references to its external data.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;switch (BUILTIN_TYPE(obj)) {
    case T_OBJECT:
        /* .... some stuff .... */
        break;
    case T_MODULE:
    case T_CLASS:
        /* .... some stuff .... */
        break;
    case T_STRING:
        /* .... some stuff .... */
        break;
    case T_ARRAY:
        /* .... some stuff .... */
        break;
    case T_HASH:
        /* .... some stuff .... */
        break;
    /* ... and so on for all other builtin types .... */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another is &lt;code&gt;RB_TYPE_P&lt;/code&gt;, which is a predicate allowing you to check an &lt;code&gt;RVALUE&lt;/code&gt; against a specific type. You can see this being used in &lt;code&gt;string.c&lt;/code&gt;: &lt;code&gt;rb_str_eql&lt;/code&gt; is the underlying function that runs when you call &lt;code&gt;String#eql?&lt;/code&gt; in your Ruby code.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;VALUE
rb_str_eql(VALUE str1, VALUE str2)
{
    if (str1 == str2) return Qtrue;
    if (!RB_TYPE_P(str2, T_STRING)) return Qfalse;
    return rb_str_eql_internal(str1, str2);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From this code we can see that we first check whether the argument and the receiver are the exact same string, if they&amp;rsquo;re not then we check whether the argument is even a &lt;code&gt;String&lt;/code&gt; using &lt;code&gt;RB_TYPE_P&lt;/code&gt;; if it&amp;rsquo;s not then we know that it can never be equal to the receiver, so we fail fast (returning False in this case).&lt;/p&gt;
&lt;p&gt;Macros are also provided for casting &lt;code&gt;RVALUE&lt;/code&gt; pointers to known types, such as &lt;code&gt;RSTRING&lt;/code&gt;, &lt;code&gt;RARRAY&lt;/code&gt; etc. As well as the macro &lt;code&gt;RANY&lt;/code&gt; which signifies that we don&amp;rsquo;t care what type the &lt;code&gt;RVALUE&lt;/code&gt; is, we just want to access struct members that are common to all.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use these a lot later on, but for now lets talk about Ruby organises the &lt;code&gt;RVALUE&lt;/code&gt; structs.&lt;/p&gt;
&lt;h2 id=&#34;how-objects-are-organised&#34;&gt;How objects are organised&lt;/h2&gt;
&lt;p&gt;We now know that every Ruby object is represented internally as an instance of a C struct called an &lt;code&gt;RVALUE&lt;/code&gt; and that we have easy ways of identifying from an &lt;code&gt;RVALUE&lt;/code&gt; what object is being represented. So now we need to look at how these &lt;code&gt;RVALUE&lt;/code&gt; objects are organised in memory.&lt;/p&gt;
&lt;p&gt;The abriged version is that Ruby stores &lt;code&gt;RVALUE&lt;/code&gt; objects in a structure called a heap, and that the heap is divided into pages. We&amp;rsquo;re going to look into this in a bit more detail and explore some of the implications of that and what that structure allows us to do.&lt;/p&gt;
&lt;p&gt;One thing to note is that when we&amp;rsquo;re referring to heaps and heap pages the terminology changes slightly. We refer to heap pages as having &amp;ldquo;slots&amp;rdquo;, where each slot contains one &lt;code&gt;RVALUE&lt;/code&gt;. An empty slot can be accessed in the same way as any other slot containing an &lt;code&gt;RVALUE&lt;/code&gt;. The difference is that empty &lt;code&gt;RVALUE&lt;/code&gt;&amp;rsquo;s will have a &lt;code&gt;BUILTIN_TYPE&lt;/code&gt; of &lt;code&gt;T_NONE&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;heap-pages&#34;&gt;Heap pages&lt;/h3&gt;
&lt;p&gt;The first unit of organisation that we&amp;rsquo;ll consider is the &lt;code&gt;struct heap_page&lt;/code&gt;. A heap page is a container for a series of slots that are contiguous in memory. It contains accounting information about the number of slots in a page and how many are free, a reference to the starting slot in memory, some bitmasks that are used during the garbage collection process to tell whether an object is marked or pinned (more on this later).&lt;/p&gt;
&lt;p&gt;Heap pages are exactly 16Kb in size, so they can be aligned to multiples of the operating system page size, in order to use memory as efficiently as we can. Most OS pages are 4Kb, so each 16Kb Ruby heap page maps to 4 OS pages.&lt;/p&gt;
&lt;p&gt;Because each page is a fixed size, it can only contain a limited number of slots, this is calculated by subtracting some space for header information and dividing the size of the rest of the page by the size of an &lt;code&gt;RVALUE&lt;/code&gt;, which it does in the following way.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;HEAP_PAGE_OBJ_LIMIT = (unsigned int)(
  (HEAP_PAGE_SIZE - sizeof(struct heap_page_header))/sizeof(struct RVALUE)
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gives us a limit of 409 slots per page.&lt;/p&gt;
&lt;p&gt;An interesting quirk of this is that due to memory alignment constraints, a heap page may not necessarily contain 409 slots, sometimes it&amp;rsquo;ll contain 408.&lt;/p&gt;
&lt;p&gt;This happens because during the ruby page/os page allocation we may find ourselves with a starting address that doesn&amp;rsquo;t evenly divide by the size of an &lt;code&gt;RVALUE&lt;/code&gt;. In this case Ruby juggles the &lt;code&gt;page-&amp;gt;start&lt;/code&gt; pointer up a few bits so that its aligned. This causes the 409th slot to not fit on the page anymore so Ruby removes it. The code that does that is in &lt;code&gt;heap_page_allocate&lt;/code&gt; in &lt;code&gt;gc.c&lt;/code&gt; and it looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;/* assign heap_page body (contains heap_page_header and RVALUEs) */
page_body = (struct heap_page_body *)rb_aligned_malloc(HEAP_PAGE_ALIGN, HEAP_PAGE_SIZE);

/* assign heap_page entry */
page = calloc1(sizeof(struct heap_page));

/* adjust obj_limit (object number available in this page) */
start = (RVALUE*)((VALUE)page_body + sizeof(struct heap_page_header));
if ((VALUE)start % sizeof(RVALUE) != 0) {
    int delta = (int)(sizeof(RVALUE) - ((VALUE)start % sizeof(RVALUE)));
    start = (RVALUE*)((VALUE)start + delta);
    limit = (HEAP_PAGE_SIZE - (int)((VALUE)start - (VALUE)page_body))/(int)sizeof(RVALUE);
}
end = start + limit;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In addition to the information above, each page also contains a pointer to the start of the freelist. The freelist is an important concept in Ruby memory management, it is a singly linked list of all the &lt;code&gt;T_NONE&lt;/code&gt; slots within a page where all new &lt;code&gt;RVALUE&lt;/code&gt;s get allocated.&lt;/p&gt;
&lt;h3 id=&#34;the-freelist&#34;&gt;The freelist&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Some of this code has changed between the commit I was looking at when I wrote this and the latest trunk. Ractors, an actor-like concurrency framework was introduced in Ruby 3.0.0 - released Dec 25th 2020. This has resulted in heap pages and their freelists being cached in the context of a Ractor now. Without this exclusivity, having multiple Ractors allocate in a single freelist would have been a concurrency nightmare. I&amp;rsquo;ll try and remember to write up something about the differences in a later post, I promise&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Earlier we mentioned that an empty slot is just an &lt;code&gt;RVALUE&lt;/code&gt; of type &lt;code&gt;T_NONE&lt;/code&gt;. Let&amp;rsquo;s look a little closer at the implementation of the &lt;code&gt;RVALUE&lt;/code&gt; struct, particularly the first entry in the &lt;code&gt;as&lt;/code&gt; union:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;typedef struct RVALUE {
    union {
        struct {
            VALUE flags;		/* always 0 for freed obj */
            struct RVALUE *next;
        } free;
        /* other types cut for brevity */
    } as
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The inline &lt;code&gt;struct free&lt;/code&gt; is what allows us to build the freelist.&lt;/p&gt;
&lt;p&gt;Remember when we said that there was nothing stopping us from treating one member of a union like any other? Well this is where that behaviour is useful:&lt;/p&gt;
&lt;p&gt;When we free an object from a slot we can use a helper &lt;code&gt;RFREE&lt;/code&gt; to treat our &lt;code&gt;RVALUE&lt;/code&gt; as a &lt;code&gt;struct free&lt;/code&gt;. This allows us to set the &lt;code&gt;flags&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; and the &lt;code&gt;next&lt;/code&gt; pointer to the address of the next free slot in the page. The next time we need a slot in which to allocate an &lt;code&gt;RVALUE&lt;/code&gt; we can just pop off the head of the freelist and write whatever we want into it.&lt;/p&gt;
&lt;p&gt;This means that finding space to assign our object is a constant time operation, and is always fast. Without this linked list, we&amp;rsquo;d have to scan the whole heap page looking for a slot, which is a linear time operation: the time it takes would depend on where in the page the next free slot is.&lt;/p&gt;
&lt;p&gt;We can see this freelist manipulation happening in the functions &lt;code&gt;heap_page_add_freeobj&lt;/code&gt; and &lt;code&gt;heap_get_freeobj&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Removing some verification and memory protection code from these functions to highlight just the important parts for this discussion leaves us with:&lt;/p&gt;
&lt;h3 id=&#34;heap_get_freeobj&#34;&gt;heap_get_freeobj&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;static inline VALUE
heap_get_freeobj(rb_objspace_t *objspace, rb_heap_t *heap)
{
    RVALUE *p = heap-&amp;gt;freelist;

    while (1) {
	    if (p != NULL) {
	        heap-&amp;gt;freelist = p-&amp;gt;as.free.next;
	        return (VALUE)p;
	    } else {
	        p = heap_get_freeobj_from_next_freepage(objspace, heap);
	    }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This function is called during the new object allocation code path, we can see it grabs an &lt;code&gt;RVALUE&lt;/code&gt; from the freelist, and returns it. Astute readers will notice that this function pulls an &lt;code&gt;RVALUE&lt;/code&gt; from the freelist defined on the heap, rather than a heap page. The heap as a whole maintains a pointer to the freelist on the first heap page as well as a list of all the pages that have free slots, allowing us to walk the entire freelist for a heap easily.&lt;/p&gt;
&lt;p&gt;The other thing this code does once it&amp;rsquo;s pulled a free slot from the freelist is to update the heap&amp;rsquo;s freelist pointer to the next free slot.&lt;/p&gt;
&lt;p&gt;It does this by checking whether the free slot we&amp;rsquo;re using has a next pointer defined, if so we can use that directly.&lt;/p&gt;
&lt;p&gt;If there is not next pointer defined then we may be at the end of the heap so we need to do some more work - &lt;code&gt;heap_get_freeobj_from_next_freepage&lt;/code&gt; hides some complexity about what we do if there isn&amp;rsquo;t any free space left, but hopefully the function name makes the intent obvious.&lt;/p&gt;
&lt;h4 id=&#34;heap_page_add_freeobj&#34;&gt;heap_page_add_freeobj&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;static inline void
heap_page_add_freeobj(rb_objspace_t *objspace, struct heap_page *page, VALUE obj)
{
    RVALUE *p = (RVALUE *)obj;

    p-&amp;gt;as.free.flags = 0;
    p-&amp;gt;as.free.next = page-&amp;gt;freelist;
    page-&amp;gt;freelist = p;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This operation is much simpler. When we want to remove an &lt;code&gt;RVALUE&lt;/code&gt; and add the slot back to the freelist, we have to blank out the &lt;code&gt;flags&lt;/code&gt;, which makes Ruby treat this as a &lt;code&gt;T_NONE&lt;/code&gt; rather than whatever type it was before, and then we add it to the front of the freelist by setting its &lt;code&gt;next&lt;/code&gt; pointer to the current freelist head and setting the freelist head to this slot.&lt;/p&gt;
&lt;p&gt;Looking at these two operations we can see that whilst the freelist is implemented as a linked list, we&amp;rsquo;re actually using it like a stack. We pop slots off the list to fill with data and then when we&amp;rsquo;re done with the slot we add it back to the front of the list.&lt;/p&gt;
&lt;h4 id=&#34;a-quirk-of-the-freelist-its-all-backwards&#34;&gt;A quirk of the freelist: it&amp;rsquo;s all backwards&lt;/h4&gt;
&lt;p&gt;When heap pages are built, first all the memory required is allocated and the slots are defined. Then the freelist is built:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;for (p = start; p != end; p++) {
	gc_report(3, objspace, &amp;#34;assign_heap_page: %p is added to freelist\n&amp;#34;, (void *)p);
	heap_page_add_freeobj(objspace, page, (VALUE)p);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looking at that loop it might not be immediately obvious, but we&amp;rsquo;re walking up the page, from start to end and calling &lt;code&gt;heap_page_add_freeobj&lt;/code&gt;; which we know adds the slot to the &lt;em&gt;front&lt;/em&gt; of the freelist.&lt;/p&gt;
&lt;p&gt;This means that the first slot on the freelist is actually the last slot, contiguously, on the page. Walking &lt;em&gt;up&lt;/em&gt; the freelist, by traversing &lt;code&gt;next&lt;/code&gt; pointers, is actually walking down the page, by memory address.&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t really have much impact on the general functioning of the freelist, but it can cause some headaches if (like me), your work is very dependant on contiguous regions of memory.&lt;/p&gt;
&lt;h3 id=&#34;the-heap-eden-and-tomb&#34;&gt;The Heap; Eden and Tomb&lt;/h3&gt;
&lt;p&gt;The second organisational unit that we&amp;rsquo;re going to look at is the &lt;code&gt;struct rb_heap_struct&lt;/code&gt;, which is more commonly referred to by its &lt;code&gt;typedef&lt;/code&gt;: &lt;code&gt;rb_heap_t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ruby maintains two heaps, the Eden heap and the Tomb heap, strucuturally they are both identical, but they are used in different ways.&lt;/p&gt;
&lt;p&gt;Each heap contains a list of pages that contain free slots, called &lt;code&gt;free_pages&lt;/code&gt; and a pointer to the page that is currently being allocated into, called &lt;code&gt;using_page&lt;/code&gt;, as well as an iterator of all pages that is used during the sweeping phase of garbage collection.&lt;/p&gt;
&lt;p&gt;Both Eden and Tomb heaps are initialised at the start of the Ruby interpreter bootup, using default parameters that can be overridden by the user.&lt;/p&gt;
&lt;p&gt;The code for that lives inside &lt;code&gt;gc.c&lt;/code&gt; as part of the &lt;code&gt;Init_heap&lt;/code&gt; function&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;void
Init_heap(void)
{
    rb_objspace_t *objspace = &amp;amp;rb_objspace;

    /* ... snipped code that is irrelevant to us at this time ... */

    heap_add_pages(objspace, heap_eden, gc_params.heap_init_slots / HEAP_PAGE_OBJ_LIMIT);

    /* ... snipped code that is irrelevant to us at this time ... */
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;rb_objspace&lt;/code&gt; is a global struct that is defined on VM initialisation and contains pointers to both of the heaps. It contains a lot of information about the garbage collection lifecycle of the running Ruby interpreter, as such we&amp;rsquo;ll discuss it in more detail in a later post, but for now we just need to know that it contains two member fields &lt;code&gt;eden_heap&lt;/code&gt; and &lt;code&gt;tomb_heap&lt;/code&gt; that are instances of &lt;code&gt;rb_heap_t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;heap_add_pages&lt;/code&gt; gives us some interesting information. Firstly that we only add pages to the &lt;code&gt;heap_eden&lt;/code&gt; when we start the VM. Secondly that the number of pages we&amp;rsquo;ll start with is configurable by tuning the parameter &lt;code&gt;gc_params.heap_init_slots&lt;/code&gt;. This is exposed to the user as the environment variable &lt;code&gt;RUBY_GC_HEAP_INIT_SLOTS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, now that we know that Ruby prefills our &lt;code&gt;eden_heap&lt;/code&gt; with a set number of empty pages when our interpreter starts, it should follow that the &lt;code&gt;eden_heap&lt;/code&gt; is where all of our objects are allocated. So what is the &lt;code&gt;tomb_heap&lt;/code&gt; used for?&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll cover this in more detail in a future post when we cover mark &amp;amp; sweep garbage collection, but some relevant code for this lives inside the &lt;code&gt;gc_sweep_step&lt;/code&gt; function:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;if (sweep_page-&amp;gt;final_slots + free_slots == sweep_page-&amp;gt;total_slots &amp;amp;&amp;amp;
    heap_pages_freeable_pages &amp;gt; 0 &amp;amp;&amp;amp;
    unlink_limit &amp;gt; 0) {
    heap_pages_freeable_pages--;
    unlink_limit--;
    /* there are no living objects -&amp;gt; move this page to tomb heap */
    heap_unlink_page(objspace, heap, sweep_page);
    heap_add_page(objspace, heap_tomb, sweep_page);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Handwaving away some details for now - this code says that if the number of free slots on the page that we&amp;rsquo;re currently sweeping is the same as the total number of slots on the page (ie. there are no live objects left on the page), then we remove the page from the Eden heap and move it into the Tomb heap.&lt;/p&gt;
&lt;p&gt;This contrasts nicely with the code in &lt;code&gt;heap_page_create&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-c=&#34; data-lang=&#34;c=&#34;&gt;static struct heap_page *
heap_page_create(rb_objspace_t *objspace)
{
    struct heap_page *page;
    const char *method = &amp;#34;recycle&amp;#34;;

    heap_allocatable_pages--;

    page = heap_page_resurrect(objspace);

    if (page == NULL) {
	page = heap_page_allocate(objspace);
	method = &amp;#34;allocate&amp;#34;;
    }

    return page;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;heap_page_resurrect&lt;/code&gt; removes a page from the tomb heap and returns it. So the tomb heap can be viewed as a memory efficiency optimisation. After the garbage collector runs, instead of freeing empty pages back to the operating system, we store them somewhere, and then the next time we run out of heap pages, we first check whether we have any dead pages stored that we can recycle, and we only ask the OS to allocate us more memory if we really need it.&lt;/p&gt;
&lt;p&gt;This storage space for dead pages is what the &lt;code&gt;tomb_heap&lt;/code&gt; is used for.&lt;/p&gt;
&lt;p&gt;This is a slight simplification, as it doesn&amp;rsquo;t take into account Ruby objects with finalizers (finalizers are a way of assigning code to run when an object is garbage collected), but for our purposes it&amp;rsquo;s enough to know that finalizers exist, we&amp;rsquo;ll discuss them in more detail in a future post.&lt;/p&gt;
&lt;h2 id=&#34;summary-and-whats-next&#34;&gt;Summary, and what&amp;rsquo;s next&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s summarise what we&amp;rsquo;ve learned. We now know that all Ruby objects are fixed width C structs. They&amp;rsquo;re organised into pages, and each page holds 409 objects.&lt;/p&gt;
&lt;p&gt;We know that when the Ruby interpreter boots up it allocates a large chunk of memory from the OS, which it divides into pages and groups these pages together in a heap.&lt;/p&gt;
&lt;p&gt;We also know that a mechanism exists whereby we can recycle used pages, saving them for later use without releasing them to the operating system, and that this allows us to be a bit more efficient with our memory usage and reduce the number of times we ask the OS for more memory.&lt;/p&gt;
&lt;p&gt;We know that the heap and its pages keep track of all the free slots in a freelist, which we can use to quickly find a place in which we can assign a new object. And we know that when an object is no longer needed Ruby will push that object back onto the freelist so we can use it again later.&lt;/p&gt;
&lt;p&gt;We haven&amp;rsquo;t yet talked about when an object would be removed, and how that happens. In the next post we&amp;rsquo;ll inroduce the idea of garbage collection. We&amp;rsquo;ll talk about how Ruby determines Object liveness, how the two phases of the main Mark &amp;amp; Sweep algorithm work together to remove objects that are no longer used and return their space back to the freelist. We&amp;rsquo;ll also talk on the various ways that GC can be triggered, whether manually, or automatically during the lifetime of your programs.&lt;/p&gt;
&lt;p&gt;Lastly we&amp;rsquo;ll talk about some of the limitations of Mark &amp;amp; Sweep, the ways in which they can be mitigated against and introduce some of the concepts Ruby uses to do so, which we&amp;rsquo;ll explore in the rest of this series.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I&amp;rsquo;ll use &amp;ldquo;Ruby&amp;rdquo; a lot in this post. I know that there are many Rubies in the world and that I&amp;rsquo;m only talking about one, and so the generic use of Ruby may be incorrect. But it&amp;rsquo;s prudent to bear in mind that everything I talk about here applies specifically to the default Ruby Implementation, started by Matz, written in C and hosted on &lt;a href=&#34;https://www.ruby-lang.org&#34;&gt;https://www.ruby-lang.org&lt;/a&gt;. Other implementations may do things differently.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>Weeknote 2021.09: Elaborately carved metals</title>
      <link>https://www.eightbitraptor.com/2021/03/08/weeknote-2021.09-elaborately-carved-metals/</link>
      <pubDate>Mon, 08 Mar 2021 13:36:59 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/03/08/weeknote-2021.09-elaborately-carved-metals/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;ve been listening to a lot of music this week. Rediscovered an old
favourite of mine: Cult of Luna. I had no idea they were still making music,
I used to listen to these guys in my first year of Uni. Turns out &lt;a href=&#34;https://open.spotify.com/album/4AyosRz27DscmVHTLPpCM0?si=NswyMDCVTbmSLBw42fFgAA&#34;&gt;their
latest album&lt;/a&gt; is an absolute banger.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A friend and work colleague switched to Vim recently, and asked me for some
advice on learning it. It made me remember some of the features that I love
about the editor and why I still enjoy using it even though it&amp;rsquo;s a million
years old in programming standards. It also made me remember just how hard it
is to explain to new users.&lt;/p&gt;
&lt;p&gt;I absolutely love &lt;a href=&#34;https://danielmiessler.com/study/vim/#language&#34;&gt;this article, by Daniel Miessler&lt;/a&gt; about learning Vim -
particularly the part that explains the vim commands as being like a
language. The first time I heard this analogy a few years ago it absolutely
blew my mind and really helped me understand the way normal mode commands are
structured.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eightbitraptor.com/2020/03/11/a-typing-journey-part-2-down-the-rabbit-hole/&#34;&gt;A year ago&lt;/a&gt;
I wrote a post about keyboards. I mentioned the
&lt;a href=&#34;https://github.com/foostan/crkbd&#34;&gt;Corne Keyboard&lt;/a&gt;, an awesome little open source 40%
keyboard from Japan that I had been happily using for some time.&lt;/p&gt;
&lt;p&gt;Shortly after I wrote that post the creator of the Corne showed off a
prototype of a new keyboard he was working on, and it is very special indeed.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s based on the Corne, but makes a few layout changes that I think will be
a nice improvement to the Cornes already excellent layout.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s called the
&lt;a href=&#34;https://twitter.com/foostan/status/1306400975024914433&#34;&gt;Cornelius&lt;/a&gt;, and it&amp;rsquo;s
a high-end, split-ergo CNC aluminium, gasket-mount 40% keyboard.&lt;/p&gt;
&lt;p&gt;This combination of things makes this keyboard very special indeed, maybe
even unprecedented.&lt;/p&gt;
&lt;p&gt;Building mechanical keyboards is kind of a niche hobby, and 40% keyboards are
a niche within a niche. Most people who look at them think that they&amp;rsquo;re
either a joke, or that they&amp;rsquo;re of limited use, that it must be impossible to
do actual work on a keyboard with no numbers, and only a limited number of
the keys that are on a &amp;ldquo;normal&amp;rdquo; keyboard.&lt;/p&gt;
&lt;p&gt;People who like their 40% keyboard to also be split and have alternative
layouts to the standard row stagger are a niche within a niche within a
niche!&lt;/p&gt;
&lt;p&gt;This means that when it comes to high-end custom keyboards, there are very
few that cater to this part of the community. It takes a heck of a lot of
work and a boatload of money to design and prototype a complete keyboard,
that&amp;rsquo;s machined out of high quality materials and finished well, and because
of the small audience, group buys are risky.&lt;/p&gt;
&lt;p&gt;There have been a few nods in this general direction: &lt;a href=&#34;https://geekhack.org/index.php?topic=105358.0&#34;&gt;The
Whimsy&lt;/a&gt; for the standard 40&amp;rsquo;s
crowd, the &lt;a href=&#34;https://imkulio.com/&#34;&gt;IMK Corne Case&lt;/a&gt;, the &lt;a href=&#34;https://splitkb.com/products/corne-lp-group-buy?variant=32581510889549&#34;&gt;Boardsource LP Corne
Case&lt;/a&gt;
and the &lt;a href=&#34;https://geekhack.org/index.php?topic=109744.0&#34;&gt;Corne-ish Zen&lt;/a&gt; for
the Corne users.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also the &lt;a href=&#34;https://geekhack.org/index.php?topic=100441.0&#34;&gt;Prime_E&lt;/a&gt;
which is ergo, but uses an integrated plate.&lt;/p&gt;
&lt;p&gt;The only thing I&amp;rsquo;m aware of that&amp;rsquo;s actually gasket mount - the mounting
system preferred by a lot of the &lt;em&gt;really&lt;/em&gt; high end &amp;ldquo;normal&amp;rdquo; keyboards (cough,
&lt;a href=&#34;https://keycult.com/&#34;&gt;Keycult&lt;/a&gt;) - is the excellently named
&lt;a href=&#34;https://geekhack.org/index.php?topic=111567.0&#34;&gt;PooPooPeePee Keyboard Carnival Round
3&lt;/a&gt; (abbreivated to P4KCR3),
and that&amp;rsquo;s just a standard 40, rather than a split ergo 40.&lt;/p&gt;
&lt;p&gt;So to have someone go all out and do a full machined aluminium gasket mount
ergo 40 is pretty freaking special.&lt;/p&gt;
&lt;p&gt;The group buy is being run in Europe by &lt;a href=&#34;https://splitkb.com/&#34;&gt;splitkb.com&lt;/a&gt;
and because spots are limited (there are 100 units for the EU region, 50 for
Japan, and 100 for the US), they&amp;rsquo;re running it as a raffle, where 100 entries
will be picked at random and offered the chance to buy one. The raffle ends
soon.&lt;/p&gt;
&lt;p&gt;Have I entered it, I hear you ask?&lt;/p&gt;
&lt;p&gt;&amp;hellip;Maybe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debugging problems with the internet is a pain in the arse. Recently we&amp;rsquo;ve
been having a problem where the connection seems to drop out randomly. It
doesn&amp;rsquo;t happen every day, but probably on average once every 2 days. It&amp;rsquo;s
only down for a couple of seconds and then it reconnects again.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s bloody annoying when it happens in the middle of a video call.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been going back and forward with &lt;a href=&#34;https://www.zen.co.uk/&#34;&gt;Zen Internet&lt;/a&gt;, my provider, for a few
days now, dutifully trying all of the things that they suggest.&lt;/p&gt;
&lt;p&gt;I did mention that I run my Zen provided modem/router in PPPoE mode as I have
a UniFi Dream Machine that&amp;rsquo;s happily handling all of my networking needs.
Sadly I think this has just given them the reason they needed to stop helping
me debug it anymore. So I&amp;rsquo;m off to go and complain at tech support.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;ve been listening to a lot of music this week. Rediscovered an old
favourite of mine: Cult of Luna. I had no idea they were still making music,
I used to listen to these guys in my first year of Uni. Turns out &lt;a href=&#34;https://open.spotify.com/album/4AyosRz27DscmVHTLPpCM0?si=NswyMDCVTbmSLBw42fFgAA&#34;&gt;their
latest album&lt;/a&gt; is an absolute banger.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A friend and work colleague switched to Vim recently, and asked me for some
advice on learning it. It made me remember some of the features that I love
about the editor and why I still enjoy using it even though it&amp;rsquo;s a million
years old in programming standards. It also made me remember just how hard it
is to explain to new users.&lt;/p&gt;
&lt;p&gt;I absolutely love &lt;a href=&#34;https://danielmiessler.com/study/vim/#language&#34;&gt;this article, by Daniel Miessler&lt;/a&gt; about learning Vim -
particularly the part that explains the vim commands as being like a
language. The first time I heard this analogy a few years ago it absolutely
blew my mind and really helped me understand the way normal mode commands are
structured.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eightbitraptor.com/2020/03/11/a-typing-journey-part-2-down-the-rabbit-hole/&#34;&gt;A year ago&lt;/a&gt;
I wrote a post about keyboards. I mentioned the
&lt;a href=&#34;https://github.com/foostan/crkbd&#34;&gt;Corne Keyboard&lt;/a&gt;, an awesome little open source 40%
keyboard from Japan that I had been happily using for some time.&lt;/p&gt;
&lt;p&gt;Shortly after I wrote that post the creator of the Corne showed off a
prototype of a new keyboard he was working on, and it is very special indeed.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s based on the Corne, but makes a few layout changes that I think will be
a nice improvement to the Cornes already excellent layout.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s called the
&lt;a href=&#34;https://twitter.com/foostan/status/1306400975024914433&#34;&gt;Cornelius&lt;/a&gt;, and it&amp;rsquo;s
a high-end, split-ergo CNC aluminium, gasket-mount 40% keyboard.&lt;/p&gt;
&lt;p&gt;This combination of things makes this keyboard very special indeed, maybe
even unprecedented.&lt;/p&gt;
&lt;p&gt;Building mechanical keyboards is kind of a niche hobby, and 40% keyboards are
a niche within a niche. Most people who look at them think that they&amp;rsquo;re
either a joke, or that they&amp;rsquo;re of limited use, that it must be impossible to
do actual work on a keyboard with no numbers, and only a limited number of
the keys that are on a &amp;ldquo;normal&amp;rdquo; keyboard.&lt;/p&gt;
&lt;p&gt;People who like their 40% keyboard to also be split and have alternative
layouts to the standard row stagger are a niche within a niche within a
niche!&lt;/p&gt;
&lt;p&gt;This means that when it comes to high-end custom keyboards, there are very
few that cater to this part of the community. It takes a heck of a lot of
work and a boatload of money to design and prototype a complete keyboard,
that&amp;rsquo;s machined out of high quality materials and finished well, and because
of the small audience, group buys are risky.&lt;/p&gt;
&lt;p&gt;There have been a few nods in this general direction: &lt;a href=&#34;https://geekhack.org/index.php?topic=105358.0&#34;&gt;The
Whimsy&lt;/a&gt; for the standard 40&amp;rsquo;s
crowd, the &lt;a href=&#34;https://imkulio.com/&#34;&gt;IMK Corne Case&lt;/a&gt;, the &lt;a href=&#34;https://splitkb.com/products/corne-lp-group-buy?variant=32581510889549&#34;&gt;Boardsource LP Corne
Case&lt;/a&gt;
and the &lt;a href=&#34;https://geekhack.org/index.php?topic=109744.0&#34;&gt;Corne-ish Zen&lt;/a&gt; for
the Corne users.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also the &lt;a href=&#34;https://geekhack.org/index.php?topic=100441.0&#34;&gt;Prime_E&lt;/a&gt;
which is ergo, but uses an integrated plate.&lt;/p&gt;
&lt;p&gt;The only thing I&amp;rsquo;m aware of that&amp;rsquo;s actually gasket mount - the mounting
system preferred by a lot of the &lt;em&gt;really&lt;/em&gt; high end &amp;ldquo;normal&amp;rdquo; keyboards (cough,
&lt;a href=&#34;https://keycult.com/&#34;&gt;Keycult&lt;/a&gt;) - is the excellently named
&lt;a href=&#34;https://geekhack.org/index.php?topic=111567.0&#34;&gt;PooPooPeePee Keyboard Carnival Round
3&lt;/a&gt; (abbreivated to P4KCR3),
and that&amp;rsquo;s just a standard 40, rather than a split ergo 40.&lt;/p&gt;
&lt;p&gt;So to have someone go all out and do a full machined aluminium gasket mount
ergo 40 is pretty freaking special.&lt;/p&gt;
&lt;p&gt;The group buy is being run in Europe by &lt;a href=&#34;https://splitkb.com/&#34;&gt;splitkb.com&lt;/a&gt;
and because spots are limited (there are 100 units for the EU region, 50 for
Japan, and 100 for the US), they&amp;rsquo;re running it as a raffle, where 100 entries
will be picked at random and offered the chance to buy one. The raffle ends
soon.&lt;/p&gt;
&lt;p&gt;Have I entered it, I hear you ask?&lt;/p&gt;
&lt;p&gt;&amp;hellip;Maybe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debugging problems with the internet is a pain in the arse. Recently we&amp;rsquo;ve
been having a problem where the connection seems to drop out randomly. It
doesn&amp;rsquo;t happen every day, but probably on average once every 2 days. It&amp;rsquo;s
only down for a couple of seconds and then it reconnects again.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s bloody annoying when it happens in the middle of a video call.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been going back and forward with &lt;a href=&#34;https://www.zen.co.uk/&#34;&gt;Zen Internet&lt;/a&gt;, my provider, for a few
days now, dutifully trying all of the things that they suggest.&lt;/p&gt;
&lt;p&gt;I did mention that I run my Zen provided modem/router in PPPoE mode as I have
a UniFi Dream Machine that&amp;rsquo;s happily handling all of my networking needs.
Sadly I think this has just given them the reason they needed to stop helping
me debug it anymore. So I&amp;rsquo;m off to go and complain at tech support.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Weeknote 2021.08: Sweat the small stuff</title>
      <link>https://www.eightbitraptor.com/2021/03/01/weeknote-2021.08-sweat-the-small-stuff/</link>
      <pubDate>Mon, 01 Mar 2021 13:28:23 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/03/01/weeknote-2021.08-sweat-the-small-stuff/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Not much to report again this week. Still waiting on keyboard PCB&amp;rsquo;s so no
change on that front.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Did knock up a quick 3d print case design loosely based on the old IBM F62
Kishsaver design. haven&amp;rsquo;t finished printing and assembling it yet so no pics
for now; I don&amp;rsquo;t want to ruin the surprise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a bit of an abortive start last time. I started to run again.  I&amp;rsquo;ve
scaled back a bit and been a bit more thoughtful about the process. I&amp;rsquo;ve
calendared in 3 runs a week, on Monday, Wednesday, and Friday, with a tentative
cycle ride on Sunday.  I&amp;rsquo;m also running a much shorter distance to start with
and am alternating periods of running and walking so that I can build up my
ability slowly (in the same vein as couch to 5k). I&amp;rsquo;m already seeing some
improvements after just a week which I&amp;rsquo;m super happy about.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have a problem with detail. This reared it&amp;rsquo;s head again this week when I
spent almost 3 days debugging a problem that ended up being caused by my use
of the wrong bitmap during one of the mark functions (for the curious: in
Rubys GC, &lt;code&gt;HEAP_MARK_BITS&lt;/code&gt; are not the same as &lt;code&gt;HEAP_MARKING_BITS&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Predictably as soon as I asked for help and paired on this problem we spotted
it within 20 minutes and I felt like an idiot.&lt;/p&gt;
&lt;p&gt;After feeling (rightly, imo) angry about the confusing and slightly
disingenuous naming patterns in the MRI source code, I pushed that thought
away and realised that this was just another instance of a pattern of
behaviour that has haunted me for years.&lt;/p&gt;
&lt;p&gt;I can be detail blind, and I don&amp;rsquo;t know what to do to fix it.&lt;/p&gt;
&lt;p&gt;Within a work context this often manifests in one of two main ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I finish a feature, push a PR and then spend days fixing feedback from my
colleagues in the form of small changes that often seem like nitpicks. A
misleading variable name here, a typo there, a slightly obtuse algorithm in
that other place. Or&lt;/li&gt;
&lt;li&gt;Upon discovering a bug, I go down a rabbit hole for a long time, exploring
the problem, checking the algorithms and high level approach, making sure
that the test cases are thorough only to discover that the bug was caused
either by a typo, or by a trivial mistake that in hindsight should have
been obvious.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know I have a tendancy to zoom out and focus on slightly higher level
concerns. When I&amp;rsquo;m building a feature I focus on whether the approach makes
sense, whether I&amp;rsquo;m using appropriate patterns and data structures, or whether
the object graph makes sense, so much so that I lose sight of the smaller
detail. This seems to get more acute the higher mental pressure the work has,
so whetherI am fixing a problem in my code? someone elses code? refactoring a
feature or building a new feature (probably in that order, high to low).&lt;/p&gt;
&lt;p&gt;Anyway. I haven&amp;rsquo;t worked out what to do about this yet and it sucks because
it&amp;rsquo;s embarrassing and it&amp;rsquo;s holding me back.&lt;/p&gt;
&lt;p&gt;But the first step to fixing a problem is admitting you have one, right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I updated &lt;a href=&#34;https://www.eightbitraptor.com/docs/mattvh-user-manual.pdf&#34;&gt;my User Manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been keeping this up to date as I move between jobs and as I learn more
about myself since I was working at FutureLearn. I don&amp;rsquo;t think I&amp;rsquo;ve ever
shared it publicly before, but seeing as this week is a slow news week I may
as well!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Not much to report again this week. Still waiting on keyboard PCB&amp;rsquo;s so no
change on that front.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Did knock up a quick 3d print case design loosely based on the old IBM F62
Kishsaver design. haven&amp;rsquo;t finished printing and assembling it yet so no pics
for now; I don&amp;rsquo;t want to ruin the surprise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a bit of an abortive start last time. I started to run again.  I&amp;rsquo;ve
scaled back a bit and been a bit more thoughtful about the process. I&amp;rsquo;ve
calendared in 3 runs a week, on Monday, Wednesday, and Friday, with a tentative
cycle ride on Sunday.  I&amp;rsquo;m also running a much shorter distance to start with
and am alternating periods of running and walking so that I can build up my
ability slowly (in the same vein as couch to 5k). I&amp;rsquo;m already seeing some
improvements after just a week which I&amp;rsquo;m super happy about.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have a problem with detail. This reared it&amp;rsquo;s head again this week when I
spent almost 3 days debugging a problem that ended up being caused by my use
of the wrong bitmap during one of the mark functions (for the curious: in
Rubys GC, &lt;code&gt;HEAP_MARK_BITS&lt;/code&gt; are not the same as &lt;code&gt;HEAP_MARKING_BITS&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Predictably as soon as I asked for help and paired on this problem we spotted
it within 20 minutes and I felt like an idiot.&lt;/p&gt;
&lt;p&gt;After feeling (rightly, imo) angry about the confusing and slightly
disingenuous naming patterns in the MRI source code, I pushed that thought
away and realised that this was just another instance of a pattern of
behaviour that has haunted me for years.&lt;/p&gt;
&lt;p&gt;I can be detail blind, and I don&amp;rsquo;t know what to do to fix it.&lt;/p&gt;
&lt;p&gt;Within a work context this often manifests in one of two main ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I finish a feature, push a PR and then spend days fixing feedback from my
colleagues in the form of small changes that often seem like nitpicks. A
misleading variable name here, a typo there, a slightly obtuse algorithm in
that other place. Or&lt;/li&gt;
&lt;li&gt;Upon discovering a bug, I go down a rabbit hole for a long time, exploring
the problem, checking the algorithms and high level approach, making sure
that the test cases are thorough only to discover that the bug was caused
either by a typo, or by a trivial mistake that in hindsight should have
been obvious.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know I have a tendancy to zoom out and focus on slightly higher level
concerns. When I&amp;rsquo;m building a feature I focus on whether the approach makes
sense, whether I&amp;rsquo;m using appropriate patterns and data structures, or whether
the object graph makes sense, so much so that I lose sight of the smaller
detail. This seems to get more acute the higher mental pressure the work has,
so whetherI am fixing a problem in my code? someone elses code? refactoring a
feature or building a new feature (probably in that order, high to low).&lt;/p&gt;
&lt;p&gt;Anyway. I haven&amp;rsquo;t worked out what to do about this yet and it sucks because
it&amp;rsquo;s embarrassing and it&amp;rsquo;s holding me back.&lt;/p&gt;
&lt;p&gt;But the first step to fixing a problem is admitting you have one, right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I updated &lt;a href=&#34;https://www.eightbitraptor.com/docs/mattvh-user-manual.pdf&#34;&gt;my User Manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been keeping this up to date as I move between jobs and as I learn more
about myself since I was working at FutureLearn. I don&amp;rsquo;t think I&amp;rsquo;ve ever
shared it publicly before, but seeing as this week is a slow news week I may
as well!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Weeknote 2021.07: Buy one, get one free</title>
      <link>https://www.eightbitraptor.com/2021/02/21/weeknote-2021.07-buy-one-get-one-free/</link>
      <pubDate>Sun, 21 Feb 2021 20:46:58 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/02/21/weeknote-2021.07-buy-one-get-one-free/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Well. That&amp;rsquo;s it! Missed a week. Had to happen sooner or later. It&amp;rsquo;s like
scratching a new laptop. After carefully protecting the innocence of a
pristine new thing, the first ding has been made and it&amp;rsquo;s all downhill from
here!&lt;/p&gt;
&lt;p&gt;Flippancy aside, I&amp;rsquo;m going to try and maintain a regular cadence with these
weeknotes.  I&amp;rsquo;ve enjoyed writing them, the reflection has been useful and I&amp;rsquo;m
looking forward to reading back on them in a years time so see where I am and
where I&amp;rsquo;ve come from.&lt;/p&gt;
&lt;p&gt;Anyway. Moving on with this bumper two week update:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have changed my mind about the snow. I mean, it&amp;rsquo;s still cold and grim and I
hate falling over, but we spent most of the weekend teaching Phoebe how to
sled down hills and that was hella fun. Liz managed to find seemingly the
last sled in stock anywhere near us, about 10 minutes before closing time on
Friday, at our local sports store.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure they had marked the thing up by about 20% but even still it was
worth every penny for how much we used it. It really made our weekend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;rsquo;re slowing getting used to the new mattress. Having a hybrid memory foam
mattress is still pretty jarring for me, as when I sit on it I expect it to
behave the same as our old sprung mattress and it just doesn&amp;rsquo;t. That being
said, I have started to sleep much better which is a real win.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was my friend &lt;a href=&#34;https://mattbee.co.uk&#34;&gt;Matt&amp;rsquo;s&lt;/a&gt; birthday. He&amp;rsquo;s been doing
the &lt;a href=&#34;https://www.lockdownopenmic.club&#34;&gt;Lockdown Open Mic Club&lt;/a&gt; for a year
now, and they did a session for his birthday. They&amp;rsquo;d been sending a physical
birthday card around the country for each of the members to sign, which Matt
opened on the night, and they put together a really lovely version of one of
his songs.&lt;/p&gt;
&lt;p&gt;It was such a lovely night, and I&amp;rsquo;m so impressed at the Lockdown Open Mic
community, they&amp;rsquo;re a lovely bunch of people from around the country (and a
couple in the US I believe).&lt;/p&gt;
&lt;p&gt;It almost brought a tear to my eye.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In completely unrelated news, I dusted off and tuned my guitar and started
putting a playlist together of songs that I&amp;rsquo;d enjoy having a crack at. Not
that I need more hobbies at this point.&lt;/p&gt;
&lt;p&gt;I need to remember what strings are on my acoustic so I can buy some more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I found this set of
&lt;a href=&#34;https://www.bbc.co.uk/cbeebies/shows/octonauts&#34;&gt;Octonauts&lt;/a&gt; themed &lt;a href=&#34;https://www.thingiverse.com/thing:3352421&#34;&gt;cookie
cutters on Thingiverse&lt;/a&gt;. Phoebe
was very excited to print them with me and we used them together to make
Octonaut themed Easter biscuits - they came out alright, even if my brain was
so foggy I forgot to put any of the spices in (and later on I found the sugar
in the fridge)!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/octonauts-cookies.jpg&#34; style=&#34;width:100%&#34; alt=&#34;Octonauts themed cookies I made with my daughter. Explore! Rescue! Protect!&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Went drinking with the lads on Friday&lt;/del&gt; Got drunk alone at home in front of
a Google Hangout.&lt;/p&gt;
&lt;p&gt;The other people who were in the hangout are, however, some of the loveliest
people I know and the ensuing laughter cleansed my lockdown darkened soul.
Also I learned a new beer pouring trick but I can&amp;rsquo;t find a link to the Tiktok
so y&amp;rsquo;all gonna have to just trust me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In work news. I&amp;rsquo;m currently chasing down a really interesting memory
corruption issue.&lt;/p&gt;
&lt;p&gt;I may have mentioned this before by the memory layout in Ruby&amp;rsquo;s GC consists
of a region of consecutive 40 byte chunks (called &amp;ldquo;slots&amp;rdquo;). I have one slot
that contains the object in question and the following three slots contain
metadata for the object - we&amp;rsquo;ll call these chunks collectively &amp;rsquo;the payload&amp;rsquo;.
At the start of the payload region we have a 16 byte area for metadata about
the payload, it&amp;rsquo;s length and so on - and then we go straight into the
arbitrary payload data.&lt;/p&gt;
&lt;p&gt;We can see this here: this is the main object:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) p obj
(VALUE) $2 = 0x00000001018137e0
(lldb) rp obj
bits [LM    ]
T_CLASS: [PROMOTED] (struct RClass) $4 = {
  basic = (flags = 0x0000000000001062, klass = 0x00000001018799a0)
  super = 0x0000000101879860
  ptr = 0x0000000101813818
  class_serial = 526
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is what a Ruby class looks like. The struct member &lt;code&gt;ptr&lt;/code&gt; points to a
struct of type &lt;code&gt;rb_classext_t&lt;/code&gt; that looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) p *((struct RClass *)obj)-&amp;gt;ptr
(rb_classext_struct) $5 = {
  iv_index_tbl = 0x0000000000000000
  iv_tbl = 0x0000000100a63340
  m_tbl = 0x0000000100a605c0
  const_tbl = 0x0000000000000060
  callable_m_tbl = 0x0000000000000000
  cc_tbl = 0x0000000000000000
  subclasses = 0x0000000000000000
  parent_subclasses = 0x00000001018798c8
  module_subclasses = 0x0000000000000060
  origin_ = 0x00000001018137e0
  refined_class = 0x0000000000000008
  allocator = 0x0000000000000000
  includer = 0x0000000000000000
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that the address of &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;0x1018137e0&lt;/code&gt; and the address of the
&lt;code&gt;rb_classext_t&lt;/code&gt; struct pointed to by ptr is &lt;code&gt;0x101813818&lt;/code&gt;, if we subtract the
address of &lt;code&gt;obj&lt;/code&gt; from the &lt;code&gt;ptr&lt;/code&gt; address we get &lt;code&gt;0x38&lt;/code&gt; or 56 bytes. This fits
with our knowledge of the memory layout that each slot is 40 bytes wide and
the Payload section contains a 16 byte header object.&lt;/p&gt;
&lt;p&gt;We can verify this by grabbing the obj and adding 40 bytes and we should get
hold of a Payload header object.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) rp obj + 40
bits [      ]
Not-handled type 0x17
(RBasic *) $10 = 0x0000000101813808
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Type &lt;code&gt;0x17&lt;/code&gt; is the type for the Payload head, I promise. It&amp;rsquo;s only unhandled
because I haven&amp;rsquo;t made the debugger helper scripts support it yet!&lt;/p&gt;
&lt;p&gt;So this is all good. But what if we look at the &lt;code&gt;rb_classext_t&lt;/code&gt; struct a
little more closely? That &lt;code&gt;0x60&lt;/code&gt; memory address in &lt;code&gt;const_tbl&lt;/code&gt; looks a little
bit low compared to all the other memory locations we&amp;rsquo;ve been dealing with so
far.&lt;/p&gt;
&lt;p&gt;And sure enough: the crash I&amp;rsquo;m seeing is a SIGSEGV (memory access violation)
when trying to access the &lt;code&gt;const_tbl&lt;/code&gt; member at address &lt;code&gt;0x60&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s setting that value to &lt;code&gt;0x60&lt;/code&gt;? This behaviour is only reproduceable
on my branch, but I&amp;rsquo;m not doing anything with the content of &lt;code&gt;rb_classext_t&lt;/code&gt;,
just it&amp;rsquo;s position.&lt;/p&gt;
&lt;p&gt;The interesting thing about this bug is that if you count the bytes from the
start of the payload slot to the broken memory address you have 16 for the
header, + 24, for &lt;code&gt;iv_index_tbl&lt;/code&gt;, &lt;code&gt;iv_tbl&lt;/code&gt; and &lt;code&gt;m_tbl&lt;/code&gt; respectively. These
are all &lt;code&gt;unsigned long&lt;/code&gt; which on my machine is 8 bytes.&lt;/p&gt;
&lt;p&gt;This makes 40 bytes - which is suspicious as it&amp;rsquo;s exactly the same size as a
slot. And, if we then jump forward another 40 bytes we get to the
&lt;code&gt;module_subclasses&lt;/code&gt; member, and that has &lt;em&gt;also&lt;/em&gt; been set to &lt;code&gt;0x60&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is all super sus and almost certainly an offset bug, where we&amp;rsquo;re taking
the address at the head of the payload and naively finding the next slot by
just adding 40 bytes, and then setting a value there.&lt;/p&gt;
&lt;p&gt;The only annoying thing is that I can&amp;rsquo;t find it, despite almost certainly
introducing it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; I made the mistake of thinking for a minute, that I could
write C. The computer decided to remind me that that was not the case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bumper keyboard update this time around! First up, the &lt;a href=&#34;https://nullbits.co/nibble/&#34;&gt;Nibble
kit&lt;/a&gt;, which I took a day off to build.&lt;/p&gt;
&lt;p&gt;It was a really fun build, although the diodes took ages to get straight.
Thoroughly enjoyed the whole process - except lubing and filming the
switches, which I normally don&amp;rsquo;t mind doing but I definitely should not have
tried to do in the same day.&lt;/p&gt;
&lt;p&gt;It takes ages, and I normally like to be quite slow and thorough with the
process, but knowing that I had all those diodes to do while I was doing it
really made it feel like mission impossible.&lt;/p&gt;
&lt;p&gt;Lesson for next time is definitely split the tasks out and lube and build on
different days.&lt;/p&gt;
&lt;p&gt;As for the keyboard - I like it, although I&amp;rsquo;m back to using my HHKB right
now. There are a couple of things I&amp;rsquo;m not sure about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s got some pretty gross quality DSA keycaps on it while I wait for my
Group buy sets to come in, and I have decided that I don&amp;rsquo;t like DSA on
flat, row staggered boards.  It&amp;rsquo;s just about bearable with an angle, but
othat means I need to built/print some bumpers to raise up the board.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think 62g linears are still a bit too heavy for me, although I&amp;rsquo;m not
ruling out the idea that I might like them a lot better with better
keycaps on. I&amp;rsquo;ve got some Cherry MX Browns (eww) in a different board that
I might spring swap if I still don&amp;rsquo;t like them with the new keycaps.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m probably going to find some tactile switches for my next build though.
I&amp;rsquo;m veering towards &lt;a href=&#34;https://deskthority.net/wiki/Cherry_MX_Ergo_Clear&#34;&gt;ergo
clears&lt;/a&gt; or maybe
&lt;a href=&#34;https://deskthority.net/wiki/Holy_Panda&#34;&gt;something panda-esque&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;ve been using this for a week and I&amp;rsquo;m still not used to a column of keys
(and an encoder) to the left of the main block. It turns out I have been
anchoring with the left shift and the escape (or `) key for years and
didn&amp;rsquo;t realise it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Anyway: Here it is in all it&amp;rsquo;s glory.&lt;/p&gt;
&lt;img src=&#34;https://www.eightbitraptor.com/images/nibble.jpg&#34; style=&#34;width:100%&#34; alt=&#34;My newly built Nibble 65% keyboard with Durock Linear 62g L7&#39;s&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a flash of inspiration I put together a 45% keyboard design and PCB.
It&amp;rsquo;s based on a
&lt;a href=&#34;https://mechboards.co.uk/shop/components/pro-micro-5v/&#34;&gt;ProMicro&lt;/a&gt;. An
all-in-one AVR based development board so it&amp;rsquo;s easy mode for PCB design. No
worrying about differential signalling down the USB bus or worrying about
whether I can place the crystal close enough to the MCU. All I have to do
with a ProMicro is route the matrix, which took a couple of hours at most.
I&amp;rsquo;m pleased with how it came out.&lt;/p&gt;
&lt;p&gt;I also wanted to experiment with silkscreen artwork so I dropped in a jpg of
&lt;a href=&#34;https://www.youtube.com/watch?v=jar1LTxxAeM&#34;&gt;Megumin&lt;/a&gt;, probably my favourite
character so far from very silly anime
&lt;a href=&#34;https://www.animenewsnetwork.com/encyclopedia/anime.php?id=17123&#34;&gt;Konosuba&lt;/a&gt;
(which I&amp;rsquo;m idly watching a few episodes at a time whenever I find myself doing
the ironing).&lt;/p&gt;
&lt;p&gt;Final Version I sent off to &lt;a href=&#34;https://jlcpcb.com&#34;&gt;JLCPCB&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/Megu45-pcb.png&#34; style=&#34;width:100%&#34; alt=&#34;The 45% PCB I designed&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;I originally wanted it matte black, just with the image in red, but JLCPCB
only support white silkscreen printing, so I just YOLO&amp;rsquo;d the whole PCB in red
instead. I hope it comes out a reasonable colour.&lt;/p&gt;
&lt;p&gt;And the layout it uses is this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/Megu45-kle.png&#34; style=&#34;width:100%&#34; alt=&#34;It uses this layout&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;This is basically a meme by keyboard community standards. A Winkeyless, big
bar, weeb-themed 40%, with a top-right Kyuu style blocker, and I&amp;rsquo;m here for it!&lt;/p&gt;
&lt;p&gt;No case design yet. I&amp;rsquo;m thinking something 3D printed, or maybe clear acrylic
layered to show of the garish PCB to it&amp;rsquo;s full glory. Who knows maybe V2 will
even have RGB ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While I was at JLCPCB I also got together some gerbers and ordered the latest
version of the CRKBD Light, a minimalist version of &lt;a href=&#34;https://github.com/foostan/crkbd&#34;&gt;the fantastic
CRKBD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used a CRKBD for a while - it was my first build and I&amp;rsquo;ve wanted to
build a Corne Light since &lt;a href=&#34;https://twitter.com/foostan/status/1289863511028273152/photo/1&#34;&gt;foostan posted this
tweet&lt;/a&gt; so it
seemed rude not to while I was at JLCPCB and everything.&lt;/p&gt;
&lt;p&gt;Who knows when I&amp;rsquo;m going to get round to building either of these. But maybe
next week I can at least get some switches ordered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The final cherry on top of the last two weeks is that the weather has finally
started warming up again! Spring is on it&amp;rsquo;s way.&lt;/p&gt;
&lt;p&gt;Warm enough that that on Sunday, I spent most of the day in the garden,
playing with Phoebe, and neither of us wore coats. We went bug hunting,
planted some seeds, played a lot of hide and seek and spent time on her swing
and slide.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s hard for me to communicate just how much of a blessing it is to be able
to watch your kid play, uninhibited and unrestricted, in a safe outside
space. That together with the warmth of the early spring sun has really
lifted my spirits.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve always been grumpy about gardens. I have never liked gardening, or
anything that required outdoor dirty work, and have always viewed them as way
too much work for not enough reward.&lt;/p&gt;
&lt;p&gt;But I will admit that after a year of severely restricted travel and
opportunity, and a winter where even the garden was unusable, that I love my
garden. I&amp;rsquo;m very lucky to have it - and I&amp;rsquo;m actually excited by the thought
of getting out there and doing the work to make it nice for the kids growing
up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I still haven&amp;rsquo;t done the OpenGraph thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Well. That&amp;rsquo;s it! Missed a week. Had to happen sooner or later. It&amp;rsquo;s like
scratching a new laptop. After carefully protecting the innocence of a
pristine new thing, the first ding has been made and it&amp;rsquo;s all downhill from
here!&lt;/p&gt;
&lt;p&gt;Flippancy aside, I&amp;rsquo;m going to try and maintain a regular cadence with these
weeknotes.  I&amp;rsquo;ve enjoyed writing them, the reflection has been useful and I&amp;rsquo;m
looking forward to reading back on them in a years time so see where I am and
where I&amp;rsquo;ve come from.&lt;/p&gt;
&lt;p&gt;Anyway. Moving on with this bumper two week update:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have changed my mind about the snow. I mean, it&amp;rsquo;s still cold and grim and I
hate falling over, but we spent most of the weekend teaching Phoebe how to
sled down hills and that was hella fun. Liz managed to find seemingly the
last sled in stock anywhere near us, about 10 minutes before closing time on
Friday, at our local sports store.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure they had marked the thing up by about 20% but even still it was
worth every penny for how much we used it. It really made our weekend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;rsquo;re slowing getting used to the new mattress. Having a hybrid memory foam
mattress is still pretty jarring for me, as when I sit on it I expect it to
behave the same as our old sprung mattress and it just doesn&amp;rsquo;t. That being
said, I have started to sleep much better which is a real win.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was my friend &lt;a href=&#34;https://mattbee.co.uk&#34;&gt;Matt&amp;rsquo;s&lt;/a&gt; birthday. He&amp;rsquo;s been doing
the &lt;a href=&#34;https://www.lockdownopenmic.club&#34;&gt;Lockdown Open Mic Club&lt;/a&gt; for a year
now, and they did a session for his birthday. They&amp;rsquo;d been sending a physical
birthday card around the country for each of the members to sign, which Matt
opened on the night, and they put together a really lovely version of one of
his songs.&lt;/p&gt;
&lt;p&gt;It was such a lovely night, and I&amp;rsquo;m so impressed at the Lockdown Open Mic
community, they&amp;rsquo;re a lovely bunch of people from around the country (and a
couple in the US I believe).&lt;/p&gt;
&lt;p&gt;It almost brought a tear to my eye.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In completely unrelated news, I dusted off and tuned my guitar and started
putting a playlist together of songs that I&amp;rsquo;d enjoy having a crack at. Not
that I need more hobbies at this point.&lt;/p&gt;
&lt;p&gt;I need to remember what strings are on my acoustic so I can buy some more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I found this set of
&lt;a href=&#34;https://www.bbc.co.uk/cbeebies/shows/octonauts&#34;&gt;Octonauts&lt;/a&gt; themed &lt;a href=&#34;https://www.thingiverse.com/thing:3352421&#34;&gt;cookie
cutters on Thingiverse&lt;/a&gt;. Phoebe
was very excited to print them with me and we used them together to make
Octonaut themed Easter biscuits - they came out alright, even if my brain was
so foggy I forgot to put any of the spices in (and later on I found the sugar
in the fridge)!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/octonauts-cookies.jpg&#34; style=&#34;width:100%&#34; alt=&#34;Octonauts themed cookies I made with my daughter. Explore! Rescue! Protect!&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Went drinking with the lads on Friday&lt;/del&gt; Got drunk alone at home in front of
a Google Hangout.&lt;/p&gt;
&lt;p&gt;The other people who were in the hangout are, however, some of the loveliest
people I know and the ensuing laughter cleansed my lockdown darkened soul.
Also I learned a new beer pouring trick but I can&amp;rsquo;t find a link to the Tiktok
so y&amp;rsquo;all gonna have to just trust me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In work news. I&amp;rsquo;m currently chasing down a really interesting memory
corruption issue.&lt;/p&gt;
&lt;p&gt;I may have mentioned this before by the memory layout in Ruby&amp;rsquo;s GC consists
of a region of consecutive 40 byte chunks (called &amp;ldquo;slots&amp;rdquo;). I have one slot
that contains the object in question and the following three slots contain
metadata for the object - we&amp;rsquo;ll call these chunks collectively &amp;rsquo;the payload&amp;rsquo;.
At the start of the payload region we have a 16 byte area for metadata about
the payload, it&amp;rsquo;s length and so on - and then we go straight into the
arbitrary payload data.&lt;/p&gt;
&lt;p&gt;We can see this here: this is the main object:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) p obj
(VALUE) $2 = 0x00000001018137e0
(lldb) rp obj
bits [LM    ]
T_CLASS: [PROMOTED] (struct RClass) $4 = {
  basic = (flags = 0x0000000000001062, klass = 0x00000001018799a0)
  super = 0x0000000101879860
  ptr = 0x0000000101813818
  class_serial = 526
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is what a Ruby class looks like. The struct member &lt;code&gt;ptr&lt;/code&gt; points to a
struct of type &lt;code&gt;rb_classext_t&lt;/code&gt; that looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) p *((struct RClass *)obj)-&amp;gt;ptr
(rb_classext_struct) $5 = {
  iv_index_tbl = 0x0000000000000000
  iv_tbl = 0x0000000100a63340
  m_tbl = 0x0000000100a605c0
  const_tbl = 0x0000000000000060
  callable_m_tbl = 0x0000000000000000
  cc_tbl = 0x0000000000000000
  subclasses = 0x0000000000000000
  parent_subclasses = 0x00000001018798c8
  module_subclasses = 0x0000000000000060
  origin_ = 0x00000001018137e0
  refined_class = 0x0000000000000008
  allocator = 0x0000000000000000
  includer = 0x0000000000000000
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that the address of &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;0x1018137e0&lt;/code&gt; and the address of the
&lt;code&gt;rb_classext_t&lt;/code&gt; struct pointed to by ptr is &lt;code&gt;0x101813818&lt;/code&gt;, if we subtract the
address of &lt;code&gt;obj&lt;/code&gt; from the &lt;code&gt;ptr&lt;/code&gt; address we get &lt;code&gt;0x38&lt;/code&gt; or 56 bytes. This fits
with our knowledge of the memory layout that each slot is 40 bytes wide and
the Payload section contains a 16 byte header object.&lt;/p&gt;
&lt;p&gt;We can verify this by grabbing the obj and adding 40 bytes and we should get
hold of a Payload header object.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(lldb) rp obj + 40
bits [      ]
Not-handled type 0x17
(RBasic *) $10 = 0x0000000101813808
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Type &lt;code&gt;0x17&lt;/code&gt; is the type for the Payload head, I promise. It&amp;rsquo;s only unhandled
because I haven&amp;rsquo;t made the debugger helper scripts support it yet!&lt;/p&gt;
&lt;p&gt;So this is all good. But what if we look at the &lt;code&gt;rb_classext_t&lt;/code&gt; struct a
little more closely? That &lt;code&gt;0x60&lt;/code&gt; memory address in &lt;code&gt;const_tbl&lt;/code&gt; looks a little
bit low compared to all the other memory locations we&amp;rsquo;ve been dealing with so
far.&lt;/p&gt;
&lt;p&gt;And sure enough: the crash I&amp;rsquo;m seeing is a SIGSEGV (memory access violation)
when trying to access the &lt;code&gt;const_tbl&lt;/code&gt; member at address &lt;code&gt;0x60&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s setting that value to &lt;code&gt;0x60&lt;/code&gt;? This behaviour is only reproduceable
on my branch, but I&amp;rsquo;m not doing anything with the content of &lt;code&gt;rb_classext_t&lt;/code&gt;,
just it&amp;rsquo;s position.&lt;/p&gt;
&lt;p&gt;The interesting thing about this bug is that if you count the bytes from the
start of the payload slot to the broken memory address you have 16 for the
header, + 24, for &lt;code&gt;iv_index_tbl&lt;/code&gt;, &lt;code&gt;iv_tbl&lt;/code&gt; and &lt;code&gt;m_tbl&lt;/code&gt; respectively. These
are all &lt;code&gt;unsigned long&lt;/code&gt; which on my machine is 8 bytes.&lt;/p&gt;
&lt;p&gt;This makes 40 bytes - which is suspicious as it&amp;rsquo;s exactly the same size as a
slot. And, if we then jump forward another 40 bytes we get to the
&lt;code&gt;module_subclasses&lt;/code&gt; member, and that has &lt;em&gt;also&lt;/em&gt; been set to &lt;code&gt;0x60&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is all super sus and almost certainly an offset bug, where we&amp;rsquo;re taking
the address at the head of the payload and naively finding the next slot by
just adding 40 bytes, and then setting a value there.&lt;/p&gt;
&lt;p&gt;The only annoying thing is that I can&amp;rsquo;t find it, despite almost certainly
introducing it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; I made the mistake of thinking for a minute, that I could
write C. The computer decided to remind me that that was not the case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bumper keyboard update this time around! First up, the &lt;a href=&#34;https://nullbits.co/nibble/&#34;&gt;Nibble
kit&lt;/a&gt;, which I took a day off to build.&lt;/p&gt;
&lt;p&gt;It was a really fun build, although the diodes took ages to get straight.
Thoroughly enjoyed the whole process - except lubing and filming the
switches, which I normally don&amp;rsquo;t mind doing but I definitely should not have
tried to do in the same day.&lt;/p&gt;
&lt;p&gt;It takes ages, and I normally like to be quite slow and thorough with the
process, but knowing that I had all those diodes to do while I was doing it
really made it feel like mission impossible.&lt;/p&gt;
&lt;p&gt;Lesson for next time is definitely split the tasks out and lube and build on
different days.&lt;/p&gt;
&lt;p&gt;As for the keyboard - I like it, although I&amp;rsquo;m back to using my HHKB right
now. There are a couple of things I&amp;rsquo;m not sure about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s got some pretty gross quality DSA keycaps on it while I wait for my
Group buy sets to come in, and I have decided that I don&amp;rsquo;t like DSA on
flat, row staggered boards.  It&amp;rsquo;s just about bearable with an angle, but
othat means I need to built/print some bumpers to raise up the board.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think 62g linears are still a bit too heavy for me, although I&amp;rsquo;m not
ruling out the idea that I might like them a lot better with better
keycaps on. I&amp;rsquo;ve got some Cherry MX Browns (eww) in a different board that
I might spring swap if I still don&amp;rsquo;t like them with the new keycaps.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m probably going to find some tactile switches for my next build though.
I&amp;rsquo;m veering towards &lt;a href=&#34;https://deskthority.net/wiki/Cherry_MX_Ergo_Clear&#34;&gt;ergo
clears&lt;/a&gt; or maybe
&lt;a href=&#34;https://deskthority.net/wiki/Holy_Panda&#34;&gt;something panda-esque&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;ve been using this for a week and I&amp;rsquo;m still not used to a column of keys
(and an encoder) to the left of the main block. It turns out I have been
anchoring with the left shift and the escape (or `) key for years and
didn&amp;rsquo;t realise it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Anyway: Here it is in all it&amp;rsquo;s glory.&lt;/p&gt;
&lt;img src=&#34;https://www.eightbitraptor.com/images/nibble.jpg&#34; style=&#34;width:100%&#34; alt=&#34;My newly built Nibble 65% keyboard with Durock Linear 62g L7&#39;s&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a flash of inspiration I put together a 45% keyboard design and PCB.
It&amp;rsquo;s based on a
&lt;a href=&#34;https://mechboards.co.uk/shop/components/pro-micro-5v/&#34;&gt;ProMicro&lt;/a&gt;. An
all-in-one AVR based development board so it&amp;rsquo;s easy mode for PCB design. No
worrying about differential signalling down the USB bus or worrying about
whether I can place the crystal close enough to the MCU. All I have to do
with a ProMicro is route the matrix, which took a couple of hours at most.
I&amp;rsquo;m pleased with how it came out.&lt;/p&gt;
&lt;p&gt;I also wanted to experiment with silkscreen artwork so I dropped in a jpg of
&lt;a href=&#34;https://www.youtube.com/watch?v=jar1LTxxAeM&#34;&gt;Megumin&lt;/a&gt;, probably my favourite
character so far from very silly anime
&lt;a href=&#34;https://www.animenewsnetwork.com/encyclopedia/anime.php?id=17123&#34;&gt;Konosuba&lt;/a&gt;
(which I&amp;rsquo;m idly watching a few episodes at a time whenever I find myself doing
the ironing).&lt;/p&gt;
&lt;p&gt;Final Version I sent off to &lt;a href=&#34;https://jlcpcb.com&#34;&gt;JLCPCB&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/Megu45-pcb.png&#34; style=&#34;width:100%&#34; alt=&#34;The 45% PCB I designed&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;I originally wanted it matte black, just with the image in red, but JLCPCB
only support white silkscreen printing, so I just YOLO&amp;rsquo;d the whole PCB in red
instead. I hope it comes out a reasonable colour.&lt;/p&gt;
&lt;p&gt;And the layout it uses is this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/Megu45-kle.png&#34; style=&#34;width:100%&#34; alt=&#34;It uses this layout&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;This is basically a meme by keyboard community standards. A Winkeyless, big
bar, weeb-themed 40%, with a top-right Kyuu style blocker, and I&amp;rsquo;m here for it!&lt;/p&gt;
&lt;p&gt;No case design yet. I&amp;rsquo;m thinking something 3D printed, or maybe clear acrylic
layered to show of the garish PCB to it&amp;rsquo;s full glory. Who knows maybe V2 will
even have RGB ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While I was at JLCPCB I also got together some gerbers and ordered the latest
version of the CRKBD Light, a minimalist version of &lt;a href=&#34;https://github.com/foostan/crkbd&#34;&gt;the fantastic
CRKBD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used a CRKBD for a while - it was my first build and I&amp;rsquo;ve wanted to
build a Corne Light since &lt;a href=&#34;https://twitter.com/foostan/status/1289863511028273152/photo/1&#34;&gt;foostan posted this
tweet&lt;/a&gt; so it
seemed rude not to while I was at JLCPCB and everything.&lt;/p&gt;
&lt;p&gt;Who knows when I&amp;rsquo;m going to get round to building either of these. But maybe
next week I can at least get some switches ordered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The final cherry on top of the last two weeks is that the weather has finally
started warming up again! Spring is on it&amp;rsquo;s way.&lt;/p&gt;
&lt;p&gt;Warm enough that that on Sunday, I spent most of the day in the garden,
playing with Phoebe, and neither of us wore coats. We went bug hunting,
planted some seeds, played a lot of hide and seek and spent time on her swing
and slide.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s hard for me to communicate just how much of a blessing it is to be able
to watch your kid play, uninhibited and unrestricted, in a safe outside
space. That together with the warmth of the early spring sun has really
lifted my spirits.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve always been grumpy about gardens. I have never liked gardening, or
anything that required outdoor dirty work, and have always viewed them as way
too much work for not enough reward.&lt;/p&gt;
&lt;p&gt;But I will admit that after a year of severely restricted travel and
opportunity, and a winter where even the garden was unusable, that I love my
garden. I&amp;rsquo;m very lucky to have it - and I&amp;rsquo;m actually excited by the thought
of getting out there and doing the work to make it nice for the kids growing
up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I still haven&amp;rsquo;t done the OpenGraph thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Weeknotes 2021.05: The white death is falling</title>
      <link>https://www.eightbitraptor.com/2021/02/10/weeknotes-2021.05-the-white-death-is-falling/</link>
      <pubDate>Wed, 10 Feb 2021 13:33:30 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/02/10/weeknotes-2021.05-the-white-death-is-falling/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s snowing. Actually snowing, like settling on the ground and making everything white. This almost never happens here and I don&amp;rsquo;t like it. It&amp;rsquo;s icy and cold and makes driving anywhere really stressful.&lt;/p&gt;
&lt;p&gt;At least I don&amp;rsquo;t actually have to drive anywhere because Pandemic.&lt;/p&gt;
&lt;p&gt;I mainly don&amp;rsquo;t like the snow because I have the balance of a drunk gnat glued to a housebrick. I fall over almost every time it gets remotely icy or snows. I have fallen down concrete stairs, knocked myself unconsios on a roadside and various other forms of hurt. This time is no exception, I&amp;rsquo;ve already stacked it twice in my own bloody driveway.&lt;/p&gt;
&lt;p&gt;Playing in the snow with Phoebe was fun though, I&amp;rsquo;ll allow that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My switches arrived. I love getting new switches, although now comes the certain knowledge that I&amp;rsquo;m going to want to lube them and apply switch films to get the feel and sound profile that I like. Modding switches is definitely the most time consuming and for me, the least enjoyable part of the hobby. Worth the effort though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I had to renew my eightbitraptor.com domain this week. Sadly I only noticed because my financial advisor was confused about why her emails to me were bouncing. Oops. So if you tried to visit the site at some point in the middle of the week and it just wasn&amp;rsquo;t here then sorry about that. (lol, jk, as if anyone visits this site other than immediately after I tweet about it anyway).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We got a new bed and a new mattress this week. After 3 years of having Phoebe crawl in in the middle of the night and then proceed to kick me in the kidneys for the rest of the night I&amp;rsquo;ve been looking forward to upgrading to a king size. It does not dissapoint.&lt;/p&gt;
&lt;p&gt;We got one of the new Eve hybrid mattress things that arrives in a box, not used to this as we&amp;rsquo;ve always just had traditional mattresses until now. First impressions are that the jury is still out, it&amp;rsquo;s hard as nails.&lt;/p&gt;
&lt;p&gt;Bed is decidedly less exciting than mattress however. It&amp;rsquo;s a second hand frame that we bought off Facebook marketplace, so I did make a morally ambiguous journey into the next town over to collect it. Government lockdown advice is whack. I&amp;rsquo;m explicitly allowed to go and collect stuff I bought from a website as long as it&amp;rsquo;s physically located in a shop. But I don&amp;rsquo;t think I&amp;rsquo;m allowed to go and collect stuff I&amp;rsquo;ve bought through a website if the location I&amp;rsquo;m collecting from is not a shop. Anyway, I picked it up from the kerb outside someone&amp;rsquo;s house. No one came within 2 metres of me, no one got COVID. All good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As part of all this we moved our old double bed up into the loft, which is where I&amp;rsquo;m working from. I also took the opportunity to move some furniture around and play around with the layout, as well as giving it a good clean. It&amp;rsquo;s much nicer working up here now. It feels like a proper room again (especially now there&amp;rsquo;s a rug back down again) rather than just a place to store our old shit, that I happened to work in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work remains engaging, which is ace. No major progress to report, however I did learn one lesson the hard way, which should perhaps have been obvious in hindsight.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GC.disable&lt;/code&gt; in Ruby only actually disables the GC from the point it&amp;rsquo;s called. This means that any GC runs that are triggered while the interpreter is booting, or the parser is parsing your code will still happen. I spent an embarrasingly long time trying to work out how to actually disable the GC in Ruby while I was testing some changes that I knew broke it. I settled just for commenting the line out of the main interpreter loop that turns it on in the first place. I don&amp;rsquo;t know if there&amp;rsquo;s a better way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nan&amp;rsquo;s funeral was this week. COVID funerals are still shit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I still haven&amp;rsquo;t made this website have the cool opengraph card things, and on top of that I&amp;rsquo;m getting even later in publishing my weeknotes, whoops.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s snowing. Actually snowing, like settling on the ground and making everything white. This almost never happens here and I don&amp;rsquo;t like it. It&amp;rsquo;s icy and cold and makes driving anywhere really stressful.&lt;/p&gt;
&lt;p&gt;At least I don&amp;rsquo;t actually have to drive anywhere because Pandemic.&lt;/p&gt;
&lt;p&gt;I mainly don&amp;rsquo;t like the snow because I have the balance of a drunk gnat glued to a housebrick. I fall over almost every time it gets remotely icy or snows. I have fallen down concrete stairs, knocked myself unconsios on a roadside and various other forms of hurt. This time is no exception, I&amp;rsquo;ve already stacked it twice in my own bloody driveway.&lt;/p&gt;
&lt;p&gt;Playing in the snow with Phoebe was fun though, I&amp;rsquo;ll allow that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My switches arrived. I love getting new switches, although now comes the certain knowledge that I&amp;rsquo;m going to want to lube them and apply switch films to get the feel and sound profile that I like. Modding switches is definitely the most time consuming and for me, the least enjoyable part of the hobby. Worth the effort though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I had to renew my eightbitraptor.com domain this week. Sadly I only noticed because my financial advisor was confused about why her emails to me were bouncing. Oops. So if you tried to visit the site at some point in the middle of the week and it just wasn&amp;rsquo;t here then sorry about that. (lol, jk, as if anyone visits this site other than immediately after I tweet about it anyway).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We got a new bed and a new mattress this week. After 3 years of having Phoebe crawl in in the middle of the night and then proceed to kick me in the kidneys for the rest of the night I&amp;rsquo;ve been looking forward to upgrading to a king size. It does not dissapoint.&lt;/p&gt;
&lt;p&gt;We got one of the new Eve hybrid mattress things that arrives in a box, not used to this as we&amp;rsquo;ve always just had traditional mattresses until now. First impressions are that the jury is still out, it&amp;rsquo;s hard as nails.&lt;/p&gt;
&lt;p&gt;Bed is decidedly less exciting than mattress however. It&amp;rsquo;s a second hand frame that we bought off Facebook marketplace, so I did make a morally ambiguous journey into the next town over to collect it. Government lockdown advice is whack. I&amp;rsquo;m explicitly allowed to go and collect stuff I bought from a website as long as it&amp;rsquo;s physically located in a shop. But I don&amp;rsquo;t think I&amp;rsquo;m allowed to go and collect stuff I&amp;rsquo;ve bought through a website if the location I&amp;rsquo;m collecting from is not a shop. Anyway, I picked it up from the kerb outside someone&amp;rsquo;s house. No one came within 2 metres of me, no one got COVID. All good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As part of all this we moved our old double bed up into the loft, which is where I&amp;rsquo;m working from. I also took the opportunity to move some furniture around and play around with the layout, as well as giving it a good clean. It&amp;rsquo;s much nicer working up here now. It feels like a proper room again (especially now there&amp;rsquo;s a rug back down again) rather than just a place to store our old shit, that I happened to work in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work remains engaging, which is ace. No major progress to report, however I did learn one lesson the hard way, which should perhaps have been obvious in hindsight.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GC.disable&lt;/code&gt; in Ruby only actually disables the GC from the point it&amp;rsquo;s called. This means that any GC runs that are triggered while the interpreter is booting, or the parser is parsing your code will still happen. I spent an embarrasingly long time trying to work out how to actually disable the GC in Ruby while I was testing some changes that I knew broke it. I settled just for commenting the line out of the main interpreter loop that turns it on in the first place. I don&amp;rsquo;t know if there&amp;rsquo;s a better way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nan&amp;rsquo;s funeral was this week. COVID funerals are still shit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I still haven&amp;rsquo;t made this website have the cool opengraph card things, and on top of that I&amp;rsquo;m getting even later in publishing my weeknotes, whoops.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Weeknotes 2021.04: Upright through the grace of caffeine</title>
      <link>https://www.eightbitraptor.com/2021/02/01/weeknotes-2021.04-upright-through-the-grace-of-caffeine/</link>
      <pubDate>Mon, 01 Feb 2021 12:56:38 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/02/01/weeknotes-2021.04-upright-through-the-grace-of-caffeine/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;4 weeks in and I broke my self-imposed rule of publishing weeknotes by Sunday night. But that&amp;rsquo;s OK because fuck all happened this week anyway, just busywork and stress.&lt;/li&gt;
&lt;li&gt;No progress on keyboard - although some very nice chap from one of the Discord servers I&amp;rsquo;m in sent me a couple of &lt;a href=&#34;https://github.com/ai03-2725/Unified-Daughterboard&#34;&gt;ai03&amp;rsquo;s unified daughterboards&lt;/a&gt; which I&amp;rsquo;m keen to play with. Having them means that I no longer need to really think about how to wire up a USB-C port correctly, and that I am far less restricted about where to position the port in the case than I would be if it was directly attached to the PCB, so that&amp;rsquo;s exciting.&lt;/li&gt;
&lt;li&gt;I also ordered some switches (Durock L2 linears in black with 62g gold plated springs for those following along at home). This means that I finally have all the pieces to build my &lt;a href=&#34;https://nullbits.co/nibble/&#34;&gt;Nibble kit&lt;/a&gt; which is nice. I still don&amp;rsquo;t know when I&amp;rsquo;m going to get the time.&lt;/li&gt;
&lt;li&gt;Both the kids are fine. And none of us have COVID. Honestly that feels like this weeks major win.&lt;/li&gt;
&lt;li&gt;I drank too much Monster.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;4 weeks in and I broke my self-imposed rule of publishing weeknotes by Sunday night. But that&amp;rsquo;s OK because fuck all happened this week anyway, just busywork and stress.&lt;/li&gt;
&lt;li&gt;No progress on keyboard - although some very nice chap from one of the Discord servers I&amp;rsquo;m in sent me a couple of &lt;a href=&#34;https://github.com/ai03-2725/Unified-Daughterboard&#34;&gt;ai03&amp;rsquo;s unified daughterboards&lt;/a&gt; which I&amp;rsquo;m keen to play with. Having them means that I no longer need to really think about how to wire up a USB-C port correctly, and that I am far less restricted about where to position the port in the case than I would be if it was directly attached to the PCB, so that&amp;rsquo;s exciting.&lt;/li&gt;
&lt;li&gt;I also ordered some switches (Durock L2 linears in black with 62g gold plated springs for those following along at home). This means that I finally have all the pieces to build my &lt;a href=&#34;https://nullbits.co/nibble/&#34;&gt;Nibble kit&lt;/a&gt; which is nice. I still don&amp;rsquo;t know when I&amp;rsquo;m going to get the time.&lt;/li&gt;
&lt;li&gt;Both the kids are fine. And none of us have COVID. Honestly that feels like this weeks major win.&lt;/li&gt;
&lt;li&gt;I drank too much Monster.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Weeknotes 2021.03: Short</title>
      <link>https://www.eightbitraptor.com/2021/01/24/weeknotes-2021.03-short/</link>
      <pubDate>Sun, 24 Jan 2021 22:00:35 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/01/24/weeknotes-2021.03-short/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At some point this week Phoebe wanted to watch videos of Volcanos and Thunderstorms. We sat down together to try and find some videos. We watched a lot of educational content which was fun - but then got utterly side-tracked with this &lt;a href=&#34;https://www.youtube.com/watch?v=AHrCI9eSJGQ&#34;&gt;30 day timelapse from the roof of a container ship&lt;/a&gt;. She was just as hooked as me! I&amp;rsquo;ve watched this a bunch of times since then and it may just be the most captivating 10 minutes of YouTube I&amp;rsquo;ve ever seen. Also the night sky is breathtaking from the middle of the ocean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I went for my first run! I did 4k through Sevenoaks - In honesty it was like 65% walking and 35% running, but I still feel like I achieved something. Now that I&amp;rsquo;ve broken the ice it&amp;rsquo;s time to find a proper running plan and work on some deliberate improvements. I&amp;rsquo;ll probably tone it down a little to start with as well. I was not broken the next day, but it was harder to get down stairs than I would have liked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long story time: I have &lt;a href=&#34;https://www.eightbitraptor.com/images/work-bag.jpg&#34;&gt;a bag that I carry with me to &amp;ldquo;work&amp;rdquo;&lt;/a&gt; every day. It has my computer, my (current) keyboard, my mouse and my headphones in it. Carrying it up the stairs at the beginning of the day and down at the end helps my brain switch from home to work modes and vice versa. I was getting a bit twitchy about it recently because my new keyboard is the only thing in there without it&amp;rsquo;s own protective carry case. My laptop lives in an old Reevoo 13&amp;quot; Macbook sleeve that the then CTO gave me when I worked there back in 2007, and my headphones and mouse have their own hard shell cases - but &lt;a href=&#34;https://www.hhkeyboard.com/uk/products/hybrid/&#34;&gt;my keyboard&lt;/a&gt; was rattling around naked!&lt;/p&gt;
&lt;p&gt;I spent some time looking at keyboard cases and decided I really liked some of the heavy canvas carry sleeves I saw, but they were all being sold by overseas merchants who for various reasons (fuck Brexit) can&amp;rsquo;t ship to the UK right now.&lt;/p&gt;
&lt;p&gt;I asked my &lt;a href=&#34;https://twitter.com/clareavalentine/&#34;&gt;very talented mother-in-law&lt;/a&gt; if I could commission her to make me a keyboard case, and told her about the ones that I&amp;rsquo;d seen. We chatted about fabrics and dimensions for a bit and then she sent me this!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/keyboard-bag.jpg&#34; alt=&#34;custom HHKB carry case&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now I have my own artisanal, hand-crafted HHKB case and I love it! Also everything in my bag is now safe and protected so all is right with the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Peter and I hit a milestone with our Ruby work this week. We finally got to &lt;a href=&#34;https://github.com/ruby/ruby/pull/4107&#34;&gt;submit a PR to Ruby&lt;/a&gt; and to &lt;a href=&#34;https://bugs.ruby-lang.org/issues/17570&#34;&gt;raise a ticket&lt;/a&gt; on the official issue tracker explaining what we&amp;rsquo;ve been up to! I&amp;rsquo;m very proud of this. There&amp;rsquo;s still a long way to go before this feature is ready for production use, but I&amp;rsquo;m pleased it&amp;rsquo;s out in public and in front of the core team.&lt;/p&gt;
&lt;p&gt;We did some benchmarking before we pushed it and it&amp;rsquo;s really exciting to see that our branch is showing a 3% speed improvement over master for method calls and instance variable (ivar) lookups, which is super promising for the future of the project!&lt;/p&gt;
&lt;p&gt;In Ruby, every time you create a class Ruby creates a 40-byte wide C-struct called an RVALUE on the heap that represents that class. It also allocates a chunk of memory outside of Ruby&amp;rsquo;s garbage collected heap in which it stores an extension object. This extension object contains (amongst other things) the ivar cache and the method cache for the object in question.&lt;/p&gt;
&lt;p&gt;What Peter and I have done, in a nutshell, is move that extra struct from non-GC memory, directly into the GC heap in a space that&amp;rsquo;s adjacent to the class it&amp;rsquo;s extending. This means that the compiler can optimise away some pointer indirection, and the locality of the CPU caches is improved.&lt;/p&gt;
&lt;p&gt;Our benchmark is a completely synthetic micro-benchmark that just creates a class and then access some ivars and calls some methods, so it&amp;rsquo;s not super representative of real world applications but I&amp;rsquo;m still stoked for ~3% speedup. Honestly I think 1% would have been enough of a boost for us to continue working on this change and try and roll it out across more of the Ruby types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think I&amp;rsquo;m going to re-design my keyboard PCB. For a couple of reasons: The USB port is in a really inconvenient place for case design, and I want to switch to USB-C anyway, and I want to get the manufacturers to pick and place the surface mount components for me because soldering them is too painful, and I&amp;rsquo;m struggling to get the time. I think this is the right decision, even though it amounts to probably several months worth of setbacks, which makes me sad.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not much else this week. There was some snow, which I hated. We&amp;rsquo;re still locked down, which I also hate. Kids are missing out on human contact still, which is shit. Life goes on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At some point this week Phoebe wanted to watch videos of Volcanos and Thunderstorms. We sat down together to try and find some videos. We watched a lot of educational content which was fun - but then got utterly side-tracked with this &lt;a href=&#34;https://www.youtube.com/watch?v=AHrCI9eSJGQ&#34;&gt;30 day timelapse from the roof of a container ship&lt;/a&gt;. She was just as hooked as me! I&amp;rsquo;ve watched this a bunch of times since then and it may just be the most captivating 10 minutes of YouTube I&amp;rsquo;ve ever seen. Also the night sky is breathtaking from the middle of the ocean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I went for my first run! I did 4k through Sevenoaks - In honesty it was like 65% walking and 35% running, but I still feel like I achieved something. Now that I&amp;rsquo;ve broken the ice it&amp;rsquo;s time to find a proper running plan and work on some deliberate improvements. I&amp;rsquo;ll probably tone it down a little to start with as well. I was not broken the next day, but it was harder to get down stairs than I would have liked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long story time: I have &lt;a href=&#34;https://www.eightbitraptor.com/images/work-bag.jpg&#34;&gt;a bag that I carry with me to &amp;ldquo;work&amp;rdquo;&lt;/a&gt; every day. It has my computer, my (current) keyboard, my mouse and my headphones in it. Carrying it up the stairs at the beginning of the day and down at the end helps my brain switch from home to work modes and vice versa. I was getting a bit twitchy about it recently because my new keyboard is the only thing in there without it&amp;rsquo;s own protective carry case. My laptop lives in an old Reevoo 13&amp;quot; Macbook sleeve that the then CTO gave me when I worked there back in 2007, and my headphones and mouse have their own hard shell cases - but &lt;a href=&#34;https://www.hhkeyboard.com/uk/products/hybrid/&#34;&gt;my keyboard&lt;/a&gt; was rattling around naked!&lt;/p&gt;
&lt;p&gt;I spent some time looking at keyboard cases and decided I really liked some of the heavy canvas carry sleeves I saw, but they were all being sold by overseas merchants who for various reasons (fuck Brexit) can&amp;rsquo;t ship to the UK right now.&lt;/p&gt;
&lt;p&gt;I asked my &lt;a href=&#34;https://twitter.com/clareavalentine/&#34;&gt;very talented mother-in-law&lt;/a&gt; if I could commission her to make me a keyboard case, and told her about the ones that I&amp;rsquo;d seen. We chatted about fabrics and dimensions for a bit and then she sent me this!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/keyboard-bag.jpg&#34; alt=&#34;custom HHKB carry case&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now I have my own artisanal, hand-crafted HHKB case and I love it! Also everything in my bag is now safe and protected so all is right with the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Peter and I hit a milestone with our Ruby work this week. We finally got to &lt;a href=&#34;https://github.com/ruby/ruby/pull/4107&#34;&gt;submit a PR to Ruby&lt;/a&gt; and to &lt;a href=&#34;https://bugs.ruby-lang.org/issues/17570&#34;&gt;raise a ticket&lt;/a&gt; on the official issue tracker explaining what we&amp;rsquo;ve been up to! I&amp;rsquo;m very proud of this. There&amp;rsquo;s still a long way to go before this feature is ready for production use, but I&amp;rsquo;m pleased it&amp;rsquo;s out in public and in front of the core team.&lt;/p&gt;
&lt;p&gt;We did some benchmarking before we pushed it and it&amp;rsquo;s really exciting to see that our branch is showing a 3% speed improvement over master for method calls and instance variable (ivar) lookups, which is super promising for the future of the project!&lt;/p&gt;
&lt;p&gt;In Ruby, every time you create a class Ruby creates a 40-byte wide C-struct called an RVALUE on the heap that represents that class. It also allocates a chunk of memory outside of Ruby&amp;rsquo;s garbage collected heap in which it stores an extension object. This extension object contains (amongst other things) the ivar cache and the method cache for the object in question.&lt;/p&gt;
&lt;p&gt;What Peter and I have done, in a nutshell, is move that extra struct from non-GC memory, directly into the GC heap in a space that&amp;rsquo;s adjacent to the class it&amp;rsquo;s extending. This means that the compiler can optimise away some pointer indirection, and the locality of the CPU caches is improved.&lt;/p&gt;
&lt;p&gt;Our benchmark is a completely synthetic micro-benchmark that just creates a class and then access some ivars and calls some methods, so it&amp;rsquo;s not super representative of real world applications but I&amp;rsquo;m still stoked for ~3% speedup. Honestly I think 1% would have been enough of a boost for us to continue working on this change and try and roll it out across more of the Ruby types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think I&amp;rsquo;m going to re-design my keyboard PCB. For a couple of reasons: The USB port is in a really inconvenient place for case design, and I want to switch to USB-C anyway, and I want to get the manufacturers to pick and place the surface mount components for me because soldering them is too painful, and I&amp;rsquo;m struggling to get the time. I think this is the right decision, even though it amounts to probably several months worth of setbacks, which makes me sad.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not much else this week. There was some snow, which I hated. We&amp;rsquo;re still locked down, which I also hate. Kids are missing out on human contact still, which is shit. Life goes on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Weeknotes 2021.02: Vaguely sketchy</title>
      <link>https://www.eightbitraptor.com/2021/01/16/weeknotes-2021.02-vaguely-sketchy/</link>
      <pubDate>Sat, 16 Jan 2021 13:33:35 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/01/16/weeknotes-2021.02-vaguely-sketchy/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I failed to take many notes this week so I&amp;rsquo;m going to be doing this from memory. Honestly not a ringing endorsement of my ability to keep up this weeknotes thing, but at least this post made it onto the internet on time so maybe that&amp;rsquo;s enough for now?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;m still in touch with the lovely man at the running shop. He watched my video, assessed that I do something called overpronating and then dropped round 3 pairs of shoes which I&amp;rsquo;ve been wearing around the house for the last week. The best substitute for a treadmill I could think of has been running around our open plan kitchen, so I did a lot of that.&lt;/p&gt;
&lt;p&gt;Anyway. I&amp;rsquo;ve picked a pair now: &lt;a href=&#34;https://www.runnersworld.com/gear/a28246552/saucony-omni-iso-2-review/&#34;&gt;The Saucony Omni ISO 2&lt;/a&gt;. They aren&amp;rsquo;t as aesthetically pleasing as &lt;a href=&#34;https://www.runnersworld.com/gear/a26042038/mizuno-wave-inspire-review/&#34;&gt;my other shortlisted choice&lt;/a&gt;, but they were much more comfortable after a few hours at the standing desk. I now need to pay for them, and wait for the running shop man to collect the other two. I still haven&amp;rsquo;t been for a run yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As for many people, last week was my first week back to work in 2021. I started off the year by reflecting on what I felt I had acomplished in the last few months and the answer was &amp;ldquo;not as much as I wanted to&amp;rdquo;. So I started making steps to fix that - I&amp;rsquo;ve scheduled a regular pairing session with someone on my team who&amp;rsquo;s experience and advice I respect a lot, and I&amp;rsquo;m currently working on pairing with people outside the company too. My main goal is to level up my ability to contribute to MRI (and other Ruby implementations) as far and as fast as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://peterzhu.ca&#34;&gt;Peter&lt;/a&gt; is back! Peter and I are working on a project together, but he was pulled away from it at the end of last year to help out with some really important work around &lt;a href=&#34;https://blog.pushowl.com/what-is-black-friday-and-how-small-stores-can-take-advantage-of-it/&#34;&gt;BFCM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was on paternity leave for some of that time, but I worked alone for the rest. I was determined to use the time to learn a lot and make enough progress that I wouldn&amp;rsquo;t feel like a total burden by the time Peter came back, and I think I mostly acheived that.&lt;/p&gt;
&lt;p&gt;However, I wasn&amp;rsquo;t prepared for quite how lonely I&amp;rsquo;d feel tackling the same thing day after day in isolation - I&amp;rsquo;ve had experience of this with my previous project, which I worked on alone for many months - but for the previous project, I knew the language and domain and I was confident in my ability.&lt;/p&gt;
&lt;p&gt;It feels much more isolating when you&amp;rsquo;re working in a language, paradigm and domain in which you are completely unfamiliar. Self-directed learning is tough, and opportunities for distraction and procrastination are rife. You think I&amp;rsquo;d have already figured this out after &lt;a href=&#34;https://www.futurelearn.com/&#34;&gt;working in EdTech for 5 years&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On a similar note. Peter and I &lt;a href=&#34;https://twitter.com/eightbitraptor/status/1349785750640984064&#34;&gt;have been pairing a bunch again&lt;/a&gt;. And we&amp;rsquo;ve been &lt;a href=&#34;https://github.com/ruby/ruby/pull/4064&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://github.com/ruby/ruby/pull/4073&#34;&gt;submitting&lt;/a&gt; &lt;a href=&#34;https://github.com/ruby/ruby/pull/4074&#34;&gt;bug fixes&lt;/a&gt; to Ruby that we&amp;rsquo;ve come across while attempting to get our current branch into a state where it&amp;rsquo;s ready to be seen. I am excited to be making progress and I&amp;rsquo;m hoping we can get a proper PR up soon. &lt;a href=&#34;https://github.com/Shopify/ruby/commits/mvh-pz-vwa-mvp&#34;&gt;We&amp;rsquo;re working in the open&lt;/a&gt;, but it&amp;rsquo;s very far from being ready yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I watched &lt;a href=&#34;https://www.youtube.com/watch?v=qiol8uaf2_s&#34;&gt;Taeha Types build a Keycult No. 2/65&lt;/a&gt;. As well as being in awe of how beautiful an object it is, I was also somewhat inspired by how the assembly works. I went back and re-worked the case design for my keyboard. I&amp;rsquo;ve not been brave enough to go with completely hidden screws like the Keycult, mostly because doing so would require a complete redesign of my PCB to build in the required screw holes. But I did build a seamless design, and made my plate gasket mount rather than the original Kyuu-inspired top mount. I feel like this design is evolving into something more my own, rather than a complete Kyuu knock-off, which is basically what it started as. I 3D printed a sample to test and it looks like this idea is workable!&lt;/p&gt;
&lt;p&gt;This process is giving me a better appreciation of how and why &lt;a href=&#34;https://keycult.com/products/no-2-65&#34;&gt;Keycult boards cost as much as they do&lt;/a&gt; (but I still don&amp;rsquo;t understand &lt;a href=&#34;https://kevinlynagh.com/notes/pricing-niche-products/&#34;&gt;how much some people are willing to pay&lt;/a&gt; for them).&lt;/p&gt;
&lt;p&gt;Here are some pictures of the in-progress design:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/case-top.jpg&#34; alt=&#34;The view from the top of the case&#34; title=&#34;The top case design, showing the Kyuu inspired blocker and winkeyless layout&#34;&gt;
&lt;img src=&#34;https://www.eightbitraptor.com/images/case-back.jpg&#34; alt=&#34;The bottom showing the inset base and the overlap, which makes the sides seamless&#34; title=&#34;The back of the case showing the inset bottom piece which is exposed at the back for asthetic reasons, this will likely be anodised in a different colour to the top piece&#34;&gt;
&lt;img src=&#34;https://www.eightbitraptor.com/images/case-plate.jpg&#34; alt=&#34;The gasket mounting tabs between the top of the case and the plate&#34; title=&#34;The plate shown inset into the top piece of the keyboard, the tabs will be sandwiched between the top and the bottom case pieces with the aid of rubber or neoprene gaskets to reduce vibrations&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It was Liz&amp;rsquo;s birthday this week. Lockdown birthday&amp;rsquo;s are never the most interesting, but we had a nice chilled out time. went for a long walk with the kids, made an appropriately sickly (but amazing) cake together and had takeout pizza for dinner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/cake.jpg&#34; alt=&#34;caaaaaaake&#34; title=&#34;caaaaaaaaaake&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m jealous of all the other people who do weeknotes, and who&amp;rsquo;s posts show up on twitter with lovely cards. I&amp;rsquo;ll get round to writing the required opengraph shenenanigans at some point. Probably. Maybe.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I failed to take many notes this week so I&amp;rsquo;m going to be doing this from memory. Honestly not a ringing endorsement of my ability to keep up this weeknotes thing, but at least this post made it onto the internet on time so maybe that&amp;rsquo;s enough for now?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;m still in touch with the lovely man at the running shop. He watched my video, assessed that I do something called overpronating and then dropped round 3 pairs of shoes which I&amp;rsquo;ve been wearing around the house for the last week. The best substitute for a treadmill I could think of has been running around our open plan kitchen, so I did a lot of that.&lt;/p&gt;
&lt;p&gt;Anyway. I&amp;rsquo;ve picked a pair now: &lt;a href=&#34;https://www.runnersworld.com/gear/a28246552/saucony-omni-iso-2-review/&#34;&gt;The Saucony Omni ISO 2&lt;/a&gt;. They aren&amp;rsquo;t as aesthetically pleasing as &lt;a href=&#34;https://www.runnersworld.com/gear/a26042038/mizuno-wave-inspire-review/&#34;&gt;my other shortlisted choice&lt;/a&gt;, but they were much more comfortable after a few hours at the standing desk. I now need to pay for them, and wait for the running shop man to collect the other two. I still haven&amp;rsquo;t been for a run yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As for many people, last week was my first week back to work in 2021. I started off the year by reflecting on what I felt I had acomplished in the last few months and the answer was &amp;ldquo;not as much as I wanted to&amp;rdquo;. So I started making steps to fix that - I&amp;rsquo;ve scheduled a regular pairing session with someone on my team who&amp;rsquo;s experience and advice I respect a lot, and I&amp;rsquo;m currently working on pairing with people outside the company too. My main goal is to level up my ability to contribute to MRI (and other Ruby implementations) as far and as fast as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://peterzhu.ca&#34;&gt;Peter&lt;/a&gt; is back! Peter and I are working on a project together, but he was pulled away from it at the end of last year to help out with some really important work around &lt;a href=&#34;https://blog.pushowl.com/what-is-black-friday-and-how-small-stores-can-take-advantage-of-it/&#34;&gt;BFCM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was on paternity leave for some of that time, but I worked alone for the rest. I was determined to use the time to learn a lot and make enough progress that I wouldn&amp;rsquo;t feel like a total burden by the time Peter came back, and I think I mostly acheived that.&lt;/p&gt;
&lt;p&gt;However, I wasn&amp;rsquo;t prepared for quite how lonely I&amp;rsquo;d feel tackling the same thing day after day in isolation - I&amp;rsquo;ve had experience of this with my previous project, which I worked on alone for many months - but for the previous project, I knew the language and domain and I was confident in my ability.&lt;/p&gt;
&lt;p&gt;It feels much more isolating when you&amp;rsquo;re working in a language, paradigm and domain in which you are completely unfamiliar. Self-directed learning is tough, and opportunities for distraction and procrastination are rife. You think I&amp;rsquo;d have already figured this out after &lt;a href=&#34;https://www.futurelearn.com/&#34;&gt;working in EdTech for 5 years&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On a similar note. Peter and I &lt;a href=&#34;https://twitter.com/eightbitraptor/status/1349785750640984064&#34;&gt;have been pairing a bunch again&lt;/a&gt;. And we&amp;rsquo;ve been &lt;a href=&#34;https://github.com/ruby/ruby/pull/4064&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://github.com/ruby/ruby/pull/4073&#34;&gt;submitting&lt;/a&gt; &lt;a href=&#34;https://github.com/ruby/ruby/pull/4074&#34;&gt;bug fixes&lt;/a&gt; to Ruby that we&amp;rsquo;ve come across while attempting to get our current branch into a state where it&amp;rsquo;s ready to be seen. I am excited to be making progress and I&amp;rsquo;m hoping we can get a proper PR up soon. &lt;a href=&#34;https://github.com/Shopify/ruby/commits/mvh-pz-vwa-mvp&#34;&gt;We&amp;rsquo;re working in the open&lt;/a&gt;, but it&amp;rsquo;s very far from being ready yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I watched &lt;a href=&#34;https://www.youtube.com/watch?v=qiol8uaf2_s&#34;&gt;Taeha Types build a Keycult No. 2/65&lt;/a&gt;. As well as being in awe of how beautiful an object it is, I was also somewhat inspired by how the assembly works. I went back and re-worked the case design for my keyboard. I&amp;rsquo;ve not been brave enough to go with completely hidden screws like the Keycult, mostly because doing so would require a complete redesign of my PCB to build in the required screw holes. But I did build a seamless design, and made my plate gasket mount rather than the original Kyuu-inspired top mount. I feel like this design is evolving into something more my own, rather than a complete Kyuu knock-off, which is basically what it started as. I 3D printed a sample to test and it looks like this idea is workable!&lt;/p&gt;
&lt;p&gt;This process is giving me a better appreciation of how and why &lt;a href=&#34;https://keycult.com/products/no-2-65&#34;&gt;Keycult boards cost as much as they do&lt;/a&gt; (but I still don&amp;rsquo;t understand &lt;a href=&#34;https://kevinlynagh.com/notes/pricing-niche-products/&#34;&gt;how much some people are willing to pay&lt;/a&gt; for them).&lt;/p&gt;
&lt;p&gt;Here are some pictures of the in-progress design:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/case-top.jpg&#34; alt=&#34;The view from the top of the case&#34; title=&#34;The top case design, showing the Kyuu inspired blocker and winkeyless layout&#34;&gt;
&lt;img src=&#34;https://www.eightbitraptor.com/images/case-back.jpg&#34; alt=&#34;The bottom showing the inset base and the overlap, which makes the sides seamless&#34; title=&#34;The back of the case showing the inset bottom piece which is exposed at the back for asthetic reasons, this will likely be anodised in a different colour to the top piece&#34;&gt;
&lt;img src=&#34;https://www.eightbitraptor.com/images/case-plate.jpg&#34; alt=&#34;The gasket mounting tabs between the top of the case and the plate&#34; title=&#34;The plate shown inset into the top piece of the keyboard, the tabs will be sandwiched between the top and the bottom case pieces with the aid of rubber or neoprene gaskets to reduce vibrations&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It was Liz&amp;rsquo;s birthday this week. Lockdown birthday&amp;rsquo;s are never the most interesting, but we had a nice chilled out time. went for a long walk with the kids, made an appropriately sickly (but amazing) cake together and had takeout pizza for dinner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/cake.jpg&#34; alt=&#34;caaaaaaake&#34; title=&#34;caaaaaaaaaake&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m jealous of all the other people who do weeknotes, and who&amp;rsquo;s posts show up on twitter with lovely cards. I&amp;rsquo;ll get round to writing the required opengraph shenenanigans at some point. Probably. Maybe.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Weeknotes 2021.01: Slacks Dead Jim</title>
      <link>https://www.eightbitraptor.com/2021/01/07/weeknotes-2021.01-slacks-dead-jim/</link>
      <pubDate>Thu, 07 Jan 2021 07:15:56 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/01/07/weeknotes-2021.01-slacks-dead-jim/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;First day back to work after a couple of weeks off and Slack dies as soon as the East coast wakes up. Amazing how debilitating it now feels when slack starts having issues, it&amp;rsquo;s like a lifeline has just been cut off. I swear it never used to feel this bad.&lt;/li&gt;
&lt;li&gt;Elliot had his first round of vaccinations this week. He&amp;rsquo;s absolutely miserable - which I guess is what happens when someone jabs needles in both legs filled with a rotovirus/meningitis cocktail. It&amp;rsquo;s a lot to take in when you&amp;rsquo;re 8 weeks old.&lt;/li&gt;
&lt;li&gt;Thinking about starting running, but the idea of buying running shoes is super intimidating. The whole process is even more complicated now that I can&amp;rsquo;t get to a shop - as normally they&amp;rsquo;d watch you run in order to do a gait analysis to find the right type of shoe. Bless the man in my local running shop who offered to analyse a video of me running to try and make some suggestions. This feels like a pretty important thing to do now that we&amp;rsquo;re back in a full throated lockdown again.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve been jamming the &lt;a href=&#34;https://open.spotify.com/playlist/7bexOBoFeD80LtzFqB7iol?si=v2gdQQ9CSRioVJKPlSYU0A&#34;&gt;Taeha types playlist&lt;/a&gt; hard on Spotify. It&amp;rsquo;s real good, and I am enjoying working to the smooth jazz.&lt;/li&gt;
&lt;li&gt;My new desk and chair arrived this week after a long wait. Very pleased with the chair. I&amp;rsquo;ve always wanted an Aeron and so far it&amp;rsquo;s everything I hoped it would be. I was previously using a &lt;a href=&#34;https://www.hermanmiller.com/en_eur/products/seating/office-chairs/sayl-chairs/&#34;&gt;Sayl, also by Herman Miller&lt;/a&gt;, and I&amp;rsquo;ve often described it to people as an Aeron lite. But being able to more directly compare the two it&amp;rsquo;s like night and day. The Sayl is a really comfortable chair, but my back and legs will still give me a sharp reminder that I&amp;rsquo;ve been sitting all day if I forget to get up during the day. the extra affordances of the Aeron and the difference in materials and construction make it feel almost effortless to sit correctly (for me anyway), which has already resulting in noticeable improvements to my back and shoulders. Remind me to write about this again in a few months once I&amp;rsquo;ve broken it in and the honeymoon period has worn off.&lt;/li&gt;
&lt;li&gt;The desk is also very nice, however it arrived with some damage to the top, so that&amp;rsquo;s detracting from the joy of the occasion a bit. Martin, the chap from the logistics company has been very pleasant and helpful thus far, which will hopefully continue now that I have to try and navigate getting a replacement desktop.&lt;/li&gt;
&lt;li&gt;In an effort to improve my C skills I ordered another book: &lt;a href=&#34;https://www.manning.com/books/modern-c&#34;&gt;Modern C by Jens Gustedt&lt;/a&gt;. This is only really notable because I&amp;rsquo;m trying to use my local independent bookshop for as much as I can. I&amp;rsquo;ve been trying to avoid Amazon for a while now, and instead have been using ethical companies recommended to me by &lt;a href=&#34;https://twitter.com/joelchippindale&#34;&gt;Joel&amp;rsquo;s&lt;/a&gt; brilliant &lt;a href=&#34;https://www.ethicalbooksearch.com/uk/&#34;&gt;ethicalbooksearch.com&lt;/a&gt; - but even that&amp;rsquo;s been leaving me feeling a little bit empty, knowing that I have a lovely independent barely 10 minutes walk from my house, and who are in no doubt struggling due to being forced to close for most of the last year.&lt;/li&gt;
&lt;li&gt;I finally got volume 4 of &lt;a href=&#34;https://kodanshacomics.com/series/wotakoi/&#34;&gt;Wotakoi&lt;/a&gt;, an outstanding Manga that I have been enjoying a lot. This is sadly a less positive bookshop story. I originally found this from a shop using the ethical book search tool as a pre-order back in June, ordered it and waited for it to arrive. Release day (October) came and went, and the ship date on my order kept slipping. I eventually cancelled the order in mid-December. No worries, thought I, I&amp;rsquo;ll just call my super handy local bookshop, but they can&amp;rsquo;t get it either because of supplier issues. So I got fed up and ordered it from Amazon. It arrived same day. I died a little inside. The book is fantastic though.&lt;/li&gt;
&lt;li&gt;Related, &lt;a href=&#34;https://yenpress.com/9780316342032/horimiya-vol-1/&#34;&gt;Hori-san to Miyamura-kun (or Horimiya)&lt;/a&gt; one of my favourite manga of all time, got made into an Anime recently and I have been all about the hype! &lt;a href=&#34;https://www.hulu.com/series/horimiya-b76b37a3-c529-4967-ab5c-bc734b79132d&#34;&gt;Episode 1&lt;/a&gt; aired this week and it was good. I&amp;rsquo;m super happy with what they&amp;rsquo;ve done with the characters, the designs are really good, I prefer them to the previous &lt;a href=&#34;https://horimiya.fandom.com/wiki/Hori-san_to_Miyamura-kun_(OVA)&#34;&gt;4 episode OVA&lt;/a&gt; that was made. The pacing is a bit fast - they covered an awful lot of chapters in a single episode. I hope that&amp;rsquo;s just to get all the important character introductions dealt with and they&amp;rsquo;ll slow down once we start hitting real plot, but I&amp;rsquo;ll wait and see what happens.&lt;/li&gt;
&lt;li&gt;It should be no surprise to anyone at this point that I&amp;rsquo;m into custom mechanical keyboards as a hobby. Well I got interested in this after seeing photos and videos of a keyboard called the &lt;a href=&#34;https://imgur.com/gallery/dKz7YRg&#34;&gt;Kyuu&lt;/a&gt; a year and a half ago or so. The Kyuu is basically unobtainable for any sane person, only a small quantity were made and they change hands for 4 figure sums of money on the used market. I liked the design of the Kyuu so much that I started designing my own keyboard heavily inspired by it. Well a couple of months ago the original designer &lt;a href=&#34;https://github.com/Quantrik/Kyuu&#34;&gt;released the design files on Github&lt;/a&gt;. This week I got to have a chat with a lovely gentleman on the Mechanical Keyboard UK (mkuk) Discord group who&amp;rsquo;s put the leg work in to manufacture 3 Fyuu&amp;rsquo;s (Fake Kyuu&amp;rsquo;s) from these downloaded files, so now that I&amp;rsquo;ve had a bit of a knowledge injection about the manufacturing process and what to look out for in the design files I am fired up to crack on with my keyboard project again. I even got the contact details for a well respected CNC shop in Shenzen.&lt;/li&gt;
&lt;li&gt;Having a new baby around makes it obvious which parts of your home and living arrangement need optimising. Recently we&amp;rsquo;ve been trying to sell a bunch of furniture, including a very large antique wardrobe that we don&amp;rsquo;t have space for anymore. Selling things is hard during a lockdown but it&amp;rsquo;s finally gone! It was collected by courier at the end of the week after a very busy few evenings of cleaning, dismantling and attempting to package up the constituent parts. I&amp;rsquo;m knackered, but pleased to be rid of it.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;First day back to work after a couple of weeks off and Slack dies as soon as the East coast wakes up. Amazing how debilitating it now feels when slack starts having issues, it&amp;rsquo;s like a lifeline has just been cut off. I swear it never used to feel this bad.&lt;/li&gt;
&lt;li&gt;Elliot had his first round of vaccinations this week. He&amp;rsquo;s absolutely miserable - which I guess is what happens when someone jabs needles in both legs filled with a rotovirus/meningitis cocktail. It&amp;rsquo;s a lot to take in when you&amp;rsquo;re 8 weeks old.&lt;/li&gt;
&lt;li&gt;Thinking about starting running, but the idea of buying running shoes is super intimidating. The whole process is even more complicated now that I can&amp;rsquo;t get to a shop - as normally they&amp;rsquo;d watch you run in order to do a gait analysis to find the right type of shoe. Bless the man in my local running shop who offered to analyse a video of me running to try and make some suggestions. This feels like a pretty important thing to do now that we&amp;rsquo;re back in a full throated lockdown again.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve been jamming the &lt;a href=&#34;https://open.spotify.com/playlist/7bexOBoFeD80LtzFqB7iol?si=v2gdQQ9CSRioVJKPlSYU0A&#34;&gt;Taeha types playlist&lt;/a&gt; hard on Spotify. It&amp;rsquo;s real good, and I am enjoying working to the smooth jazz.&lt;/li&gt;
&lt;li&gt;My new desk and chair arrived this week after a long wait. Very pleased with the chair. I&amp;rsquo;ve always wanted an Aeron and so far it&amp;rsquo;s everything I hoped it would be. I was previously using a &lt;a href=&#34;https://www.hermanmiller.com/en_eur/products/seating/office-chairs/sayl-chairs/&#34;&gt;Sayl, also by Herman Miller&lt;/a&gt;, and I&amp;rsquo;ve often described it to people as an Aeron lite. But being able to more directly compare the two it&amp;rsquo;s like night and day. The Sayl is a really comfortable chair, but my back and legs will still give me a sharp reminder that I&amp;rsquo;ve been sitting all day if I forget to get up during the day. the extra affordances of the Aeron and the difference in materials and construction make it feel almost effortless to sit correctly (for me anyway), which has already resulting in noticeable improvements to my back and shoulders. Remind me to write about this again in a few months once I&amp;rsquo;ve broken it in and the honeymoon period has worn off.&lt;/li&gt;
&lt;li&gt;The desk is also very nice, however it arrived with some damage to the top, so that&amp;rsquo;s detracting from the joy of the occasion a bit. Martin, the chap from the logistics company has been very pleasant and helpful thus far, which will hopefully continue now that I have to try and navigate getting a replacement desktop.&lt;/li&gt;
&lt;li&gt;In an effort to improve my C skills I ordered another book: &lt;a href=&#34;https://www.manning.com/books/modern-c&#34;&gt;Modern C by Jens Gustedt&lt;/a&gt;. This is only really notable because I&amp;rsquo;m trying to use my local independent bookshop for as much as I can. I&amp;rsquo;ve been trying to avoid Amazon for a while now, and instead have been using ethical companies recommended to me by &lt;a href=&#34;https://twitter.com/joelchippindale&#34;&gt;Joel&amp;rsquo;s&lt;/a&gt; brilliant &lt;a href=&#34;https://www.ethicalbooksearch.com/uk/&#34;&gt;ethicalbooksearch.com&lt;/a&gt; - but even that&amp;rsquo;s been leaving me feeling a little bit empty, knowing that I have a lovely independent barely 10 minutes walk from my house, and who are in no doubt struggling due to being forced to close for most of the last year.&lt;/li&gt;
&lt;li&gt;I finally got volume 4 of &lt;a href=&#34;https://kodanshacomics.com/series/wotakoi/&#34;&gt;Wotakoi&lt;/a&gt;, an outstanding Manga that I have been enjoying a lot. This is sadly a less positive bookshop story. I originally found this from a shop using the ethical book search tool as a pre-order back in June, ordered it and waited for it to arrive. Release day (October) came and went, and the ship date on my order kept slipping. I eventually cancelled the order in mid-December. No worries, thought I, I&amp;rsquo;ll just call my super handy local bookshop, but they can&amp;rsquo;t get it either because of supplier issues. So I got fed up and ordered it from Amazon. It arrived same day. I died a little inside. The book is fantastic though.&lt;/li&gt;
&lt;li&gt;Related, &lt;a href=&#34;https://yenpress.com/9780316342032/horimiya-vol-1/&#34;&gt;Hori-san to Miyamura-kun (or Horimiya)&lt;/a&gt; one of my favourite manga of all time, got made into an Anime recently and I have been all about the hype! &lt;a href=&#34;https://www.hulu.com/series/horimiya-b76b37a3-c529-4967-ab5c-bc734b79132d&#34;&gt;Episode 1&lt;/a&gt; aired this week and it was good. I&amp;rsquo;m super happy with what they&amp;rsquo;ve done with the characters, the designs are really good, I prefer them to the previous &lt;a href=&#34;https://horimiya.fandom.com/wiki/Hori-san_to_Miyamura-kun_(OVA)&#34;&gt;4 episode OVA&lt;/a&gt; that was made. The pacing is a bit fast - they covered an awful lot of chapters in a single episode. I hope that&amp;rsquo;s just to get all the important character introductions dealt with and they&amp;rsquo;ll slow down once we start hitting real plot, but I&amp;rsquo;ll wait and see what happens.&lt;/li&gt;
&lt;li&gt;It should be no surprise to anyone at this point that I&amp;rsquo;m into custom mechanical keyboards as a hobby. Well I got interested in this after seeing photos and videos of a keyboard called the &lt;a href=&#34;https://imgur.com/gallery/dKz7YRg&#34;&gt;Kyuu&lt;/a&gt; a year and a half ago or so. The Kyuu is basically unobtainable for any sane person, only a small quantity were made and they change hands for 4 figure sums of money on the used market. I liked the design of the Kyuu so much that I started designing my own keyboard heavily inspired by it. Well a couple of months ago the original designer &lt;a href=&#34;https://github.com/Quantrik/Kyuu&#34;&gt;released the design files on Github&lt;/a&gt;. This week I got to have a chat with a lovely gentleman on the Mechanical Keyboard UK (mkuk) Discord group who&amp;rsquo;s put the leg work in to manufacture 3 Fyuu&amp;rsquo;s (Fake Kyuu&amp;rsquo;s) from these downloaded files, so now that I&amp;rsquo;ve had a bit of a knowledge injection about the manufacturing process and what to look out for in the design files I am fired up to crack on with my keyboard project again. I even got the contact details for a well respected CNC shop in Shenzen.&lt;/li&gt;
&lt;li&gt;Having a new baby around makes it obvious which parts of your home and living arrangement need optimising. Recently we&amp;rsquo;ve been trying to sell a bunch of furniture, including a very large antique wardrobe that we don&amp;rsquo;t have space for anymore. Selling things is hard during a lockdown but it&amp;rsquo;s finally gone! It was collected by courier at the end of the week after a very busy few evenings of cleaning, dismantling and attempting to package up the constituent parts. I&amp;rsquo;m knackered, but pleased to be rid of it.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Weeknotes 2021.00: Late to the party</title>
      <link>https://www.eightbitraptor.com/2021/01/04/weeknotes-2021.00-late-to-the-party/</link>
      <pubDate>Mon, 04 Jan 2021 15:53:26 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/01/04/weeknotes-2021.00-late-to-the-party/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;I am jumping on the weeknotes bandwagon. I&amp;rsquo;m in good company, and I&amp;rsquo;ve been inspired by good people, particularly &lt;a href=&#34;https://tomstu.art/&#34;&gt;Tom&lt;/a&gt;, &lt;a href=&#34;https://blog.chrislowis.co.uk/&#34;&gt;Chris&lt;/a&gt;, and &lt;a href=&#34;https://po-ru.com/&#34;&gt;Paul&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Done a lot of walking so far in 2021, we&amp;rsquo;ve been out walking along the beach at Hythe, and spent multiple trips to Leeds Castle. Leeds castle is our lifeline at the moment during lockdown winter - somewhere that&amp;rsquo;s accessible with a pram, easy to keep yourself distant from other people, fun for the kids, but also has toilets, baby changing facilities and somewhere to get coffee and food.&lt;/li&gt;
&lt;li&gt;My friend &lt;a href=&#34;https://argyllrb.wordpress.com/&#34;&gt;Richard&lt;/a&gt; sent me a bottle of &lt;a href=&#34;https://pilotbeer.co.uk/product/barrel-aged-double-mochaccino/&#34;&gt;Pilot&amp;rsquo;s barrel aged double mocchachino stout&lt;/a&gt; before Christmas and I drank it on New Years Day. It was absolutely astounding, but at 12.5% I&amp;rsquo;m glad it only came in a 250ml bottle.&lt;/li&gt;
&lt;li&gt;I got a box of random bits arrive in the post a while ago from Shopify. A fun gesture and a load of new swag. I finally decided to try the lounge trousers on over the holidays despite being very resistant to the idea of loungewear as a concept, and I think I might be a convert. Turns out that elasticated ankles make all the difference for me.&lt;/li&gt;
&lt;li&gt;I wrote and published &lt;a href=&#34;https://www.eightbitraptor.com/2021/01/03/2020-a-year-in-review/&#34;&gt;my reflections on 2020&lt;/a&gt;. A surprisingly fun process given how crappy the year has been. It has been nice to remind myself of some of the things we acheived in amongst the quagmire of crap.&lt;/li&gt;
&lt;li&gt;I think I might be getting into tea. Liz bought me a selection of Ceylon from &lt;a href=&#34;https://www.shibui-tea.co.uk/&#34;&gt;Shibui&lt;/a&gt;, a super cool tea shop she found in Edinburgh. I am busy brewing and trying them all. I opened a Ceylon Nuwara Eliya, which had largest leaves of any tea I&amp;rsquo;ve had before, but I think my favourite so far is still Ceylon Silver Kandy. Reading up about &lt;a href=&#34;https://en.wikipedia.org/wiki/Tea_leaf_grading&#34;&gt;tea grading scales&lt;/a&gt; and man, that shit is arbitrary!&lt;/li&gt;
&lt;li&gt;My grandma died from COVID-19 in her nursing home on Sunday 3rd. She tested positive just before Christmas, so we&amp;rsquo;ve been desperately hoping she would pull through. She was 90 years old.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;I am jumping on the weeknotes bandwagon. I&amp;rsquo;m in good company, and I&amp;rsquo;ve been inspired by good people, particularly &lt;a href=&#34;https://tomstu.art/&#34;&gt;Tom&lt;/a&gt;, &lt;a href=&#34;https://blog.chrislowis.co.uk/&#34;&gt;Chris&lt;/a&gt;, and &lt;a href=&#34;https://po-ru.com/&#34;&gt;Paul&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Done a lot of walking so far in 2021, we&amp;rsquo;ve been out walking along the beach at Hythe, and spent multiple trips to Leeds Castle. Leeds castle is our lifeline at the moment during lockdown winter - somewhere that&amp;rsquo;s accessible with a pram, easy to keep yourself distant from other people, fun for the kids, but also has toilets, baby changing facilities and somewhere to get coffee and food.&lt;/li&gt;
&lt;li&gt;My friend &lt;a href=&#34;https://argyllrb.wordpress.com/&#34;&gt;Richard&lt;/a&gt; sent me a bottle of &lt;a href=&#34;https://pilotbeer.co.uk/product/barrel-aged-double-mochaccino/&#34;&gt;Pilot&amp;rsquo;s barrel aged double mocchachino stout&lt;/a&gt; before Christmas and I drank it on New Years Day. It was absolutely astounding, but at 12.5% I&amp;rsquo;m glad it only came in a 250ml bottle.&lt;/li&gt;
&lt;li&gt;I got a box of random bits arrive in the post a while ago from Shopify. A fun gesture and a load of new swag. I finally decided to try the lounge trousers on over the holidays despite being very resistant to the idea of loungewear as a concept, and I think I might be a convert. Turns out that elasticated ankles make all the difference for me.&lt;/li&gt;
&lt;li&gt;I wrote and published &lt;a href=&#34;https://www.eightbitraptor.com/2021/01/03/2020-a-year-in-review/&#34;&gt;my reflections on 2020&lt;/a&gt;. A surprisingly fun process given how crappy the year has been. It has been nice to remind myself of some of the things we acheived in amongst the quagmire of crap.&lt;/li&gt;
&lt;li&gt;I think I might be getting into tea. Liz bought me a selection of Ceylon from &lt;a href=&#34;https://www.shibui-tea.co.uk/&#34;&gt;Shibui&lt;/a&gt;, a super cool tea shop she found in Edinburgh. I am busy brewing and trying them all. I opened a Ceylon Nuwara Eliya, which had largest leaves of any tea I&amp;rsquo;ve had before, but I think my favourite so far is still Ceylon Silver Kandy. Reading up about &lt;a href=&#34;https://en.wikipedia.org/wiki/Tea_leaf_grading&#34;&gt;tea grading scales&lt;/a&gt; and man, that shit is arbitrary!&lt;/li&gt;
&lt;li&gt;My grandma died from COVID-19 in her nursing home on Sunday 3rd. She tested positive just before Christmas, so we&amp;rsquo;ve been desperately hoping she would pull through. She was 90 years old.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>2020: A Year in Review</title>
      <link>https://www.eightbitraptor.com/2021/01/03/2020-a-year-in-review/</link>
      <pubDate>Sun, 03 Jan 2021 22:50:36 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2021/01/03/2020-a-year-in-review/</guid>
      <description>&lt;p&gt;I‚Äôve not written a post like this before but 2020 has been a year of firsts so let‚Äôs give it a go.&lt;/p&gt;
&lt;p&gt;I‚Äôm not sure what I achieved last year. I imagine a lot of people right now are feeling pretty similar: that 2020 was simultaneously the longest and the shortest year we‚Äôve ever experienced. But I shall summarise mine, and we‚Äôll see where we get.&lt;/p&gt;
&lt;p&gt;January and February started on a reasonably positive note. I managed to finish a big project at work that I‚Äôd been focusing on for a long time, to a bit of fanfare. That felt pretty good, sadly I&amp;rsquo;m pretty sure that not a lot of people actually ended up getting use out of it, which didn&amp;rsquo;t feel as good.&lt;/p&gt;
&lt;p&gt;I don‚Äôt have many memories of March and April (I should start journaling, or at least taking notes). I do remember that both Liz and I trying to work while trying to provide childcare for Phoebe while her nursery was closed was hard. But that both of our employers were fantastic about it. Also at this point we only had one kid (spoiler alert), and she‚Äôs not at homeschooling age yet. So compared to most people I know we had it on easy mode. I can only begin to imagine what it was like for people with multiple kids, who still had to leave the house for work and attempt to homeschool at the same time. That sounds terrifying.&lt;/p&gt;
&lt;p&gt;At some point in May I was given the opportunity at work to move teams and do something I‚Äôd never done but always wanted to do. I&amp;rsquo;m now working full time inside the Ruby Interpreter, in a language I‚Äôm unfamiliar with and in areas of software design I‚Äôve never really considered before. I&amp;rsquo;m plotting a few posts about it all in more detail, so look out for those in the future.&lt;/p&gt;
&lt;p&gt;I‚Äôm loving my job and the work is fun and rewarding. I‚Äôve always wanted to work in a large non-web related open source project. And language implementation is especially exciting to me. But I am embarrassed at how much it‚Äôs made me feel like a complete amateur again. I feel like I‚Äôve spent the back half of the year being a burden to my co-workers and have shipped nothing of consequence.&lt;/p&gt;
&lt;p&gt;I‚Äôve been working from home since 2018, but 2020 was where I really got my working from home setup dialled in. There were a lot of improvements in infrastructure and communications that happened because of the pandemic, all of which have had real measurable quality of life improvements for those of us working remotely since the before times. My company also closed up their permanent office spaces too, which I&amp;rsquo;m not sure how I feel about. I feel bad for the folks that enjoyed working in them and I will miss being able to visit, although hopefully travel will come back at some point in the future, however different it looks.&lt;/p&gt;
&lt;p&gt;I miss my Wednesday trips into town to caf√© work with my friend &lt;a href=&#34;https://mattbee.co.uk/&#34;&gt;Matt&lt;/a&gt;. Being able to spend time in a public place, with someone else was a surprisingly balancing experience that I miss terribly. I‚Äôm also keeping my fingers crossed that &lt;a href=&#34;https://www.facebook.com/anchor7oaks&#34;&gt;the Pub we lunched at&lt;/a&gt; doesn‚Äôt go bust through all of these lockdowns. Not only were the publicans lovely people but it was a proper independent pub, and one of the few places to get a decent pint in Sevenoaks.&lt;/p&gt;
&lt;p&gt;We managed to get some work done on the house this year, in the gaps between lockdowns. The most impactful thing was our shed. We ordered a 2m x 3m wooden outbuilding which takes up a big chunk of the back of the garden. Liz and I spent our free time installing insulation and interior cladding, painting it and installing worktop and cupboards and it now looks lovely. We also had power installed so now I‚Äôve set up my bicycle and smart trainer out there. It‚Äôs a very welcome and comfortable way to maintain a bit of cardio fitness during these lockdown winters.&lt;/p&gt;
&lt;p&gt;We also had some work done on the front of the house and I stripped back and painted our old wooden bay window, but these things are much less exciting than shed.&lt;/p&gt;
&lt;p&gt;I picked up a new hobby in May after both of my parents independently gifted me the exact same homebrew starter kit for my birthday. So I‚Äôve been making beer, I started with 4L kits and have since upgraded to 12L batches in stainless steel fermenters, been creating my own recipes and had a blind tasting session with my mates. First goal for 2021 is that my first batch of beer will be made using all grain rather than extract, so I can have full control over the process.&lt;/p&gt;
&lt;p&gt;Speaking of my mates. This pattern of getting a new hobby and going in hard is apparently such a personality trait of mine that they‚Äôve started taking bets on what new hobbies I‚Äôm going to accrue during 2021. At this point I‚Äôm adamant that beer and keyboards are the ones that will stick. They remain unconvinced.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t make as good progress on my keyboard as I wanted to this year. Although in my credit I dealt with some shenanigans involving a 3D printer order which took multiple months to resolve (again partly due to COVID). I started the year getting quotes for someone to CNC machine my case prototypes, promptly fell off my chair at how expensive it all is, redesigned my case to be 3D printable, bought a printer and built a prototype. I learned several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CNC fabrication houses &lt;em&gt;will never ever leave you alone&lt;/em&gt; once you&amp;rsquo;ve emailed asking for a quote&lt;/li&gt;
&lt;li&gt;Different manufactoring methods require significantly different design trade-offs&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;can&lt;/em&gt; finish a 3D printed object so that it doesn&amp;rsquo;t look like a print, but it&amp;rsquo;s a massive pain in the arse.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also had my PCB manufactured, and then scared myself with the amount of surface mount soldering required, because I am an idiot and should have either just have built the thing around a Pro Micro, or paid the extra money for the fab house to pick and place components like any sane human.&lt;/p&gt;
&lt;p&gt;So now, I have a half soldered PCB which I cannot test so I don&amp;rsquo;t even know if my design is good, and a 3D printed case, that still needs multiple rounds of sanding and filling and spraying.&lt;/p&gt;
&lt;p&gt;I also promised to &lt;a href=&#34;https://www.eightbitraptor.com/2020/03/11/a-typing-journey-part-2-down-the-rabbit-hole/&#34;&gt;write about this back in March&lt;/a&gt; and I haven&amp;rsquo;t. I desperately want to pick this project back up in 2021, but at the moment finding time is hard, especially finding time where I have the brainpower and motivation to pick up anything technical.&lt;/p&gt;
&lt;p&gt;I am still waiting on &lt;a href=&#34;https://geekhack.org/index.php?topic=104129.0&#34;&gt;the keycap group buy I joined in January&lt;/a&gt;, thanks in part to COVID, and in part to problems and queues at the factory with previous orders. It&amp;rsquo;s been over a year since the GB started, there was a small celebration in the Discord group on it&amp;rsquo;s anniversary. Latest news is that it&amp;rsquo;s shipping from the factory this Jan, so hopefully it&amp;rsquo;ll arrive this year.&lt;/p&gt;
&lt;p&gt;In other non-keyboard news. In August, I sought help for my mental health for the first time in my life. I was diagnosed with depression and mild anxiety and took a course of CBT. This was terrifying for me, completely new and uncharted territory, but my therapist was lovely and despite everything being done remotely, it was an experience I‚Äôm deeply grateful for and would recommend to anyone, whether you think you need it or not. I have my CBT course to thank for the tools and exercises that helped me get through the rest of the year.&lt;/p&gt;
&lt;p&gt;August was also the month where we had to take Phoebe for get her first COVID test. Pinning my screaming child‚Äôs arms down in the back of a car while my wife shoved a swab up her nose was not an experience I care to dwell on, and certainly one I wouldn‚Äôt wish on any parent.&lt;/p&gt;
&lt;p&gt;Not a huge amount happened in September and October. In between lockdowns, I went on a Bonsai workshop with the fantastic &lt;a href=&#34;https://www.herons.co.uk/index.php&#34;&gt;Peter Chen at his Bonsai nursery, Herons Bonsai&lt;/a&gt;, it was a birthday present from Liz, given earlier in the year and delayed until now and it was an idyllic little slice of normality. I did learn just how brutally you have to twist a tree to form that signature Bonsai S-curve though!&lt;/p&gt;
&lt;p&gt;In November our son Elliot was born. 2 weeks late, but healthy and at home. He‚Äôs a charmer, him and Liz are both well and Phoebe is a wonderfully adoring big sister. He is without a doubt, the single best thing to happen this year. Despite the crater he‚Äôs made in the family sleep schedule!&lt;/p&gt;
&lt;p&gt;Also in November, about 3 hours before Elliot was born, my father was diagnosed with multiple inoperable, advanced and very terminal cancers. He was already in hospital recovering from a mild stroke he‚Äôd had the previous month. We were told in no uncertain terms that he didn‚Äôt have very long and we should try and say our goodbyes before Christmas. He lived in Wales, about 5 hours drive from me, so I made plans to break lockdown, and arranged someone close to be with Liz and the kids so I could travel to Dad the following weekend. He died 3 days later. I never got to see him.&lt;/p&gt;
&lt;p&gt;I‚Äôm still &lt;a href=&#34;https://www.justgiving.com/fundraising/phil-house-memorial&#34;&gt;running a justgiving page in his memory&lt;/a&gt; to donate to cancer research in case you‚Äôre reading this and have a few quid spare&lt;/p&gt;
&lt;p&gt;So the rest of November was all about arranging his funeral, challenging for a bunch of reasons I&amp;rsquo;ll not go into, but not least of which was the complexities of organising anything involving people during a global pandemic.&lt;/p&gt;
&lt;p&gt;Needless to say Christmas was a subdued affair, although it was honestly a relief to spend some time at home as a family after all the events of the previous few months, and it was a joy to see Phoebe so excited about it all.&lt;/p&gt;
&lt;p&gt;And so we are here, a few days into 2021. I&amp;rsquo;d like to feel positive about the future, but my 90 year old grandmother died in her care home this afternoon after testing positive for Covid a few days ago, so honestly 2021 can get in the bin.&lt;/p&gt;
&lt;p&gt;I‚Äôm very grateful for the things I have: my family, and our health and I‚Äôm sad for the things We‚Äôve lost and the people who aren&amp;rsquo;t with us anymore. I remain worried about family and friends who are vulnerable. 2020 was hard, and it doesn&amp;rsquo;t look like most of 2021&amp;rsquo;s going to be much easier.&lt;/p&gt;
&lt;p&gt;Still. Chin Up. Back to work tomorrow.&lt;/p&gt;
</description>
      <content>&lt;p&gt;I‚Äôve not written a post like this before but 2020 has been a year of firsts so let‚Äôs give it a go.&lt;/p&gt;
&lt;p&gt;I‚Äôm not sure what I achieved last year. I imagine a lot of people right now are feeling pretty similar: that 2020 was simultaneously the longest and the shortest year we‚Äôve ever experienced. But I shall summarise mine, and we‚Äôll see where we get.&lt;/p&gt;
&lt;p&gt;January and February started on a reasonably positive note. I managed to finish a big project at work that I‚Äôd been focusing on for a long time, to a bit of fanfare. That felt pretty good, sadly I&amp;rsquo;m pretty sure that not a lot of people actually ended up getting use out of it, which didn&amp;rsquo;t feel as good.&lt;/p&gt;
&lt;p&gt;I don‚Äôt have many memories of March and April (I should start journaling, or at least taking notes). I do remember that both Liz and I trying to work while trying to provide childcare for Phoebe while her nursery was closed was hard. But that both of our employers were fantastic about it. Also at this point we only had one kid (spoiler alert), and she‚Äôs not at homeschooling age yet. So compared to most people I know we had it on easy mode. I can only begin to imagine what it was like for people with multiple kids, who still had to leave the house for work and attempt to homeschool at the same time. That sounds terrifying.&lt;/p&gt;
&lt;p&gt;At some point in May I was given the opportunity at work to move teams and do something I‚Äôd never done but always wanted to do. I&amp;rsquo;m now working full time inside the Ruby Interpreter, in a language I‚Äôm unfamiliar with and in areas of software design I‚Äôve never really considered before. I&amp;rsquo;m plotting a few posts about it all in more detail, so look out for those in the future.&lt;/p&gt;
&lt;p&gt;I‚Äôm loving my job and the work is fun and rewarding. I‚Äôve always wanted to work in a large non-web related open source project. And language implementation is especially exciting to me. But I am embarrassed at how much it‚Äôs made me feel like a complete amateur again. I feel like I‚Äôve spent the back half of the year being a burden to my co-workers and have shipped nothing of consequence.&lt;/p&gt;
&lt;p&gt;I‚Äôve been working from home since 2018, but 2020 was where I really got my working from home setup dialled in. There were a lot of improvements in infrastructure and communications that happened because of the pandemic, all of which have had real measurable quality of life improvements for those of us working remotely since the before times. My company also closed up their permanent office spaces too, which I&amp;rsquo;m not sure how I feel about. I feel bad for the folks that enjoyed working in them and I will miss being able to visit, although hopefully travel will come back at some point in the future, however different it looks.&lt;/p&gt;
&lt;p&gt;I miss my Wednesday trips into town to caf√© work with my friend &lt;a href=&#34;https://mattbee.co.uk/&#34;&gt;Matt&lt;/a&gt;. Being able to spend time in a public place, with someone else was a surprisingly balancing experience that I miss terribly. I‚Äôm also keeping my fingers crossed that &lt;a href=&#34;https://www.facebook.com/anchor7oaks&#34;&gt;the Pub we lunched at&lt;/a&gt; doesn‚Äôt go bust through all of these lockdowns. Not only were the publicans lovely people but it was a proper independent pub, and one of the few places to get a decent pint in Sevenoaks.&lt;/p&gt;
&lt;p&gt;We managed to get some work done on the house this year, in the gaps between lockdowns. The most impactful thing was our shed. We ordered a 2m x 3m wooden outbuilding which takes up a big chunk of the back of the garden. Liz and I spent our free time installing insulation and interior cladding, painting it and installing worktop and cupboards and it now looks lovely. We also had power installed so now I‚Äôve set up my bicycle and smart trainer out there. It‚Äôs a very welcome and comfortable way to maintain a bit of cardio fitness during these lockdown winters.&lt;/p&gt;
&lt;p&gt;We also had some work done on the front of the house and I stripped back and painted our old wooden bay window, but these things are much less exciting than shed.&lt;/p&gt;
&lt;p&gt;I picked up a new hobby in May after both of my parents independently gifted me the exact same homebrew starter kit for my birthday. So I‚Äôve been making beer, I started with 4L kits and have since upgraded to 12L batches in stainless steel fermenters, been creating my own recipes and had a blind tasting session with my mates. First goal for 2021 is that my first batch of beer will be made using all grain rather than extract, so I can have full control over the process.&lt;/p&gt;
&lt;p&gt;Speaking of my mates. This pattern of getting a new hobby and going in hard is apparently such a personality trait of mine that they‚Äôve started taking bets on what new hobbies I‚Äôm going to accrue during 2021. At this point I‚Äôm adamant that beer and keyboards are the ones that will stick. They remain unconvinced.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t make as good progress on my keyboard as I wanted to this year. Although in my credit I dealt with some shenanigans involving a 3D printer order which took multiple months to resolve (again partly due to COVID). I started the year getting quotes for someone to CNC machine my case prototypes, promptly fell off my chair at how expensive it all is, redesigned my case to be 3D printable, bought a printer and built a prototype. I learned several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CNC fabrication houses &lt;em&gt;will never ever leave you alone&lt;/em&gt; once you&amp;rsquo;ve emailed asking for a quote&lt;/li&gt;
&lt;li&gt;Different manufactoring methods require significantly different design trade-offs&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;can&lt;/em&gt; finish a 3D printed object so that it doesn&amp;rsquo;t look like a print, but it&amp;rsquo;s a massive pain in the arse.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also had my PCB manufactured, and then scared myself with the amount of surface mount soldering required, because I am an idiot and should have either just have built the thing around a Pro Micro, or paid the extra money for the fab house to pick and place components like any sane human.&lt;/p&gt;
&lt;p&gt;So now, I have a half soldered PCB which I cannot test so I don&amp;rsquo;t even know if my design is good, and a 3D printed case, that still needs multiple rounds of sanding and filling and spraying.&lt;/p&gt;
&lt;p&gt;I also promised to &lt;a href=&#34;https://www.eightbitraptor.com/2020/03/11/a-typing-journey-part-2-down-the-rabbit-hole/&#34;&gt;write about this back in March&lt;/a&gt; and I haven&amp;rsquo;t. I desperately want to pick this project back up in 2021, but at the moment finding time is hard, especially finding time where I have the brainpower and motivation to pick up anything technical.&lt;/p&gt;
&lt;p&gt;I am still waiting on &lt;a href=&#34;https://geekhack.org/index.php?topic=104129.0&#34;&gt;the keycap group buy I joined in January&lt;/a&gt;, thanks in part to COVID, and in part to problems and queues at the factory with previous orders. It&amp;rsquo;s been over a year since the GB started, there was a small celebration in the Discord group on it&amp;rsquo;s anniversary. Latest news is that it&amp;rsquo;s shipping from the factory this Jan, so hopefully it&amp;rsquo;ll arrive this year.&lt;/p&gt;
&lt;p&gt;In other non-keyboard news. In August, I sought help for my mental health for the first time in my life. I was diagnosed with depression and mild anxiety and took a course of CBT. This was terrifying for me, completely new and uncharted territory, but my therapist was lovely and despite everything being done remotely, it was an experience I‚Äôm deeply grateful for and would recommend to anyone, whether you think you need it or not. I have my CBT course to thank for the tools and exercises that helped me get through the rest of the year.&lt;/p&gt;
&lt;p&gt;August was also the month where we had to take Phoebe for get her first COVID test. Pinning my screaming child‚Äôs arms down in the back of a car while my wife shoved a swab up her nose was not an experience I care to dwell on, and certainly one I wouldn‚Äôt wish on any parent.&lt;/p&gt;
&lt;p&gt;Not a huge amount happened in September and October. In between lockdowns, I went on a Bonsai workshop with the fantastic &lt;a href=&#34;https://www.herons.co.uk/index.php&#34;&gt;Peter Chen at his Bonsai nursery, Herons Bonsai&lt;/a&gt;, it was a birthday present from Liz, given earlier in the year and delayed until now and it was an idyllic little slice of normality. I did learn just how brutally you have to twist a tree to form that signature Bonsai S-curve though!&lt;/p&gt;
&lt;p&gt;In November our son Elliot was born. 2 weeks late, but healthy and at home. He‚Äôs a charmer, him and Liz are both well and Phoebe is a wonderfully adoring big sister. He is without a doubt, the single best thing to happen this year. Despite the crater he‚Äôs made in the family sleep schedule!&lt;/p&gt;
&lt;p&gt;Also in November, about 3 hours before Elliot was born, my father was diagnosed with multiple inoperable, advanced and very terminal cancers. He was already in hospital recovering from a mild stroke he‚Äôd had the previous month. We were told in no uncertain terms that he didn‚Äôt have very long and we should try and say our goodbyes before Christmas. He lived in Wales, about 5 hours drive from me, so I made plans to break lockdown, and arranged someone close to be with Liz and the kids so I could travel to Dad the following weekend. He died 3 days later. I never got to see him.&lt;/p&gt;
&lt;p&gt;I‚Äôm still &lt;a href=&#34;https://www.justgiving.com/fundraising/phil-house-memorial&#34;&gt;running a justgiving page in his memory&lt;/a&gt; to donate to cancer research in case you‚Äôre reading this and have a few quid spare&lt;/p&gt;
&lt;p&gt;So the rest of November was all about arranging his funeral, challenging for a bunch of reasons I&amp;rsquo;ll not go into, but not least of which was the complexities of organising anything involving people during a global pandemic.&lt;/p&gt;
&lt;p&gt;Needless to say Christmas was a subdued affair, although it was honestly a relief to spend some time at home as a family after all the events of the previous few months, and it was a joy to see Phoebe so excited about it all.&lt;/p&gt;
&lt;p&gt;And so we are here, a few days into 2021. I&amp;rsquo;d like to feel positive about the future, but my 90 year old grandmother died in her care home this afternoon after testing positive for Covid a few days ago, so honestly 2021 can get in the bin.&lt;/p&gt;
&lt;p&gt;I‚Äôm very grateful for the things I have: my family, and our health and I‚Äôm sad for the things We‚Äôve lost and the people who aren&amp;rsquo;t with us anymore. I remain worried about family and friends who are vulnerable. 2020 was hard, and it doesn&amp;rsquo;t look like most of 2021&amp;rsquo;s going to be much easier.&lt;/p&gt;
&lt;p&gt;Still. Chin Up. Back to work tomorrow.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Weeknotes 2020.30: Tea towels are flammable</title>
      <link>https://www.eightbitraptor.com/2020/07/26/weeknotes-2020.30-tea-towels-are-flammable/</link>
      <pubDate>Sun, 26 Jul 2020 13:18:07 +0100</pubDate>
      
      <guid>https://www.eightbitraptor.com/2020/07/26/weeknotes-2020.30-tea-towels-are-flammable/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;My monitor went bang last week, so I&amp;rsquo;ve been working on my laptop screen
propped up on a pile of books. Work arranged for me to have a new monitor
which arrived on Tuesday. They sent me an upgrade - it&amp;rsquo;s a couple of inches
bigger than my old screen and 4k rather than 2k. It&amp;rsquo;s absolutely lovely,
probably partly due to how grateful my eyes are to not be peering over my desk
at a laptop screen any more.&lt;/p&gt;
&lt;p&gt;First world problems though. The bezel on modern monitors is so small there&amp;rsquo;s
nowhere to put a webcam without obscuring some part of the screen! I know, cry
me a river, right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I bought a new pot for brewing beer in. After much hand wringing I finally settled on the cheap and cheerful route and ordered a 20L stainless steel stock pot from eBay. It cost all of ¬£30 and is so thin that the base pops and bends when there&amp;rsquo;s a decent amount of liquid in it.&lt;/p&gt;
&lt;p&gt;That being said it does do what I wanted it for and the handles are riveted on
well which is important when you&amp;rsquo;re moving around large quantities of boiling
sugar water.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I brewed my first batch in the new pot on Tuesday night and all went very
well. I&amp;rsquo;m able to do full wort boils for the batch sizes I brew now and that
makes the whole process much easier.&lt;/p&gt;
&lt;p&gt;Now I have 7L of an American IPA in the fermenter, hopped to about 70 IBU&amp;rsquo;s
with Chinook hops. Gravity was 1.061 so I&amp;rsquo;m hoping for an abv of about 6.4%.&lt;/p&gt;
&lt;p&gt;I hit all my expected gravity numbers this time around, which isn&amp;rsquo;t that much
of an acheivement considering it&amp;rsquo;s an extract brew, but it at least means I&amp;rsquo;m
building an understanding of boil off rates on my system, so I&amp;rsquo;m pleased.&lt;/p&gt;
&lt;p&gt;And I also set fire to a tea towel. Don&amp;rsquo;t ask.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;My monitor went bang last week, so I&amp;rsquo;ve been working on my laptop screen
propped up on a pile of books. Work arranged for me to have a new monitor
which arrived on Tuesday. They sent me an upgrade - it&amp;rsquo;s a couple of inches
bigger than my old screen and 4k rather than 2k. It&amp;rsquo;s absolutely lovely,
probably partly due to how grateful my eyes are to not be peering over my desk
at a laptop screen any more.&lt;/p&gt;
&lt;p&gt;First world problems though. The bezel on modern monitors is so small there&amp;rsquo;s
nowhere to put a webcam without obscuring some part of the screen! I know, cry
me a river, right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I bought a new pot for brewing beer in. After much hand wringing I finally settled on the cheap and cheerful route and ordered a 20L stainless steel stock pot from eBay. It cost all of ¬£30 and is so thin that the base pops and bends when there&amp;rsquo;s a decent amount of liquid in it.&lt;/p&gt;
&lt;p&gt;That being said it does do what I wanted it for and the handles are riveted on
well which is important when you&amp;rsquo;re moving around large quantities of boiling
sugar water.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I brewed my first batch in the new pot on Tuesday night and all went very
well. I&amp;rsquo;m able to do full wort boils for the batch sizes I brew now and that
makes the whole process much easier.&lt;/p&gt;
&lt;p&gt;Now I have 7L of an American IPA in the fermenter, hopped to about 70 IBU&amp;rsquo;s
with Chinook hops. Gravity was 1.061 so I&amp;rsquo;m hoping for an abv of about 6.4%.&lt;/p&gt;
&lt;p&gt;I hit all my expected gravity numbers this time around, which isn&amp;rsquo;t that much
of an acheivement considering it&amp;rsquo;s an extract brew, but it at least means I&amp;rsquo;m
building an understanding of boil off rates on my system, so I&amp;rsquo;m pleased.&lt;/p&gt;
&lt;p&gt;And I also set fire to a tea towel. Don&amp;rsquo;t ask.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>A typing journey, part 2: Down the rabbit hole</title>
      <link>https://www.eightbitraptor.com/2020/03/11/a-typing-journey-part-2-down-the-rabbit-hole/</link>
      <pubDate>Wed, 11 Mar 2020 08:34:17 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2020/03/11/a-typing-journey-part-2-down-the-rabbit-hole/</guid>
      <description>&lt;p&gt;In my last post about mechanical keyboards, I was getting ready to dip my toe
into the weird and wonderful world of custom ergonomic keyboards. Young and full
of na√Øvete I hadn&amp;rsquo;t fully grasped the depth of the hobby I was about to pick up,
nor quite how tight it would grab me!&lt;/p&gt;
&lt;p&gt;Fast forward a few months, and in addition to owning and using &lt;a href=&#34;https://falba.tech/custom-redox/&#34;&gt;my bamboo
Redox&lt;/a&gt; every day, I&amp;rsquo;ve also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dissassembled it to lubricated all the switches with a locally sourced
alternative to Krytox 205g0 (a very popular grease in &amp;ldquo;the keyboard
community&amp;rdquo;, but expensive and hard to find outside the US);&lt;/li&gt;
&lt;li&gt;Built a 40% ergonomic keyboard (&lt;a href=&#34;https://github.com/foostan/crkbd&#34;&gt;the Crkbd, or Corne
keyboard&lt;/a&gt; an open source project from Japan)&lt;/li&gt;
&lt;li&gt;Joined a keyboard &amp;ldquo;group-buy&amp;rdquo; for a set of &lt;a href=&#34;https://geekhack.org/index.php?topic=104129.0&#34;&gt;limited run custom
keycaps&lt;/a&gt; which I am waiting to
receive&lt;/li&gt;
&lt;li&gt;And I&amp;rsquo;m about 70% of the way towards designing and building my own custom
keyboard from scratch, and it&amp;rsquo;s this project that I want to talk about in the
next few posts.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;centered-image&#39;&gt;
  &lt;img alt=&#34;Boy, that escalated quickly&#34; src=&#34;https://www.eightbitraptor.com/images/escalation.gif&#34;&gt;
&lt;/div&gt;
&lt;p&gt;For something so innocuous and generally overlooked as the keyboard attached to
your computer, the depths some folks go to in search of perfection (or the &amp;ldquo;end
game&amp;rdquo;) are staggering.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve learned an awful lot since I started this adventure. As well as basic
knowledge about keyboards, their history and all the different variations that
exist around the world, I&amp;rsquo;ve also learned how they&amp;rsquo;re made. I&amp;rsquo;ve spent time
writing and customising the source code that runs on my keyboards (contributing
to open source in the process), I&amp;rsquo;ve learned how to use &lt;a href=&#34;&#34;&gt;AutoDesk Fusion 360&lt;/a&gt;
to do 3D modelling and CAD, both for CNC machining purposes and for 3D printing,
I&amp;rsquo;ve also relearned how to design electronics schematics, convert those into
printed circuit board designs and how to manufacture electronics, none of which
I&amp;rsquo;ve had cause to do since finishing my BSc 15 years ago!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/current_keyboards_feb20.jpeg&#34; alt=&#34;My current keyboards&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;background-or-why-am-i-building-a-keyboard&#34;&gt;Background. Or, Why am I building a keyboard&lt;/h2&gt;
&lt;p&gt;There are a few ways in which you can go deep into the mechanical keyboards
hobby, and one of the ways that immediately captured my interest is the high-end
custom keyboard scene. These are keyboards that have been designed from the
ground up by individual people, mostly sold in kit form (so you can customise it
with your own choice of switches and keycaps), manufactured in a small quanitity
out of premium materials, and funded up front in a process called a &amp;ldquo;group buy&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A group buy typically goes like this:&lt;/p&gt;
&lt;p&gt;Someone has an idea for a new keyboard, they put together a design in a cad
package, maybe a few renders and they write a bit about what they want to do.
They post up an &amp;ldquo;Interest check&amp;rdquo;, or IC thread on a keyboard community forum
like Geekhack.&lt;/p&gt;
&lt;p&gt;People comment on the thread, generally expressing interest, intent to buy or
design suggestions. This kicks off an iterative process where the original
designer might incorporate feedback into the idea, or clarify their thinking in
certain ways. At this point either the hype begins, or an idea fizzles out and
dies.&lt;/p&gt;
&lt;p&gt;Assuming the hype train is well and truly picking up steam, the designer will
then start approaching manufacturing companies to try and get an idea of what
the costs for a manufacturing run would be, what the minimum order quantity is
and how that is going to affect the cost. They will probably also order one or
more prototypes at this stage to check the feasibility of the design. The
prototypes will then allow them to refine further to make manufacturing easier
or more cost effective.&lt;/p&gt;
&lt;p&gt;At this point a designer will generally know what the final design is, how it&amp;rsquo;s
going to be manufactured, what all the options are as well as their retail price
and how many they need to sell in order to make that price achievable. They&amp;rsquo;ll
probably also have some accaurate renders of the finished product and maybe a
prototype or two that they can show off. At this point they&amp;rsquo;ll generally start
trying to find &amp;ldquo;proxies&amp;rdquo; to sell their product.&lt;/p&gt;
&lt;p&gt;Because this whole process is not uncommon in the mechanical keyboard world, a
lot of the &lt;a href=&#34;https://novelkeys.xyz/collections/group-buys&#34;&gt;community&lt;/a&gt;
&lt;a href=&#34;https://mykeyboard.eu/catalogue/category/group-buys_20/&#34;&gt;favourite&lt;/a&gt;
&lt;a href=&#34;https://candykeys.com/group-buys&#34;&gt;retailers&lt;/a&gt; will often manage sales of a group
buy product, for a small fee. This is referred to as being a proxy.&lt;/p&gt;
&lt;p&gt;This means that a customer can place an order for the product as they would do
normally for any other in-stock item on that store, but instead of having
something shipped to them immediately, the money is taken and held in escrow by
the proxy. This allows the designer to have confidence that the money is there
and that the group buy customers are committed (typically proxies for group buys
don&amp;rsquo;t allow refunds), and it also gives the customers some security because
they&amp;rsquo;re paying via credit card or paypal to an actual business, rather than
transferring money to some rando on the internet.&lt;/p&gt;
&lt;p&gt;Once the proxies have been set up, then the action happens. The designer posts a
Group Buy (or GB) thread on the same forum where they opened their IC. They post
all the details of the product, as well as the options available, the pricing
scheme and links to the proxies where you can go to place your order, and
they&amp;rsquo;ll typically specify a date that the group buy will &amp;ldquo;open&amp;rdquo; or be available
for purchase.&lt;/p&gt;
&lt;p&gt;Group buy sales typically stay &amp;ldquo;open&amp;rdquo; on the proxies either until a desired
quantity has been purchased, or they stay open for a set time window. This is
another critical point in the lifecycle of a group buy. If not enough units sell
to hit the factory specified MOQ then the group buy dies, the proxies refund the
money to the buyers and the designer goes back to the drawing board.&lt;/p&gt;
&lt;p&gt;A lot of the time, MOQ&amp;rsquo;s are hit quite quickly - for some of the more well known
and respected group buy runners this will be in the order of a few minutes. Once
the MOQ has been hit, the buyer has nothing left to do but wait for their
purchase to arrive. But for the designer, it&amp;rsquo;s crunch time. They&amp;rsquo;ve got to work
with the manufacturing companies to get cases built and finished, PCB&amp;rsquo;s
manufactured and built, and get everything packaged up and shipped to the buyers.&lt;/p&gt;
&lt;p&gt;This process will take months at best, and can often take a lot longer than
expected owing to unforseen manufacturing issues, delays, and quality control
issues (my keyset group buy closed at the end of January 2020, and I will
consider myself lucky if I receive them in July).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/kat_lich_render.jpg&#34; alt=&#34;A very elegant render of the KAT Lich keycap set&#34;&gt;&lt;/p&gt;
&lt;p&gt;All in all it&amp;rsquo;s not uncommon for a group buy to take 12-18 months from initial
interest check to actually receiving a kit that you can build.&lt;/p&gt;
&lt;p&gt;These methods of manufacturing and distribution generally mean that there&amp;rsquo;s a
lot of hype around these keyboards and they&amp;rsquo;re very hard to get. Minimum order
quantities aren&amp;rsquo;t high, GB runs are mostly for &amp;lt; 50 keyboards and because the
interest checks are started so far in advance there is usually a lot of people
fighting for any keyboard that&amp;rsquo;s made it to manufacturing stage.&lt;/p&gt;
&lt;p&gt;The intense design process and small scale means that these keyboards are often
very expensive, most commonly around the $400-$600 USD price bracket once you
take into account various options, shipping and customs charges. So if you can
get one, they&amp;rsquo;re often used a status symbol, and all these factors have
translated into a cut-throat and massively inflated second hand market, where
it&amp;rsquo;s not uncommon to see popular designs changing hands for $2000 USD and
upwards.&lt;/p&gt;
&lt;h2 id=&#34;where-do-i-fit-in&#34;&gt;Where do I fit in&lt;/h2&gt;
&lt;p&gt;I have been following the custom keyboard scene for a while, and I really wanted
to get one. I love the idea of having a heavy weight premium keyboard that
sounds and feels great to type on, and has some exclusivity to it. I also fell
in love with &lt;a href=&#34;https://geekhack.org/index.php?topic=97810.0&#34;&gt;the Kyuu keyboard&lt;/a&gt;,
but that is ancient history in terms of keyboard group buys having been shipped
way back in 2018.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/kyuu.jpg&#34; alt=&#34;the Kyuu 65% keyboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;So I was lurking over group buys and interest checks and waiting to see if
anything caught my eye enough to want to drop several hundred pounds on it. I
even bought a set of keycaps intended for a keyboard I didn&amp;rsquo;t yet own (the KAT
Lich group buy that I&amp;rsquo;ve mentioned above).&lt;/p&gt;
&lt;p&gt;During this time I stumbled upon &lt;a href=&#34;https://www.reddit.com/r/CustomKeyboards/comments/eoq1u8/a_simple_wedge/&#34;&gt;this Reddit post where a user called vitaport
talks about a personal keyboard that they&amp;rsquo;ve designed and
manufactured&lt;/a&gt;.
Suddenly a bunch of neurons that had been slowly idling suddenly fired up and
connected. All these keyboards are built by individual humans, there&amp;rsquo;s nothing
special about people that run group buys and if you&amp;rsquo;re going to design a
keyboard you don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to run a group buy. You could just do what vitaport
has done and make your own personal keyboard. I have a background in electronic
engineering, and I&amp;rsquo;m a professional software developer, surely I can dredge up
enough memories to put together some circuitry, and it&amp;rsquo;s not beyond me to learn
how to build a keyboard case!&lt;/p&gt;
&lt;p&gt;I was excited.&lt;/p&gt;
&lt;p&gt;Instead of just plonking down a load of cash and receiving a keyboard in the
mail, I would plonk down a load of cash, learn a bunch of new skills and end up
with a keyboard that is truly mine and truly exclusive. This sounded immensely
satisfying to me.&lt;/p&gt;
&lt;p&gt;So I did some digging, and found out that once you scratch the surface of the
mechanical keyboard community, scrape off the layer of drama and flippers and
superficiality, you reach a really solid core. Full of people who are friendly,
helpful and excited to share resources and tips on how to get from a blank peice
of paper to an actual real keyboard that you can type on. There&amp;rsquo;s lots of
overlap with maker culture and a real DIY aesthetic, and I&amp;rsquo;m having loads of
fun.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m doing the project in the open on Github. I had originally wanted the
repository to be self contained and have everything you needed in it to follow
along with the process using the Git history, but unfortunately my discipline
with personal projects isn&amp;rsquo;t quite up to the stringent standards I set for
myself at work, so the history is a mess.&lt;/p&gt;
&lt;p&gt;So I decided to write a series of posts about the journey, to explain how I am
making a custom keyboard. This is part one, a basic introduction to what I&amp;rsquo;m
doing and why. In part 2 I&amp;rsquo;ll talk about how I got started, what the anatomy of
a custom keyboard looks like, and what the first steps were.&lt;/p&gt;
&lt;div class=&#34;centered&#34;&gt;
  &lt;h4&gt;
    &lt;a href=&#34;https://github.com/eightbitraptor/65_keyboard_untitled&#34;&gt;See eightbitraptor&#39;s 65% Untitled Keyboard repository on Github&lt;/a&gt;
  &lt;/h4&gt;
&lt;/div&gt;
</description>
      <content>&lt;p&gt;In my last post about mechanical keyboards, I was getting ready to dip my toe
into the weird and wonderful world of custom ergonomic keyboards. Young and full
of na√Øvete I hadn&amp;rsquo;t fully grasped the depth of the hobby I was about to pick up,
nor quite how tight it would grab me!&lt;/p&gt;
&lt;p&gt;Fast forward a few months, and in addition to owning and using &lt;a href=&#34;https://falba.tech/custom-redox/&#34;&gt;my bamboo
Redox&lt;/a&gt; every day, I&amp;rsquo;ve also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dissassembled it to lubricated all the switches with a locally sourced
alternative to Krytox 205g0 (a very popular grease in &amp;ldquo;the keyboard
community&amp;rdquo;, but expensive and hard to find outside the US);&lt;/li&gt;
&lt;li&gt;Built a 40% ergonomic keyboard (&lt;a href=&#34;https://github.com/foostan/crkbd&#34;&gt;the Crkbd, or Corne
keyboard&lt;/a&gt; an open source project from Japan)&lt;/li&gt;
&lt;li&gt;Joined a keyboard &amp;ldquo;group-buy&amp;rdquo; for a set of &lt;a href=&#34;https://geekhack.org/index.php?topic=104129.0&#34;&gt;limited run custom
keycaps&lt;/a&gt; which I am waiting to
receive&lt;/li&gt;
&lt;li&gt;And I&amp;rsquo;m about 70% of the way towards designing and building my own custom
keyboard from scratch, and it&amp;rsquo;s this project that I want to talk about in the
next few posts.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;centered-image&#39;&gt;
  &lt;img alt=&#34;Boy, that escalated quickly&#34; src=&#34;https://www.eightbitraptor.com/images/escalation.gif&#34;&gt;
&lt;/div&gt;
&lt;p&gt;For something so innocuous and generally overlooked as the keyboard attached to
your computer, the depths some folks go to in search of perfection (or the &amp;ldquo;end
game&amp;rdquo;) are staggering.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve learned an awful lot since I started this adventure. As well as basic
knowledge about keyboards, their history and all the different variations that
exist around the world, I&amp;rsquo;ve also learned how they&amp;rsquo;re made. I&amp;rsquo;ve spent time
writing and customising the source code that runs on my keyboards (contributing
to open source in the process), I&amp;rsquo;ve learned how to use &lt;a href=&#34;&#34;&gt;AutoDesk Fusion 360&lt;/a&gt;
to do 3D modelling and CAD, both for CNC machining purposes and for 3D printing,
I&amp;rsquo;ve also relearned how to design electronics schematics, convert those into
printed circuit board designs and how to manufacture electronics, none of which
I&amp;rsquo;ve had cause to do since finishing my BSc 15 years ago!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/current_keyboards_feb20.jpeg&#34; alt=&#34;My current keyboards&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;background-or-why-am-i-building-a-keyboard&#34;&gt;Background. Or, Why am I building a keyboard&lt;/h2&gt;
&lt;p&gt;There are a few ways in which you can go deep into the mechanical keyboards
hobby, and one of the ways that immediately captured my interest is the high-end
custom keyboard scene. These are keyboards that have been designed from the
ground up by individual people, mostly sold in kit form (so you can customise it
with your own choice of switches and keycaps), manufactured in a small quanitity
out of premium materials, and funded up front in a process called a &amp;ldquo;group buy&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A group buy typically goes like this:&lt;/p&gt;
&lt;p&gt;Someone has an idea for a new keyboard, they put together a design in a cad
package, maybe a few renders and they write a bit about what they want to do.
They post up an &amp;ldquo;Interest check&amp;rdquo;, or IC thread on a keyboard community forum
like Geekhack.&lt;/p&gt;
&lt;p&gt;People comment on the thread, generally expressing interest, intent to buy or
design suggestions. This kicks off an iterative process where the original
designer might incorporate feedback into the idea, or clarify their thinking in
certain ways. At this point either the hype begins, or an idea fizzles out and
dies.&lt;/p&gt;
&lt;p&gt;Assuming the hype train is well and truly picking up steam, the designer will
then start approaching manufacturing companies to try and get an idea of what
the costs for a manufacturing run would be, what the minimum order quantity is
and how that is going to affect the cost. They will probably also order one or
more prototypes at this stage to check the feasibility of the design. The
prototypes will then allow them to refine further to make manufacturing easier
or more cost effective.&lt;/p&gt;
&lt;p&gt;At this point a designer will generally know what the final design is, how it&amp;rsquo;s
going to be manufactured, what all the options are as well as their retail price
and how many they need to sell in order to make that price achievable. They&amp;rsquo;ll
probably also have some accaurate renders of the finished product and maybe a
prototype or two that they can show off. At this point they&amp;rsquo;ll generally start
trying to find &amp;ldquo;proxies&amp;rdquo; to sell their product.&lt;/p&gt;
&lt;p&gt;Because this whole process is not uncommon in the mechanical keyboard world, a
lot of the &lt;a href=&#34;https://novelkeys.xyz/collections/group-buys&#34;&gt;community&lt;/a&gt;
&lt;a href=&#34;https://mykeyboard.eu/catalogue/category/group-buys_20/&#34;&gt;favourite&lt;/a&gt;
&lt;a href=&#34;https://candykeys.com/group-buys&#34;&gt;retailers&lt;/a&gt; will often manage sales of a group
buy product, for a small fee. This is referred to as being a proxy.&lt;/p&gt;
&lt;p&gt;This means that a customer can place an order for the product as they would do
normally for any other in-stock item on that store, but instead of having
something shipped to them immediately, the money is taken and held in escrow by
the proxy. This allows the designer to have confidence that the money is there
and that the group buy customers are committed (typically proxies for group buys
don&amp;rsquo;t allow refunds), and it also gives the customers some security because
they&amp;rsquo;re paying via credit card or paypal to an actual business, rather than
transferring money to some rando on the internet.&lt;/p&gt;
&lt;p&gt;Once the proxies have been set up, then the action happens. The designer posts a
Group Buy (or GB) thread on the same forum where they opened their IC. They post
all the details of the product, as well as the options available, the pricing
scheme and links to the proxies where you can go to place your order, and
they&amp;rsquo;ll typically specify a date that the group buy will &amp;ldquo;open&amp;rdquo; or be available
for purchase.&lt;/p&gt;
&lt;p&gt;Group buy sales typically stay &amp;ldquo;open&amp;rdquo; on the proxies either until a desired
quantity has been purchased, or they stay open for a set time window. This is
another critical point in the lifecycle of a group buy. If not enough units sell
to hit the factory specified MOQ then the group buy dies, the proxies refund the
money to the buyers and the designer goes back to the drawing board.&lt;/p&gt;
&lt;p&gt;A lot of the time, MOQ&amp;rsquo;s are hit quite quickly - for some of the more well known
and respected group buy runners this will be in the order of a few minutes. Once
the MOQ has been hit, the buyer has nothing left to do but wait for their
purchase to arrive. But for the designer, it&amp;rsquo;s crunch time. They&amp;rsquo;ve got to work
with the manufacturing companies to get cases built and finished, PCB&amp;rsquo;s
manufactured and built, and get everything packaged up and shipped to the buyers.&lt;/p&gt;
&lt;p&gt;This process will take months at best, and can often take a lot longer than
expected owing to unforseen manufacturing issues, delays, and quality control
issues (my keyset group buy closed at the end of January 2020, and I will
consider myself lucky if I receive them in July).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/kat_lich_render.jpg&#34; alt=&#34;A very elegant render of the KAT Lich keycap set&#34;&gt;&lt;/p&gt;
&lt;p&gt;All in all it&amp;rsquo;s not uncommon for a group buy to take 12-18 months from initial
interest check to actually receiving a kit that you can build.&lt;/p&gt;
&lt;p&gt;These methods of manufacturing and distribution generally mean that there&amp;rsquo;s a
lot of hype around these keyboards and they&amp;rsquo;re very hard to get. Minimum order
quantities aren&amp;rsquo;t high, GB runs are mostly for &amp;lt; 50 keyboards and because the
interest checks are started so far in advance there is usually a lot of people
fighting for any keyboard that&amp;rsquo;s made it to manufacturing stage.&lt;/p&gt;
&lt;p&gt;The intense design process and small scale means that these keyboards are often
very expensive, most commonly around the $400-$600 USD price bracket once you
take into account various options, shipping and customs charges. So if you can
get one, they&amp;rsquo;re often used a status symbol, and all these factors have
translated into a cut-throat and massively inflated second hand market, where
it&amp;rsquo;s not uncommon to see popular designs changing hands for $2000 USD and
upwards.&lt;/p&gt;
&lt;h2 id=&#34;where-do-i-fit-in&#34;&gt;Where do I fit in&lt;/h2&gt;
&lt;p&gt;I have been following the custom keyboard scene for a while, and I really wanted
to get one. I love the idea of having a heavy weight premium keyboard that
sounds and feels great to type on, and has some exclusivity to it. I also fell
in love with &lt;a href=&#34;https://geekhack.org/index.php?topic=97810.0&#34;&gt;the Kyuu keyboard&lt;/a&gt;,
but that is ancient history in terms of keyboard group buys having been shipped
way back in 2018.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/kyuu.jpg&#34; alt=&#34;the Kyuu 65% keyboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;So I was lurking over group buys and interest checks and waiting to see if
anything caught my eye enough to want to drop several hundred pounds on it. I
even bought a set of keycaps intended for a keyboard I didn&amp;rsquo;t yet own (the KAT
Lich group buy that I&amp;rsquo;ve mentioned above).&lt;/p&gt;
&lt;p&gt;During this time I stumbled upon &lt;a href=&#34;https://www.reddit.com/r/CustomKeyboards/comments/eoq1u8/a_simple_wedge/&#34;&gt;this Reddit post where a user called vitaport
talks about a personal keyboard that they&amp;rsquo;ve designed and
manufactured&lt;/a&gt;.
Suddenly a bunch of neurons that had been slowly idling suddenly fired up and
connected. All these keyboards are built by individual humans, there&amp;rsquo;s nothing
special about people that run group buys and if you&amp;rsquo;re going to design a
keyboard you don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to run a group buy. You could just do what vitaport
has done and make your own personal keyboard. I have a background in electronic
engineering, and I&amp;rsquo;m a professional software developer, surely I can dredge up
enough memories to put together some circuitry, and it&amp;rsquo;s not beyond me to learn
how to build a keyboard case!&lt;/p&gt;
&lt;p&gt;I was excited.&lt;/p&gt;
&lt;p&gt;Instead of just plonking down a load of cash and receiving a keyboard in the
mail, I would plonk down a load of cash, learn a bunch of new skills and end up
with a keyboard that is truly mine and truly exclusive. This sounded immensely
satisfying to me.&lt;/p&gt;
&lt;p&gt;So I did some digging, and found out that once you scratch the surface of the
mechanical keyboard community, scrape off the layer of drama and flippers and
superficiality, you reach a really solid core. Full of people who are friendly,
helpful and excited to share resources and tips on how to get from a blank peice
of paper to an actual real keyboard that you can type on. There&amp;rsquo;s lots of
overlap with maker culture and a real DIY aesthetic, and I&amp;rsquo;m having loads of
fun.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m doing the project in the open on Github. I had originally wanted the
repository to be self contained and have everything you needed in it to follow
along with the process using the Git history, but unfortunately my discipline
with personal projects isn&amp;rsquo;t quite up to the stringent standards I set for
myself at work, so the history is a mess.&lt;/p&gt;
&lt;p&gt;So I decided to write a series of posts about the journey, to explain how I am
making a custom keyboard. This is part one, a basic introduction to what I&amp;rsquo;m
doing and why. In part 2 I&amp;rsquo;ll talk about how I got started, what the anatomy of
a custom keyboard looks like, and what the first steps were.&lt;/p&gt;
&lt;div class=&#34;centered&#34;&gt;
  &lt;h4&gt;
    &lt;a href=&#34;https://github.com/eightbitraptor/65_keyboard_untitled&#34;&gt;See eightbitraptor&#39;s 65% Untitled Keyboard repository on Github&lt;/a&gt;
  &lt;/h4&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>A typing journey, part 1: My first Keyboard¬Æ</title>
      <link>https://www.eightbitraptor.com/2019/10/14/a-typing-journey-part-1-my-first-keyboard/</link>
      <pubDate>Mon, 14 Oct 2019 07:51:46 +0100</pubDate>
      
      <guid>https://www.eightbitraptor.com/2019/10/14/a-typing-journey-part-1-my-first-keyboard/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently I&amp;rsquo;ve been getting some recurring pains in my back and arms. The
forearms, wrists and thumbs particularly, most often noticeable on my left
side. It gets bad enough sometimes that it can prevent me from typing, or
certainly be painful enough to be distracting when I am trying to work.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been almost a year since I started working from home, and I don&amp;rsquo;t think
I&amp;rsquo;ve ever really evaluated the suitability of my workspace for prolonged use.&lt;/p&gt;
&lt;p&gt;At my previous job, which was office based, it was mandatory to have regular
&lt;a href=&#34;https://www.hsl.gov.uk/dse-assessments-and-healthy-working&#34;&gt;Display Screen Equipment (DSE)
assessments&lt;/a&gt;. This
is a questionnaire that you can take, and a series of recommendations to follow
to ensure your workstation is the most ergonomic it can be.&lt;/p&gt;
&lt;p&gt;Not only have I not properly been through this process with my home office, but
I have also noticed that I am sat in front of the computer a lot more now than
I was when I was office based.&lt;/p&gt;
&lt;p&gt;Working fully remotely means that all of my meetings and most of my
conversations take place in front of the computer; and a significant number of
them take place over text based mediums like Slack.&lt;/p&gt;
&lt;p&gt;This all adds up to a situation that&amp;rsquo;s not great for my health: being hunched
over a tiny cramped keyboard at a badly set up workstation for hours on end,
sometimes without regular breaks (if I get distracted and forget).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not in my 20&amp;rsquo;s anymore and I&amp;rsquo;m starting to creak, so fixing this had to
become a priority. I identified three key areas to change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My desk &amp;amp; chair setup (I already have invested in a good chair, so verifying
the setup, and the desk was important to do first).&lt;/li&gt;
&lt;li&gt;My working schedule and taking regular keyboard breaks&lt;/li&gt;
&lt;li&gt;My peripherals: keyboard, mouse etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the interests of brevity I&amp;rsquo;m not going to talk about what I did to address
the first two areas, suffice to say that it made a lot of different to my
overall comfort, particulary to my lower back.&lt;/p&gt;
&lt;p&gt;What I want to talk about now are my attempts to solve the pain in my hands,
wrists, and upper back by changing my keyboard.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;I identified a couple of problems with my posture that seemed to be almost
directly related to the keyboard that I was using.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ulnar deviation: Placing my keyboard in front of me at the distance required
to keep my upper arms vertical and my elbows bent at 90¬∞ required a really
pronounced angle on my wrists that was really really uncomfortable.
Apparently I have long forearms which makes this even more pronounced.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrist Pronation: I was using a flat keyboard and so my hands were palm down
almost all the time. I know it&amp;rsquo;s possible for people to type comfortably with
wrist pronation, but for some reason - possibly the amount of time I spend
typing in combination with the other issues, meant that this position was
causing real pain in my elbows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upper back pain: Not entirely sure why this is happening, but reading a lot
of ergonomics documentation leads me to believe that because of the length of
my forearms, my hands (when they were at their typing position on the
keyboard) required my arms to be at an obtuse angle - which was causing my
shoulders to pull inwards, stretching out my upper back, instead of being
straight and having a relaxed back. I don&amp;rsquo;t know if this is a proper reliable
medical assessment, but it&amp;rsquo;s consistent with the pain that I have, and ways
in which I can address it. So it seems like it will be worth experimenting
with.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thankfully I don&amp;rsquo;t really suffer from problems related to wrist extension that
much, because I generally don&amp;rsquo;t wrest my wrist on the table when I type,
preferring a position where my hand sort of floats above the keyboard, this
allows me to keep my wrist straight in relation to the position of my hands.&lt;/p&gt;
&lt;h2 id=&#34;solution-attempt-1&#34;&gt;Solution attempt #1&lt;/h2&gt;
&lt;p&gt;Solution 1 was to start researching ergonomic keyboards, disappear down a
rabbit hole for over a month, get to a point where I&amp;rsquo;m researching soldering
station and PCB fabrication methods - realise that this was silly and that my
pain were getting worse by the day, and just order a Microsoft Sculpt Ergonomic
desktop set.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/accessories/en-gb/products/keyboards/sculpt-ergonomic-desktop/l5v-00006&#34;&gt;&lt;img src=&#34;https://images.idgesg.net/images/article/2018/11/microsoft-sculpt-ergonomic-keyboard-numeric-keypad-mouse1-100780774-large.jpg&#34; alt=&#34;The Microsoft Sculpt Ergonomic&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had one of these at a previous workplace, so I knew what I was getting. This
is an excellent keyboard and I really like it. I&amp;rsquo;ve been using it for a few
weeks now and it&amp;rsquo;s definitely made a difference. Even just the slight tilt on
the board has been enough to alleviate most of the elbow pain I&amp;rsquo;ve been
struggling with, and the split in the keyboard has reduced the angle at which
my wrists need to bend considerably, but nowhere near enough to eliminate the
ulnar deviation and the tendon pain associated with that.&lt;/p&gt;
&lt;p&gt;Because the keyboard still has to be positioned in front of me, it&amp;rsquo;s also done
nothing for the obtuse angle in my arms, which means my upper back is still
just as painful as before after a long day at work.&lt;/p&gt;
&lt;p&gt;I also found that this keyboard actually ended up making the pain in my thumbs
worse. I put this down to the position of the modifier keys I used most often
being in positions that required me to tuck my thumb almost fully underneath my
hand. I think this is exacerbated compared to a regular board due to the tilt
that my hands are at, and the oversized space bar.&lt;/p&gt;
&lt;p&gt;So whilst it&amp;rsquo;s much better than a traditional straight board - It hasn&amp;rsquo;t
entirely managed to make typing a completely comfortable experience for me.&lt;/p&gt;
&lt;p&gt;And off I went back into the world of custom ergonomic keyboards, although at
least this time I&amp;rsquo;m armed with another data point of things that do provide
definite benefit, and a keyboard that isn&amp;rsquo;t pure hell to type on.&lt;/p&gt;
&lt;h2 id=&#34;solution-attempt-2&#34;&gt;Solution Attempt #2&lt;/h2&gt;
&lt;p&gt;And so here we are, up to the current day. After much research, and soul
searching I have ordered myself a keyboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mattdibi/redox-keyboard/master/img/redox-1.jpg&#34; alt=&#34;The Redox open hardware keyboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s called the &lt;a href=&#34;https://github.com/mattdibi/redox-keyboard&#34;&gt;Redox keyboard&lt;/a&gt;, a
fully open source, split ergonomic keyboard, with columnar stagger. It&amp;rsquo;s based
around the &lt;a href=&#34;https://www.ergodox.io/&#34;&gt;ErgoDox keyboard&lt;/a&gt; but with the size slightly reduced and the
thumb clusters redesigned to be more ergonomic.&lt;/p&gt;
&lt;p&gt;Mine has different keycaps to the one in the picture - I&amp;rsquo;m not quite brave
enough for blank caps, especially on a board with such a different layout to
what I&amp;rsquo;m used to, so I&amp;rsquo;ve gone for some low contrast light coloured caps on the
alphanumerics, with blank black modifiers.&lt;/p&gt;
&lt;p&gt;It runs
custom firmware called QMK, which means it&amp;rsquo;s 100% configurable and because all
the schematics and design documentation is open source, if I need to modify it
or fix it in any way then I can.&lt;/p&gt;
&lt;p&gt;The Redox is available in a bunch of places, but I purchased mine pre-assembled
from &lt;a href=&#34;https://falba.tech/&#34;&gt;Falba.tech in Poland&lt;/a&gt;. The website is slightly
janky, but the guy that runs it was one of the first people in Europe to
provide custom CNC&amp;rsquo;d ErgoDox cases back in the day, and he&amp;rsquo;s got history with
Geekhack and the other keyboard forums so he knows what he&amp;rsquo;s up to (I hope. My
keyboard has not actually arrived yet).&lt;/p&gt;
&lt;p&gt;The order process is really nice, you get to choose pretty much all aspects of
what you want to order. I ordered the custom Bamboo case, with the tilt kit (a
set of four legs that attach to the board, allowing a wide variety of tenting
potential), with Cherry MX Brown switches (I contemplated going with the
hot-swap kit, or something a bit different like Kailh Box switches, but my lack
of confidence in the reliability of these options, and my familiarity with
Cherry led me back to the tried and tested MX Browns).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://falba.tech/wp-content/uploads/2018/04/Redox_tilt_1.jpg&#34; alt=&#34;The Redox Bamboo, with tent kit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Anyway. I&amp;rsquo;m excited to see how this goes. I&amp;rsquo;m planning to write more about the
actual hardware and software when the keyboard arrives, so if this is
interesting to you, there&amp;rsquo;s &lt;a href=&#34;https://www.eightbitraptor.com/index.xml&#34;&gt;an RSS feed
here&lt;/a&gt; and thanks for reading.&lt;/p&gt;
&lt;h2 id=&#34;so-why-didnt-you-buy-a-kinesis-advantage&#34;&gt;So why didn&amp;rsquo;t you buy a Kinesis Advantage?&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a bunch of keyboards I could have ordered. Ultimately my decision was
swayed by a combination of features would best alleviate my issues, whether the
hardware/software was open, whether I could order it from the EU for a
reasonable price (avoiding VAT/customs from the USA or China for instance).&lt;/p&gt;
&lt;p&gt;But I want to address the Advantage directly as it kept coming up when I was
speaking with people for advice. I think the Kinesis advantage looks really
interesting, and one feature that I really wish I had on my new keyboard was
the scooped keywells. But when I was assessing what kind of problems I was
having and what the best way to solve them would be, I realised that I don&amp;rsquo;t
actually have any pain in my fingers per se. So I wasn&amp;rsquo;t convinced that having
scooped keywells and an ortholinear layout would actually be as beneficial to
me as the other features I was looking at (I&amp;rsquo;ve also seen a small amount of
compelling reasoning that having keys arranged in a vertical columnar stagger
as the ErgoDox/Redox do provides almost the same benefits as a scooped keywell
anyway, although I haven&amp;rsquo;t been able to verify this with actual research).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kinesis-ergo.com/shop/advantage2/&#34;&gt;&lt;img src=&#34;https://kinesis-ergo.com/wp-content/uploads/kb600lf-angled-.jpg&#34; alt=&#34;The Kinesis Advantage&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The kinesis shares a couple of similarities with the Microsoft Sculpt that I&amp;rsquo;m
currently using, that made me reluctant to buy one. Firstly it&amp;rsquo;s split layout
is fixed, so I can&amp;rsquo;t place the sides in a different position to open out my
chest and alleviate my upper back pain, and secondly the tenting position is
fixed, which means I&amp;rsquo;m unable to change the angle of incline to try and make my
elbows hurt less.&lt;/p&gt;
&lt;p&gt;Also, the Advantage is very expensive - especially if you&amp;rsquo;re in the UK, at $349
direct from the USA, which including customs fees etc would work out to ~¬£350
which is ¬£50 more than even the priciest custom keyboard I was looking at. I&amp;rsquo;m
too lazy and impatient to wait on the availability and reliability crapshoot
that is eBay.&lt;/p&gt;
&lt;p&gt;Who knows, if I decide the staggar is actually a missing killer feature from my
new board, then maybe my next board will be a &lt;a href=&#34;https://github.com/abstracthat/dactyl-manuform&#34;&gt;Dactyl
manuform&lt;/a&gt; - if I&amp;rsquo;m brave enough
to hand-wire it!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.beekeeb.com/dactyl-manuform-mini-mechanical-keyboard-build-log/&#34;&gt;&lt;img src=&#34;https://www.beekeeb.com/assets/images/dactyl-manuform-mini/keyboard.jpg&#34; alt=&#34;Dactyl Manudorm&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently I&amp;rsquo;ve been getting some recurring pains in my back and arms. The
forearms, wrists and thumbs particularly, most often noticeable on my left
side. It gets bad enough sometimes that it can prevent me from typing, or
certainly be painful enough to be distracting when I am trying to work.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been almost a year since I started working from home, and I don&amp;rsquo;t think
I&amp;rsquo;ve ever really evaluated the suitability of my workspace for prolonged use.&lt;/p&gt;
&lt;p&gt;At my previous job, which was office based, it was mandatory to have regular
&lt;a href=&#34;https://www.hsl.gov.uk/dse-assessments-and-healthy-working&#34;&gt;Display Screen Equipment (DSE)
assessments&lt;/a&gt;. This
is a questionnaire that you can take, and a series of recommendations to follow
to ensure your workstation is the most ergonomic it can be.&lt;/p&gt;
&lt;p&gt;Not only have I not properly been through this process with my home office, but
I have also noticed that I am sat in front of the computer a lot more now than
I was when I was office based.&lt;/p&gt;
&lt;p&gt;Working fully remotely means that all of my meetings and most of my
conversations take place in front of the computer; and a significant number of
them take place over text based mediums like Slack.&lt;/p&gt;
&lt;p&gt;This all adds up to a situation that&amp;rsquo;s not great for my health: being hunched
over a tiny cramped keyboard at a badly set up workstation for hours on end,
sometimes without regular breaks (if I get distracted and forget).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not in my 20&amp;rsquo;s anymore and I&amp;rsquo;m starting to creak, so fixing this had to
become a priority. I identified three key areas to change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My desk &amp;amp; chair setup (I already have invested in a good chair, so verifying
the setup, and the desk was important to do first).&lt;/li&gt;
&lt;li&gt;My working schedule and taking regular keyboard breaks&lt;/li&gt;
&lt;li&gt;My peripherals: keyboard, mouse etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the interests of brevity I&amp;rsquo;m not going to talk about what I did to address
the first two areas, suffice to say that it made a lot of different to my
overall comfort, particulary to my lower back.&lt;/p&gt;
&lt;p&gt;What I want to talk about now are my attempts to solve the pain in my hands,
wrists, and upper back by changing my keyboard.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;I identified a couple of problems with my posture that seemed to be almost
directly related to the keyboard that I was using.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ulnar deviation: Placing my keyboard in front of me at the distance required
to keep my upper arms vertical and my elbows bent at 90¬∞ required a really
pronounced angle on my wrists that was really really uncomfortable.
Apparently I have long forearms which makes this even more pronounced.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrist Pronation: I was using a flat keyboard and so my hands were palm down
almost all the time. I know it&amp;rsquo;s possible for people to type comfortably with
wrist pronation, but for some reason - possibly the amount of time I spend
typing in combination with the other issues, meant that this position was
causing real pain in my elbows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upper back pain: Not entirely sure why this is happening, but reading a lot
of ergonomics documentation leads me to believe that because of the length of
my forearms, my hands (when they were at their typing position on the
keyboard) required my arms to be at an obtuse angle - which was causing my
shoulders to pull inwards, stretching out my upper back, instead of being
straight and having a relaxed back. I don&amp;rsquo;t know if this is a proper reliable
medical assessment, but it&amp;rsquo;s consistent with the pain that I have, and ways
in which I can address it. So it seems like it will be worth experimenting
with.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thankfully I don&amp;rsquo;t really suffer from problems related to wrist extension that
much, because I generally don&amp;rsquo;t wrest my wrist on the table when I type,
preferring a position where my hand sort of floats above the keyboard, this
allows me to keep my wrist straight in relation to the position of my hands.&lt;/p&gt;
&lt;h2 id=&#34;solution-attempt-1&#34;&gt;Solution attempt #1&lt;/h2&gt;
&lt;p&gt;Solution 1 was to start researching ergonomic keyboards, disappear down a
rabbit hole for over a month, get to a point where I&amp;rsquo;m researching soldering
station and PCB fabrication methods - realise that this was silly and that my
pain were getting worse by the day, and just order a Microsoft Sculpt Ergonomic
desktop set.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/accessories/en-gb/products/keyboards/sculpt-ergonomic-desktop/l5v-00006&#34;&gt;&lt;img src=&#34;https://images.idgesg.net/images/article/2018/11/microsoft-sculpt-ergonomic-keyboard-numeric-keypad-mouse1-100780774-large.jpg&#34; alt=&#34;The Microsoft Sculpt Ergonomic&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had one of these at a previous workplace, so I knew what I was getting. This
is an excellent keyboard and I really like it. I&amp;rsquo;ve been using it for a few
weeks now and it&amp;rsquo;s definitely made a difference. Even just the slight tilt on
the board has been enough to alleviate most of the elbow pain I&amp;rsquo;ve been
struggling with, and the split in the keyboard has reduced the angle at which
my wrists need to bend considerably, but nowhere near enough to eliminate the
ulnar deviation and the tendon pain associated with that.&lt;/p&gt;
&lt;p&gt;Because the keyboard still has to be positioned in front of me, it&amp;rsquo;s also done
nothing for the obtuse angle in my arms, which means my upper back is still
just as painful as before after a long day at work.&lt;/p&gt;
&lt;p&gt;I also found that this keyboard actually ended up making the pain in my thumbs
worse. I put this down to the position of the modifier keys I used most often
being in positions that required me to tuck my thumb almost fully underneath my
hand. I think this is exacerbated compared to a regular board due to the tilt
that my hands are at, and the oversized space bar.&lt;/p&gt;
&lt;p&gt;So whilst it&amp;rsquo;s much better than a traditional straight board - It hasn&amp;rsquo;t
entirely managed to make typing a completely comfortable experience for me.&lt;/p&gt;
&lt;p&gt;And off I went back into the world of custom ergonomic keyboards, although at
least this time I&amp;rsquo;m armed with another data point of things that do provide
definite benefit, and a keyboard that isn&amp;rsquo;t pure hell to type on.&lt;/p&gt;
&lt;h2 id=&#34;solution-attempt-2&#34;&gt;Solution Attempt #2&lt;/h2&gt;
&lt;p&gt;And so here we are, up to the current day. After much research, and soul
searching I have ordered myself a keyboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mattdibi/redox-keyboard/master/img/redox-1.jpg&#34; alt=&#34;The Redox open hardware keyboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s called the &lt;a href=&#34;https://github.com/mattdibi/redox-keyboard&#34;&gt;Redox keyboard&lt;/a&gt;, a
fully open source, split ergonomic keyboard, with columnar stagger. It&amp;rsquo;s based
around the &lt;a href=&#34;https://www.ergodox.io/&#34;&gt;ErgoDox keyboard&lt;/a&gt; but with the size slightly reduced and the
thumb clusters redesigned to be more ergonomic.&lt;/p&gt;
&lt;p&gt;Mine has different keycaps to the one in the picture - I&amp;rsquo;m not quite brave
enough for blank caps, especially on a board with such a different layout to
what I&amp;rsquo;m used to, so I&amp;rsquo;ve gone for some low contrast light coloured caps on the
alphanumerics, with blank black modifiers.&lt;/p&gt;
&lt;p&gt;It runs
custom firmware called QMK, which means it&amp;rsquo;s 100% configurable and because all
the schematics and design documentation is open source, if I need to modify it
or fix it in any way then I can.&lt;/p&gt;
&lt;p&gt;The Redox is available in a bunch of places, but I purchased mine pre-assembled
from &lt;a href=&#34;https://falba.tech/&#34;&gt;Falba.tech in Poland&lt;/a&gt;. The website is slightly
janky, but the guy that runs it was one of the first people in Europe to
provide custom CNC&amp;rsquo;d ErgoDox cases back in the day, and he&amp;rsquo;s got history with
Geekhack and the other keyboard forums so he knows what he&amp;rsquo;s up to (I hope. My
keyboard has not actually arrived yet).&lt;/p&gt;
&lt;p&gt;The order process is really nice, you get to choose pretty much all aspects of
what you want to order. I ordered the custom Bamboo case, with the tilt kit (a
set of four legs that attach to the board, allowing a wide variety of tenting
potential), with Cherry MX Brown switches (I contemplated going with the
hot-swap kit, or something a bit different like Kailh Box switches, but my lack
of confidence in the reliability of these options, and my familiarity with
Cherry led me back to the tried and tested MX Browns).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://falba.tech/wp-content/uploads/2018/04/Redox_tilt_1.jpg&#34; alt=&#34;The Redox Bamboo, with tent kit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Anyway. I&amp;rsquo;m excited to see how this goes. I&amp;rsquo;m planning to write more about the
actual hardware and software when the keyboard arrives, so if this is
interesting to you, there&amp;rsquo;s &lt;a href=&#34;https://www.eightbitraptor.com/index.xml&#34;&gt;an RSS feed
here&lt;/a&gt; and thanks for reading.&lt;/p&gt;
&lt;h2 id=&#34;so-why-didnt-you-buy-a-kinesis-advantage&#34;&gt;So why didn&amp;rsquo;t you buy a Kinesis Advantage?&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a bunch of keyboards I could have ordered. Ultimately my decision was
swayed by a combination of features would best alleviate my issues, whether the
hardware/software was open, whether I could order it from the EU for a
reasonable price (avoiding VAT/customs from the USA or China for instance).&lt;/p&gt;
&lt;p&gt;But I want to address the Advantage directly as it kept coming up when I was
speaking with people for advice. I think the Kinesis advantage looks really
interesting, and one feature that I really wish I had on my new keyboard was
the scooped keywells. But when I was assessing what kind of problems I was
having and what the best way to solve them would be, I realised that I don&amp;rsquo;t
actually have any pain in my fingers per se. So I wasn&amp;rsquo;t convinced that having
scooped keywells and an ortholinear layout would actually be as beneficial to
me as the other features I was looking at (I&amp;rsquo;ve also seen a small amount of
compelling reasoning that having keys arranged in a vertical columnar stagger
as the ErgoDox/Redox do provides almost the same benefits as a scooped keywell
anyway, although I haven&amp;rsquo;t been able to verify this with actual research).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kinesis-ergo.com/shop/advantage2/&#34;&gt;&lt;img src=&#34;https://kinesis-ergo.com/wp-content/uploads/kb600lf-angled-.jpg&#34; alt=&#34;The Kinesis Advantage&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The kinesis shares a couple of similarities with the Microsoft Sculpt that I&amp;rsquo;m
currently using, that made me reluctant to buy one. Firstly it&amp;rsquo;s split layout
is fixed, so I can&amp;rsquo;t place the sides in a different position to open out my
chest and alleviate my upper back pain, and secondly the tenting position is
fixed, which means I&amp;rsquo;m unable to change the angle of incline to try and make my
elbows hurt less.&lt;/p&gt;
&lt;p&gt;Also, the Advantage is very expensive - especially if you&amp;rsquo;re in the UK, at $349
direct from the USA, which including customs fees etc would work out to ~¬£350
which is ¬£50 more than even the priciest custom keyboard I was looking at. I&amp;rsquo;m
too lazy and impatient to wait on the availability and reliability crapshoot
that is eBay.&lt;/p&gt;
&lt;p&gt;Who knows, if I decide the staggar is actually a missing killer feature from my
new board, then maybe my next board will be a &lt;a href=&#34;https://github.com/abstracthat/dactyl-manuform&#34;&gt;Dactyl
manuform&lt;/a&gt; - if I&amp;rsquo;m brave enough
to hand-wire it!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.beekeeb.com/dactyl-manuform-mini-mechanical-keyboard-build-log/&#34;&gt;&lt;img src=&#34;https://www.beekeeb.com/assets/images/dactyl-manuform-mini/keyboard.jpg&#34; alt=&#34;Dactyl Manudorm&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Whats in My Bag: Coffee Shop Edition</title>
      <link>https://www.eightbitraptor.com/2019/09/25/whats-in-my-bag-coffee-shop-edition/</link>
      <pubDate>Wed, 25 Sep 2019 12:08:31 +0100</pubDate>
      
      <guid>https://www.eightbitraptor.com/2019/09/25/whats-in-my-bag-coffee-shop-edition/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/edc_coffee_shop.jpg&#34; alt=&#34;The contents of my backpack when working away from home&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Every Day Carry (EDC) community is an internet subculture that seems to have originated with firearms enthusiasts in the USA and has slowly been spreading out to the rest of the internet. There&amp;rsquo;s a &lt;a href=&#34;https://www.reddit.com/r/EDC&#34;&gt;dedicated subreddit&lt;/a&gt;, a &lt;a href=&#34;https://everydaycarry.com/&#34;&gt;lifestyle blog&lt;/a&gt;, and &lt;a href=&#34;https://www.vox.com/the-goods/2019/7/24/20696487/everyday-carry-reddit-knife-wallet-gun&#34;&gt;Vox have even written articles about it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic premise is to think, reflect and iterate on the items that people carry in their pockets, handbags or rucksacks to optimise them for the tasks which will occupy most of the day; often with an alternative motive of showing off the shiny things in the most photogenic way possible!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not involved in the EDC community in any real way - it&amp;rsquo;s fun to look at the pretty pictures occasionally. I do get a bit nerdy about a lot of things, but the particular section of EDC I&amp;rsquo;ve always found the most interesting is the sub-group of tech people who post the contents of their backpacks.&lt;/p&gt;
&lt;p&gt;I find it interesting to see what equipment, gadgets and tools that people with similar interests to me value enough to carry with them every day. It fascinates me in the same way that the &lt;a href=&#34;https://usesthis.com/&#34;&gt;delightfully nerdy Uses This interviews&lt;/a&gt; do. I&amp;rsquo;ve definitely used both EDC write-ups and Uses This interviews to help research purchases in the past!&lt;/p&gt;
&lt;p&gt;I work from home full time, so my work bag doesn&amp;rsquo;t get that much use, but I do like to spend one day a week working from the coffee shops in the town where I live. It gets me out of the house, and it gives me an excuse to spend some time thinking about what&amp;rsquo;s in my bag and how useful it&amp;rsquo;s going to be for working away from home.&lt;/p&gt;
&lt;p&gt;The photo above was taken as I was pulling everything together ready for a day in town. If we&amp;rsquo;re being picky it&amp;rsquo;s not a &lt;em&gt;true&lt;/em&gt; EDC photo as I didn&amp;rsquo;t show &lt;em&gt;everything&lt;/em&gt; that I took with me, but I was taking the photo with my phone, and my keys and wallet aren&amp;rsquo;t very interesting!&lt;/p&gt;
&lt;p&gt;So, what is all that stuff in the photo? Iterating clockwise from the top left we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://support.apple.com/kb/SP776?locale=en_GB&#34;&gt;&lt;strong&gt;15&amp;quot; 2018 MacBook Pro&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
This is my work computer and I absolutely detest it. I can&amp;rsquo;t believe how far the quality of MacBook Pro&amp;rsquo;s has fallen since the 2015 model which was one of the nicest computers I&amp;rsquo;ve ever had the pleasure to use! This one has a creaky hinge, garbage battery life and an atrocious keyboard - I have to run &lt;a href=&#34;https://github.com/aahung/Unshaky&#34;&gt;Unshakey&lt;/a&gt; with a debounce delay of 60ms to even passably type successfully on this machine. On the plus side the screen is lovely and for 4 days a week it&amp;rsquo;s on a desk attached to an ergonomic keyboard and a couple of monitors anyway, so it&amp;rsquo;s livable with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://headfonics.com/2016/10/the-x1-2nd-gen-dap-by-fiio/&#34;&gt;&lt;strong&gt;Fiio X1 2nd Gen Digital Audio Player&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
This was an impulse buy on eBay after getting frustrated with the difficulty of getting music onto an iPhone from Linux. It was super cheap and it could use a slightly faster chip as the interface is a bit laggy sometimes, but it&amp;rsquo;s otherwise a really solidly built DAP. I rip all my music from CD to flac using a tool called &lt;a href=&#34;https://abcde.einval.com/wiki/&#34;&gt;&lt;code&gt;abcde&lt;/code&gt;&lt;/a&gt; and occasionally I use &lt;code&gt;rsync&lt;/code&gt; to transfer my music library to the 256GB SD card that lives in the Fiio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;My current book&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I just started reading &lt;a href=&#34;https://www.theguardian.com/global/2013/mar/20/save-everything-evgeny-morozov-review&#34;&gt;Evgeny Morosov&amp;rsquo;s To Save Everything Click Here&lt;/a&gt; this morning so I don&amp;rsquo;t have a whole lot to say about it yet.
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I wouldn&amp;rsquo;t normally carry actual dead tree fiction with me as it takes up a lot of space and I find fiction perfectly acceptable to read in digital forms. When I carry books they&amp;rsquo;re more likely to be technical books, as code rarely translates well to ebooks, and I can scribble in the margins.
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I found this book in a charity shop for ¬£1.99 recently and it piqued my interest enough to want to carry it about.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.muji.eu/pages/online.asp?lan=uk&amp;amp;ShopSel=y&amp;amp;sec=12&amp;amp;sub=49&amp;amp;pid=8451&#34;&gt;&lt;strong&gt;Muji Recycled Paper Notebook&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
These notebooks are amazing, they&amp;rsquo;re super cheap, a really good size with lots of pages, a strong binding and a bookmark - they have a lovely heft and weight, and the floppy covers are perfect, they feel great and behave really well when they&amp;rsquo;re open on a table! Also the paper is recycled and takes a fountain pen really well (significantly better than well known notebooks that are 3x the price). The only thing that bugs me slightly is the design decision to rough cut the top of the notebook, but that&amp;rsquo;s just an aesthetic thing, and the positives well outweigh it for me.
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I don&amp;rsquo;t write a huge amount of notes so this one is really old, coffee stained, battered, full of scribbles and post-its yet it keeps going, and the binding is still perfect!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.expertreviews.co.uk/tvs-entertainment/headphones/53244/sony-mdr-10rc-review&#34;&gt;&lt;strong&gt;Sony MDR-10RC Headphones&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
A reasonanly nice set of headphones! They sound nice, and the ear pads are comfy, but they don&amp;rsquo;t stay on my head very well, so it&amp;rsquo;s basically impossible to walk in them and I need to be careful not to whip my head around too quickly! However they were cheap when I bought them and they have a removable non-proprietary cable which has been useful a few times now.
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I don&amp;rsquo;t like replacing things for no reason so I&amp;rsquo;ll use these until they die and then I&amp;rsquo;ll probably replace them with some reasonable quality Bluetooth headphones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cables&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I wish I could avoid taking a MacBook charger with me everywhere, but I can&amp;rsquo;t because my laptop is terrible and it would be dead by lunchtime otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1TB Hard Drive&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
Nothing particulaly special or interesting, not even sure why I carry this around except that it feels useful to have some storage on me sometimes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.baggu.com&#34;&gt;&lt;strong&gt;Baggu foldable, reusable tote bag&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
Love this, it folds up small, is lightweight, but also way bigger than it feels like it should be and holds a lot, also mine is Shopify branded which makes me happy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pens&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I carry two pens with me most days, a &lt;a href=&#34;https://www.jetpens.com/Lamy-Al-Star-Fountain-Pen-Fine-Nib-Ruby-Red-Body-Limited-Edition/pd/8122&#34;&gt;a Ruby Red Lamy Al-Star fountain pen&lt;/a&gt;, that I&amp;rsquo;ve put a fine black nib in. It looks cool, has Ruby in the name and is lovely to write with!
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
The other pen is one I bought when I started work at Shopify because I knew I&amp;rsquo;d be flying to Canada and back periodically and flying with fountain pens can be a messy business. It&amp;rsquo;s a &lt;a href=&#34;https://www.cultpens.com/i/q/ZB57201/zebra-f-xmd-stainless-steel-ballpoint-pen&#34;&gt;Zebra f-XMD&lt;/a&gt; that I&amp;rsquo;ve slightly modified in order to fit a Fisher space pen refill. It&amp;rsquo;s super reliable and really nice to hold I actually find myself using this one more than my fountain pen!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;USB adapters&lt;/strong&gt;&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
Have to carry these as my HDD, DAP and Phone are all USB-A and my laptop just has USB-C&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Glasses case&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;Nothing special here - I always carry a glasses case containing a small bottle of lens cleaner and a lint-free lens cloth. Handy for screens and electronics as well as glasses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gaiam.com/collections/hydration/products/stainless-steel-wide-mouth-water-bottle-18oz?variant=36474068289&#34;&gt;&lt;strong&gt;GAIAM 18oz water bottle&lt;/strong&gt;&lt;/a&gt;&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
Wide mouthed and double walled, so good for keeping water cool or tea hot! Also good for soup because of the wide mouth! I fill this with Sencha in the morning and when I&amp;rsquo;ve finished that I refill it with water during the day. I really like this bottle, it looks nice and is pleasant to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Nexus_7_(2013)&#34;&gt;&lt;strong&gt;2013 Nexus 7 tablet 32Gb&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;In a &lt;a href=&#34;https://www.amazon.co.uk/MoKo-Google-Nexus-2013-Case/dp/B00CKA1IYU&#34;&gt;Moko case&lt;/a&gt; which came with the tablet when I bought it on eBay and I&amp;rsquo;ve kept it because it&amp;rsquo;s really nice.&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;I can, and will, write about this tablet seperately I&amp;rsquo;ve set it up as a dumb media device and I&amp;rsquo;m pretty pleased with the result. I bought it specifically for this purpose despite its age because it has such a good screen, the high DPI combined with a 7&amp;quot; form factor makes it perfect for reading Manga! &lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
It&amp;rsquo;s running a custom stripped down version of Android with all the radios disabled, it never touches the internet, has no Google, only a handful of apps (all of which have been sideloaded), and a stripped down homescreen.&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
It is configured to do only 3 things: read manga, read ebooks, and watch video. All content is pushed directly to the device from my computer using ADB and a collection of scripts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&amp;rsquo;s it. If you&amp;rsquo;ve made it this far I hope the contents of my bag have been somewhat interesting, and worth the last few minutes of your time!&lt;/p&gt;
</description>
      <content>&lt;p&gt;&lt;img src=&#34;https://www.eightbitraptor.com/images/edc_coffee_shop.jpg&#34; alt=&#34;The contents of my backpack when working away from home&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Every Day Carry (EDC) community is an internet subculture that seems to have originated with firearms enthusiasts in the USA and has slowly been spreading out to the rest of the internet. There&amp;rsquo;s a &lt;a href=&#34;https://www.reddit.com/r/EDC&#34;&gt;dedicated subreddit&lt;/a&gt;, a &lt;a href=&#34;https://everydaycarry.com/&#34;&gt;lifestyle blog&lt;/a&gt;, and &lt;a href=&#34;https://www.vox.com/the-goods/2019/7/24/20696487/everyday-carry-reddit-knife-wallet-gun&#34;&gt;Vox have even written articles about it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic premise is to think, reflect and iterate on the items that people carry in their pockets, handbags or rucksacks to optimise them for the tasks which will occupy most of the day; often with an alternative motive of showing off the shiny things in the most photogenic way possible!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not involved in the EDC community in any real way - it&amp;rsquo;s fun to look at the pretty pictures occasionally. I do get a bit nerdy about a lot of things, but the particular section of EDC I&amp;rsquo;ve always found the most interesting is the sub-group of tech people who post the contents of their backpacks.&lt;/p&gt;
&lt;p&gt;I find it interesting to see what equipment, gadgets and tools that people with similar interests to me value enough to carry with them every day. It fascinates me in the same way that the &lt;a href=&#34;https://usesthis.com/&#34;&gt;delightfully nerdy Uses This interviews&lt;/a&gt; do. I&amp;rsquo;ve definitely used both EDC write-ups and Uses This interviews to help research purchases in the past!&lt;/p&gt;
&lt;p&gt;I work from home full time, so my work bag doesn&amp;rsquo;t get that much use, but I do like to spend one day a week working from the coffee shops in the town where I live. It gets me out of the house, and it gives me an excuse to spend some time thinking about what&amp;rsquo;s in my bag and how useful it&amp;rsquo;s going to be for working away from home.&lt;/p&gt;
&lt;p&gt;The photo above was taken as I was pulling everything together ready for a day in town. If we&amp;rsquo;re being picky it&amp;rsquo;s not a &lt;em&gt;true&lt;/em&gt; EDC photo as I didn&amp;rsquo;t show &lt;em&gt;everything&lt;/em&gt; that I took with me, but I was taking the photo with my phone, and my keys and wallet aren&amp;rsquo;t very interesting!&lt;/p&gt;
&lt;p&gt;So, what is all that stuff in the photo? Iterating clockwise from the top left we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://support.apple.com/kb/SP776?locale=en_GB&#34;&gt;&lt;strong&gt;15&amp;quot; 2018 MacBook Pro&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
This is my work computer and I absolutely detest it. I can&amp;rsquo;t believe how far the quality of MacBook Pro&amp;rsquo;s has fallen since the 2015 model which was one of the nicest computers I&amp;rsquo;ve ever had the pleasure to use! This one has a creaky hinge, garbage battery life and an atrocious keyboard - I have to run &lt;a href=&#34;https://github.com/aahung/Unshaky&#34;&gt;Unshakey&lt;/a&gt; with a debounce delay of 60ms to even passably type successfully on this machine. On the plus side the screen is lovely and for 4 days a week it&amp;rsquo;s on a desk attached to an ergonomic keyboard and a couple of monitors anyway, so it&amp;rsquo;s livable with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://headfonics.com/2016/10/the-x1-2nd-gen-dap-by-fiio/&#34;&gt;&lt;strong&gt;Fiio X1 2nd Gen Digital Audio Player&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
This was an impulse buy on eBay after getting frustrated with the difficulty of getting music onto an iPhone from Linux. It was super cheap and it could use a slightly faster chip as the interface is a bit laggy sometimes, but it&amp;rsquo;s otherwise a really solidly built DAP. I rip all my music from CD to flac using a tool called &lt;a href=&#34;https://abcde.einval.com/wiki/&#34;&gt;&lt;code&gt;abcde&lt;/code&gt;&lt;/a&gt; and occasionally I use &lt;code&gt;rsync&lt;/code&gt; to transfer my music library to the 256GB SD card that lives in the Fiio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;My current book&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I just started reading &lt;a href=&#34;https://www.theguardian.com/global/2013/mar/20/save-everything-evgeny-morozov-review&#34;&gt;Evgeny Morosov&amp;rsquo;s To Save Everything Click Here&lt;/a&gt; this morning so I don&amp;rsquo;t have a whole lot to say about it yet.
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I wouldn&amp;rsquo;t normally carry actual dead tree fiction with me as it takes up a lot of space and I find fiction perfectly acceptable to read in digital forms. When I carry books they&amp;rsquo;re more likely to be technical books, as code rarely translates well to ebooks, and I can scribble in the margins.
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I found this book in a charity shop for ¬£1.99 recently and it piqued my interest enough to want to carry it about.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.muji.eu/pages/online.asp?lan=uk&amp;amp;ShopSel=y&amp;amp;sec=12&amp;amp;sub=49&amp;amp;pid=8451&#34;&gt;&lt;strong&gt;Muji Recycled Paper Notebook&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
These notebooks are amazing, they&amp;rsquo;re super cheap, a really good size with lots of pages, a strong binding and a bookmark - they have a lovely heft and weight, and the floppy covers are perfect, they feel great and behave really well when they&amp;rsquo;re open on a table! Also the paper is recycled and takes a fountain pen really well (significantly better than well known notebooks that are 3x the price). The only thing that bugs me slightly is the design decision to rough cut the top of the notebook, but that&amp;rsquo;s just an aesthetic thing, and the positives well outweigh it for me.
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I don&amp;rsquo;t write a huge amount of notes so this one is really old, coffee stained, battered, full of scribbles and post-its yet it keeps going, and the binding is still perfect!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.expertreviews.co.uk/tvs-entertainment/headphones/53244/sony-mdr-10rc-review&#34;&gt;&lt;strong&gt;Sony MDR-10RC Headphones&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
A reasonanly nice set of headphones! They sound nice, and the ear pads are comfy, but they don&amp;rsquo;t stay on my head very well, so it&amp;rsquo;s basically impossible to walk in them and I need to be careful not to whip my head around too quickly! However they were cheap when I bought them and they have a removable non-proprietary cable which has been useful a few times now.
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I don&amp;rsquo;t like replacing things for no reason so I&amp;rsquo;ll use these until they die and then I&amp;rsquo;ll probably replace them with some reasonable quality Bluetooth headphones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cables&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I wish I could avoid taking a MacBook charger with me everywhere, but I can&amp;rsquo;t because my laptop is terrible and it would be dead by lunchtime otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1TB Hard Drive&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
Nothing particulaly special or interesting, not even sure why I carry this around except that it feels useful to have some storage on me sometimes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.baggu.com&#34;&gt;&lt;strong&gt;Baggu foldable, reusable tote bag&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
Love this, it folds up small, is lightweight, but also way bigger than it feels like it should be and holds a lot, also mine is Shopify branded which makes me happy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pens&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
I carry two pens with me most days, a &lt;a href=&#34;https://www.jetpens.com/Lamy-Al-Star-Fountain-Pen-Fine-Nib-Ruby-Red-Body-Limited-Edition/pd/8122&#34;&gt;a Ruby Red Lamy Al-Star fountain pen&lt;/a&gt;, that I&amp;rsquo;ve put a fine black nib in. It looks cool, has Ruby in the name and is lovely to write with!
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
The other pen is one I bought when I started work at Shopify because I knew I&amp;rsquo;d be flying to Canada and back periodically and flying with fountain pens can be a messy business. It&amp;rsquo;s a &lt;a href=&#34;https://www.cultpens.com/i/q/ZB57201/zebra-f-xmd-stainless-steel-ballpoint-pen&#34;&gt;Zebra f-XMD&lt;/a&gt; that I&amp;rsquo;ve slightly modified in order to fit a Fisher space pen refill. It&amp;rsquo;s super reliable and really nice to hold I actually find myself using this one more than my fountain pen!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;USB adapters&lt;/strong&gt;&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
Have to carry these as my HDD, DAP and Phone are all USB-A and my laptop just has USB-C&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Glasses case&lt;/strong&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;Nothing special here - I always carry a glasses case containing a small bottle of lens cleaner and a lint-free lens cloth. Handy for screens and electronics as well as glasses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gaiam.com/collections/hydration/products/stainless-steel-wide-mouth-water-bottle-18oz?variant=36474068289&#34;&gt;&lt;strong&gt;GAIAM 18oz water bottle&lt;/strong&gt;&lt;/a&gt;&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
Wide mouthed and double walled, so good for keeping water cool or tea hot! Also good for soup because of the wide mouth! I fill this with Sencha in the morning and when I&amp;rsquo;ve finished that I refill it with water during the day. I really like this bottle, it looks nice and is pleasant to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Nexus_7_(2013)&#34;&gt;&lt;strong&gt;2013 Nexus 7 tablet 32Gb&lt;/strong&gt;&lt;/a&gt;
&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;In a &lt;a href=&#34;https://www.amazon.co.uk/MoKo-Google-Nexus-2013-Case/dp/B00CKA1IYU&#34;&gt;Moko case&lt;/a&gt; which came with the tablet when I bought it on eBay and I&amp;rsquo;ve kept it because it&amp;rsquo;s really nice.&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;I can, and will, write about this tablet seperately I&amp;rsquo;ve set it up as a dumb media device and I&amp;rsquo;m pretty pleased with the result. I bought it specifically for this purpose despite its age because it has such a good screen, the high DPI combined with a 7&amp;quot; form factor makes it perfect for reading Manga! &lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
It&amp;rsquo;s running a custom stripped down version of Android with all the radios disabled, it never touches the internet, has no Google, only a handful of apps (all of which have been sideloaded), and a stripped down homescreen.&lt;br style=&#34;display: block; margin-bottom: 1.2em&#34;/&gt;
It is configured to do only 3 things: read manga, read ebooks, and watch video. All content is pushed directly to the device from my computer using ADB and a collection of scripts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&amp;rsquo;s it. If you&amp;rsquo;ve made it this far I hope the contents of my bag have been somewhat interesting, and worth the last few minutes of your time!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Migrating to Hugo</title>
      <link>https://www.eightbitraptor.com/2018/12/17/migrating-to-hugo/</link>
      <pubDate>Mon, 17 Dec 2018 19:30:22 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2018/12/17/migrating-to-hugo/</guid>
      <description>&lt;p&gt;I originally started my first personal site and blog in 2009 on the
now defunct domain &lt;code&gt;theshadowaspect.com&lt;/code&gt;. It didn&amp;rsquo;t take me long to
decide that I really wasn&amp;rsquo;t a fan of the name and so in January 2010 I
registered &lt;code&gt;eightbitraptor.com&lt;/code&gt; where I&amp;rsquo;ve been ever since.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been through a bunch of hosting methods and various codebases
since I started. from most of the common CMS&amp;rsquo;s on various cheap shared
hosting solutions to some custom applications in Rails, Django and
Sinatra on Heroku, mostly as learning experiences. Since 2017 I&amp;rsquo;ve
been using Jekyll and Github pages.&lt;/p&gt;
&lt;p&gt;Jekyll&amp;rsquo;s nice and all, but me and Jekyll never really clicked. So as
of now I&amp;rsquo;m moving this site over to &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; a
static site generator built in Go.&lt;/p&gt;
&lt;p&gt;As part of this move I&amp;rsquo;ve been reading and re-evealuating the content
from the old site and I&amp;rsquo;ve decided that &lt;strong&gt;I won&amp;rsquo;t be moving most of
the old posts from the Jekyll site to the new Hugo
incarnation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There was previous little useful content there anyway, most of the
older posts had serious presentation and formatting issues from being
migrated so many times in the past and the content was mostly just so
old as to be out of date anyway. The few that I still think might be
useful to someone will start to appear here over the next few weeks as
I clean them up and get them published.&lt;/p&gt;
&lt;p&gt;Anyway, let&amp;rsquo;s talk about Hugo. I&amp;rsquo;ve only had a couple of hours with it
so far but it has a couple of things that I immediately like:&lt;/p&gt;
&lt;h2 id=&#34;themes-are-installed-in-directories-in-your-site&#34;&gt;Themes are installed in directories in your site&lt;/h2&gt;
&lt;p&gt;Jekyll now recommends having your themes as a separate Ruby Gem and
using your Gemfile to manage them, which is much better than the
common way of using themes when I started with Jekyll, which was to
clone/fork the theme directly and start adding your posts and content
straight into it!&lt;/p&gt;
&lt;p&gt;Hugo gives you a &lt;code&gt;themes&lt;/code&gt; directory, and tells you to put your theme
in that directory and tell your &lt;code&gt;config.toml&lt;/code&gt; which one you want to
use. I like this approach. Separating of theme and content makes
tweaking your design or changing your theme a much simpler process,
but you also don&amp;rsquo;t have the complexity of managing multiple projects
and a programming languages packaging infrastructure.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using someone else&amp;rsquo;s theme, and the way I am managing this is to
fork the original author&amp;rsquo;s repository, and install it into my Hugo
repository as a Git Submodule. That way I can manage the version I am
using, make changes when I want to without having to re-deploy my
site, and contribute code back upstream.&lt;/p&gt;
&lt;h2 id=&#34;i-can-treat-hugo-like-a-black-box&#34;&gt;I can treat Hugo like a black box&lt;/h2&gt;
&lt;p&gt;Related to the previous point, as well as not having to care about
Gem&amp;rsquo;s and Bundler. I haven&amp;rsquo;t felt with Hugo that I have to care about
programming. This might seem like an odd thing to hear coming from a
professional programmer, but I&amp;rsquo;ve got enough Yak&amp;rsquo;s to shave as it is
without having to spend time tweaking/fixing/extending my static site
when I don&amp;rsquo;t have to.&lt;/p&gt;
&lt;p&gt;I always felt with Jekyll that I had to write a lot of Ruby in order
to do what I wanted to do, in addition to knowing how Ruby&amp;rsquo;s packaging
ecosystem worked.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m perfectly willing to accept that this may have
been just because I&amp;rsquo;m doing it wrong and didn&amp;rsquo;t really ever invest the
time into learning Jekyll properly. And this is true - I&amp;rsquo;d much rather
be spending my time writing, and working on the things I&amp;rsquo;m writing
about, rather than the thing that allows me to put those words on the
internet!&lt;/p&gt;
&lt;p&gt;On to Hugo. And I&amp;rsquo;m aware it&amp;rsquo;s been written in Go, apparently. I have
built this website in it without having to care about what it&amp;rsquo;s
written in or interact with any sort of Go paraphernalia at all. I
installed a binary on my system and went to work! That&amp;rsquo;s pretty cool.&lt;/p&gt;
&lt;h2 id=&#34;its-fast&#34;&gt;It&amp;rsquo;s fast&lt;/h2&gt;
&lt;p&gt;The website likes to bang on about this, so I&amp;rsquo;m not going to. Except
to say that it&amp;rsquo;s definitely a bit quick.&lt;/p&gt;
&lt;p&gt;Overall, after a couple of hours, I&amp;rsquo;m enjoying Hugo, quite a lot. If
you&amp;rsquo;re looking for a static site generator then I&amp;rsquo;d seriously
encourage you to take a quick peek.&lt;/p&gt;</description>
      <content>&lt;p&gt;I originally started my first personal site and blog in 2009 on the
now defunct domain &lt;code&gt;theshadowaspect.com&lt;/code&gt;. It didn&amp;rsquo;t take me long to
decide that I really wasn&amp;rsquo;t a fan of the name and so in January 2010 I
registered &lt;code&gt;eightbitraptor.com&lt;/code&gt; where I&amp;rsquo;ve been ever since.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been through a bunch of hosting methods and various codebases
since I started. from most of the common CMS&amp;rsquo;s on various cheap shared
hosting solutions to some custom applications in Rails, Django and
Sinatra on Heroku, mostly as learning experiences. Since 2017 I&amp;rsquo;ve
been using Jekyll and Github pages.&lt;/p&gt;
&lt;p&gt;Jekyll&amp;rsquo;s nice and all, but me and Jekyll never really clicked. So as
of now I&amp;rsquo;m moving this site over to &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; a
static site generator built in Go.&lt;/p&gt;
&lt;p&gt;As part of this move I&amp;rsquo;ve been reading and re-evealuating the content
from the old site and I&amp;rsquo;ve decided that &lt;strong&gt;I won&amp;rsquo;t be moving most of
the old posts from the Jekyll site to the new Hugo
incarnation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There was previous little useful content there anyway, most of the
older posts had serious presentation and formatting issues from being
migrated so many times in the past and the content was mostly just so
old as to be out of date anyway. The few that I still think might be
useful to someone will start to appear here over the next few weeks as
I clean them up and get them published.&lt;/p&gt;
&lt;p&gt;Anyway, let&amp;rsquo;s talk about Hugo. I&amp;rsquo;ve only had a couple of hours with it
so far but it has a couple of things that I immediately like:&lt;/p&gt;
&lt;h2 id=&#34;themes-are-installed-in-directories-in-your-site&#34;&gt;Themes are installed in directories in your site&lt;/h2&gt;
&lt;p&gt;Jekyll now recommends having your themes as a separate Ruby Gem and
using your Gemfile to manage them, which is much better than the
common way of using themes when I started with Jekyll, which was to
clone/fork the theme directly and start adding your posts and content
straight into it!&lt;/p&gt;
&lt;p&gt;Hugo gives you a &lt;code&gt;themes&lt;/code&gt; directory, and tells you to put your theme
in that directory and tell your &lt;code&gt;config.toml&lt;/code&gt; which one you want to
use. I like this approach. Separating of theme and content makes
tweaking your design or changing your theme a much simpler process,
but you also don&amp;rsquo;t have the complexity of managing multiple projects
and a programming languages packaging infrastructure.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using someone else&amp;rsquo;s theme, and the way I am managing this is to
fork the original author&amp;rsquo;s repository, and install it into my Hugo
repository as a Git Submodule. That way I can manage the version I am
using, make changes when I want to without having to re-deploy my
site, and contribute code back upstream.&lt;/p&gt;
&lt;h2 id=&#34;i-can-treat-hugo-like-a-black-box&#34;&gt;I can treat Hugo like a black box&lt;/h2&gt;
&lt;p&gt;Related to the previous point, as well as not having to care about
Gem&amp;rsquo;s and Bundler. I haven&amp;rsquo;t felt with Hugo that I have to care about
programming. This might seem like an odd thing to hear coming from a
professional programmer, but I&amp;rsquo;ve got enough Yak&amp;rsquo;s to shave as it is
without having to spend time tweaking/fixing/extending my static site
when I don&amp;rsquo;t have to.&lt;/p&gt;
&lt;p&gt;I always felt with Jekyll that I had to write a lot of Ruby in order
to do what I wanted to do, in addition to knowing how Ruby&amp;rsquo;s packaging
ecosystem worked.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m perfectly willing to accept that this may have
been just because I&amp;rsquo;m doing it wrong and didn&amp;rsquo;t really ever invest the
time into learning Jekyll properly. And this is true - I&amp;rsquo;d much rather
be spending my time writing, and working on the things I&amp;rsquo;m writing
about, rather than the thing that allows me to put those words on the
internet!&lt;/p&gt;
&lt;p&gt;On to Hugo. And I&amp;rsquo;m aware it&amp;rsquo;s been written in Go, apparently. I have
built this website in it without having to care about what it&amp;rsquo;s
written in or interact with any sort of Go paraphernalia at all. I
installed a binary on my system and went to work! That&amp;rsquo;s pretty cool.&lt;/p&gt;
&lt;h2 id=&#34;its-fast&#34;&gt;It&amp;rsquo;s fast&lt;/h2&gt;
&lt;p&gt;The website likes to bang on about this, so I&amp;rsquo;m not going to. Except
to say that it&amp;rsquo;s definitely a bit quick.&lt;/p&gt;
&lt;p&gt;Overall, after a couple of hours, I&amp;rsquo;m enjoying Hugo, quite a lot. If
you&amp;rsquo;re looking for a static site generator then I&amp;rsquo;d seriously
encourage you to take a quick peek.&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Working with headless VirtualBox VM&#39;s</title>
      <link>https://www.eightbitraptor.com/2016/07/08/working-with-headless-virtualbox-vms/</link>
      <pubDate>Fri, 08 Jul 2016 09:30:00 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2016/07/08/working-with-headless-virtualbox-vms/</guid>
      <description>&lt;p&gt;I spend a lot of time using both OSX and Linux. Personally I tend to prefer using Linux, however my work have provided me with a MacBook Pro and in order to make working with my colleagues as pain free as possible, I use OSX on it.&lt;/p&gt;
&lt;p&gt;I still like to do a lot of work that relies on being on Linux however, and there are a bunch of ways to acheive this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dual boot my MacBook - I tried this for 6 months. It&amp;rsquo;s complex and annoying to get set up and configure and half of the hardware doesn&amp;rsquo;t work properly anyway (I tried, and failed to make a dual screen setup useable when one of the screens is a retina display).&lt;/li&gt;
&lt;li&gt;Compile the Linux kernel toolchain on OSX - Nope. I don&amp;rsquo;t have the smarts, nor the inclination for this, and I suspect that I wouldn&amp;rsquo;t be able to do most of what I actually want to do anyway due to lack of support for userspace tools.&lt;/li&gt;
&lt;li&gt;Use Virtual Machines for Linux tasks - Running VM&amp;rsquo;s can be slow if you run them as &amp;lsquo;complete&amp;rsquo; VM&amp;rsquo;s with a full desktop environment etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I went with option 3, with some tweaks. I run all my VM&amp;rsquo;s using VirtualBox, in headless mode, so there&amp;rsquo;s no extra window and no GUI. I can then &lt;code&gt;ssh&lt;/code&gt; into them from my OSX terminal, which makes integration with my Mac&amp;rsquo;s paste buffer a lot more seamless, as well as meaning I can work in my OSX terminal, which at this point is configured how I like it. I also use VirtualBox shared folders feature to share source code directories on my mac directly with the VM. This means I can use my local OSX installed instance of Emacs to work on these projects, which is definitely a good thing.&lt;/p&gt;
&lt;p&gt;This post assumes that you&amp;rsquo;ve already installed VirtualBox, and created a VM onto which you have installed your Linux distro of choice, and also installed the VirtualBox guest additions package into that guest OS. All instructions here are written for Fedora, as that&amp;rsquo;s my preferred Linux distribution these days. They should work on other distro&amp;rsquo;s with minor modification although package names will probably be different.&lt;/p&gt;
&lt;h3 id=&#34;configuring-ssh-port-forwarding&#34;&gt;configuring SSH port forwarding&lt;/h3&gt;
&lt;p&gt;The first thing you&amp;rsquo;ll need to do is boot your VM normally (with the GUI), log in and install an OpenSSH server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install openssh
sudo systemctl start sshd
sudo systemctl enable sshd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can shut down your VM and configure SSH port forwarding for your VM. This will enable you to connect to your guest VM through &lt;code&gt;localhost&lt;/code&gt; on your host OS. On your &lt;em&gt;host&lt;/em&gt; OS you can do this as follows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Fedora Dev is the name of my VM that from the VirtualBox machine list
# 2222 is the port on the host who&#39;s traffic you wish to forward
# 22 is the destination port on the guest where the traffic is forwarded

VBoxManage modifyvm &amp;quot;Fedora Dev&amp;quot; --natpf1 &amp;quot;guestssh,tcp,,3021,,22&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can start your VM in headless mode and ssh into it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VBoxManage startvm &amp;quot;Fedora Dev&amp;quot; --type headless
ssh -p 3021 username@localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configuring-shared-folders&#34;&gt;Configuring shared folders&lt;/h3&gt;
&lt;p&gt;VirtualBox has a feature that can share folders from your host OS into your guest. In Linux guests the folders appear as block devices that can be mounted wherever you require. It also has the ability to auto-mount these filesystems at boot. We&amp;rsquo;re not going to do this as the VirtualBox UI isn&amp;rsquo;t very configurable.&lt;/p&gt;
&lt;p&gt;First create a &amp;lsquo;shared folder&amp;rsquo;, this will create a mountable block device on the guest.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VBoxManage sharedfolder add &amp;quot;Fedora Dev&amp;quot; -name &amp;quot;test_project&amp;quot; \
  -hostpath &amp;quot;~/code/projects/test_project&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can test that this works by connecting to your guest and running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mount -t vboxsf test_project /media/test_project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming that that works and you can now see your files in &lt;code&gt;/media/test_project&lt;/code&gt; we can move on to the next step, which is getting the filesystem to mount automatically on boot, with the correct user and permissions. For this we need to add an entry to the &lt;code&gt;/etc/fstab&lt;/code&gt; file on the guest (as root). That line looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test_project  /test_project  vboxsf  uid=1000,gid=1000,umask=0022  0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will mount your VirtualBox share under the directory &lt;code&gt;/test_project&lt;/code&gt; with the owner and group set to your user. The last thing we need to do is make sure that the &lt;code&gt;vboxsf&lt;/code&gt; kernel module is loaded early enough in the boot process that it can mount your filesystem as the machine is starting. If this module is not loaded, then your machine will fail to boot and you&amp;rsquo;ll get dumped into a single user prompt.&lt;/p&gt;
&lt;p&gt;If this does happen it&amp;rsquo;s not a big deal - you&amp;rsquo;ll just need to start the machine in non-headless mode so you can access the GUI, and configure the machine to load the module.&lt;/p&gt;
&lt;p&gt;On Fedora, we can make sure a module is loaded on boot by adding it&amp;rsquo;s name into a file in the &lt;code&gt;/etc/modules.d&lt;/code&gt; tree. Do the following, as root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch /etc/modules.d/vbox.conf
echo &amp;quot;vboxsf&amp;quot; &amp;gt;&amp;gt; /etc/modules.d/vbox.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the module is configured to load on boot, you can shutdown the machine and start it up again in headless mode using the command above. You should now be able to edit your source code using your favourite editor on the host system, and do your compilation tasks and testing through the ssh connection on the Linux guest.&lt;/p&gt;
&lt;h3 id=&#34;running-x11-applications&#34;&gt;Running X11 applications&lt;/h3&gt;
&lt;p&gt;If you have a server that&amp;rsquo;s running in headless mode, but you want to be able to run GUI applications you can run &lt;code&gt;ssh&lt;/code&gt; with X11 forwarding. To do this you&amp;rsquo;ll need an X server running on your OSX host machine. I use &lt;a href=&#34;https://www.xquartz.org&#34;&gt;XQuartz&lt;/a&gt;. Download and install the latest version of XQuartz and then connect to your server using ssh, as above, but also pass the &lt;code&gt;-X&lt;/code&gt; flag&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -X -p 3021 username@localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you can run gui apps from the command line and you should see XQuartz start up and the application will appear as a normal window on your OSX Desktop. I tested this out on my machine using the command &lt;code&gt;gedit &amp;amp;&lt;/code&gt; to start gedit in the background and give me my terminal back.&lt;/p&gt;
</description>
      <content>&lt;p&gt;I spend a lot of time using both OSX and Linux. Personally I tend to prefer using Linux, however my work have provided me with a MacBook Pro and in order to make working with my colleagues as pain free as possible, I use OSX on it.&lt;/p&gt;
&lt;p&gt;I still like to do a lot of work that relies on being on Linux however, and there are a bunch of ways to acheive this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dual boot my MacBook - I tried this for 6 months. It&amp;rsquo;s complex and annoying to get set up and configure and half of the hardware doesn&amp;rsquo;t work properly anyway (I tried, and failed to make a dual screen setup useable when one of the screens is a retina display).&lt;/li&gt;
&lt;li&gt;Compile the Linux kernel toolchain on OSX - Nope. I don&amp;rsquo;t have the smarts, nor the inclination for this, and I suspect that I wouldn&amp;rsquo;t be able to do most of what I actually want to do anyway due to lack of support for userspace tools.&lt;/li&gt;
&lt;li&gt;Use Virtual Machines for Linux tasks - Running VM&amp;rsquo;s can be slow if you run them as &amp;lsquo;complete&amp;rsquo; VM&amp;rsquo;s with a full desktop environment etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I went with option 3, with some tweaks. I run all my VM&amp;rsquo;s using VirtualBox, in headless mode, so there&amp;rsquo;s no extra window and no GUI. I can then &lt;code&gt;ssh&lt;/code&gt; into them from my OSX terminal, which makes integration with my Mac&amp;rsquo;s paste buffer a lot more seamless, as well as meaning I can work in my OSX terminal, which at this point is configured how I like it. I also use VirtualBox shared folders feature to share source code directories on my mac directly with the VM. This means I can use my local OSX installed instance of Emacs to work on these projects, which is definitely a good thing.&lt;/p&gt;
&lt;p&gt;This post assumes that you&amp;rsquo;ve already installed VirtualBox, and created a VM onto which you have installed your Linux distro of choice, and also installed the VirtualBox guest additions package into that guest OS. All instructions here are written for Fedora, as that&amp;rsquo;s my preferred Linux distribution these days. They should work on other distro&amp;rsquo;s with minor modification although package names will probably be different.&lt;/p&gt;
&lt;h3 id=&#34;configuring-ssh-port-forwarding&#34;&gt;configuring SSH port forwarding&lt;/h3&gt;
&lt;p&gt;The first thing you&amp;rsquo;ll need to do is boot your VM normally (with the GUI), log in and install an OpenSSH server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install openssh
sudo systemctl start sshd
sudo systemctl enable sshd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can shut down your VM and configure SSH port forwarding for your VM. This will enable you to connect to your guest VM through &lt;code&gt;localhost&lt;/code&gt; on your host OS. On your &lt;em&gt;host&lt;/em&gt; OS you can do this as follows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Fedora Dev is the name of my VM that from the VirtualBox machine list
# 2222 is the port on the host who&#39;s traffic you wish to forward
# 22 is the destination port on the guest where the traffic is forwarded

VBoxManage modifyvm &amp;quot;Fedora Dev&amp;quot; --natpf1 &amp;quot;guestssh,tcp,,3021,,22&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can start your VM in headless mode and ssh into it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VBoxManage startvm &amp;quot;Fedora Dev&amp;quot; --type headless
ssh -p 3021 username@localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configuring-shared-folders&#34;&gt;Configuring shared folders&lt;/h3&gt;
&lt;p&gt;VirtualBox has a feature that can share folders from your host OS into your guest. In Linux guests the folders appear as block devices that can be mounted wherever you require. It also has the ability to auto-mount these filesystems at boot. We&amp;rsquo;re not going to do this as the VirtualBox UI isn&amp;rsquo;t very configurable.&lt;/p&gt;
&lt;p&gt;First create a &amp;lsquo;shared folder&amp;rsquo;, this will create a mountable block device on the guest.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VBoxManage sharedfolder add &amp;quot;Fedora Dev&amp;quot; -name &amp;quot;test_project&amp;quot; \
  -hostpath &amp;quot;~/code/projects/test_project&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can test that this works by connecting to your guest and running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mount -t vboxsf test_project /media/test_project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming that that works and you can now see your files in &lt;code&gt;/media/test_project&lt;/code&gt; we can move on to the next step, which is getting the filesystem to mount automatically on boot, with the correct user and permissions. For this we need to add an entry to the &lt;code&gt;/etc/fstab&lt;/code&gt; file on the guest (as root). That line looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test_project  /test_project  vboxsf  uid=1000,gid=1000,umask=0022  0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will mount your VirtualBox share under the directory &lt;code&gt;/test_project&lt;/code&gt; with the owner and group set to your user. The last thing we need to do is make sure that the &lt;code&gt;vboxsf&lt;/code&gt; kernel module is loaded early enough in the boot process that it can mount your filesystem as the machine is starting. If this module is not loaded, then your machine will fail to boot and you&amp;rsquo;ll get dumped into a single user prompt.&lt;/p&gt;
&lt;p&gt;If this does happen it&amp;rsquo;s not a big deal - you&amp;rsquo;ll just need to start the machine in non-headless mode so you can access the GUI, and configure the machine to load the module.&lt;/p&gt;
&lt;p&gt;On Fedora, we can make sure a module is loaded on boot by adding it&amp;rsquo;s name into a file in the &lt;code&gt;/etc/modules.d&lt;/code&gt; tree. Do the following, as root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch /etc/modules.d/vbox.conf
echo &amp;quot;vboxsf&amp;quot; &amp;gt;&amp;gt; /etc/modules.d/vbox.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the module is configured to load on boot, you can shutdown the machine and start it up again in headless mode using the command above. You should now be able to edit your source code using your favourite editor on the host system, and do your compilation tasks and testing through the ssh connection on the Linux guest.&lt;/p&gt;
&lt;h3 id=&#34;running-x11-applications&#34;&gt;Running X11 applications&lt;/h3&gt;
&lt;p&gt;If you have a server that&amp;rsquo;s running in headless mode, but you want to be able to run GUI applications you can run &lt;code&gt;ssh&lt;/code&gt; with X11 forwarding. To do this you&amp;rsquo;ll need an X server running on your OSX host machine. I use &lt;a href=&#34;https://www.xquartz.org&#34;&gt;XQuartz&lt;/a&gt;. Download and install the latest version of XQuartz and then connect to your server using ssh, as above, but also pass the &lt;code&gt;-X&lt;/code&gt; flag&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -X -p 3021 username@localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you can run gui apps from the command line and you should see XQuartz start up and the application will appear as a normal window on your OSX Desktop. I tested this out on my machine using the command &lt;code&gt;gedit &amp;amp;&lt;/code&gt; to start gedit in the background and give me my terminal back.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The Emacs startup process: Init files</title>
      <link>https://www.eightbitraptor.com/2014/07/21/the-emacs-startup-process-init-files/</link>
      <pubDate>Mon, 21 Jul 2014 09:30:00 +0000</pubDate>
      
      <guid>https://www.eightbitraptor.com/2014/07/21/the-emacs-startup-process-init-files/</guid>
      <description>&lt;p&gt;I started thinking about this when I arranged a short remote pairing
session to help a friend work through some pain he was having with his
Emacs configuration. The session hasn&amp;rsquo;t happened yet but it got me
interested enough in what Emacs does under the hood when it starts up,
particularly when it loads your config and I though it might make an
interesting blog post.&lt;/p&gt;
&lt;h3 id=&#34;the-emacs-file&#34;&gt;The &lt;code&gt;.emacs&lt;/code&gt; file.&lt;/h3&gt;
&lt;p&gt;When Emacs starts up it loads your configuration from a file. It looks
for this file in a number of places in your home directory, in order,
these are: &lt;code&gt;~/.emacs&lt;/code&gt;, &lt;code&gt;~/.emacs.el&lt;/code&gt; and &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;. The
last form is the most common as it allows you to split your
configuration up into multiple files. You can then control when these
are loaded by using &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;autoload&lt;/code&gt; in your
configuration. This keeps your initial Emacs memory footprint quite
small and ensures Emacs is quick to load, and just pulls in extra
libraries and configuration when you need it.&lt;/p&gt;
&lt;p&gt;The mode system helps a lot. You&amp;rsquo;ll often see people with files like
&lt;code&gt;ruby.el&lt;/code&gt;, &lt;code&gt;python.el&lt;/code&gt; or &lt;code&gt;scheme.el&lt;/code&gt; in their emacs directories. They
will then put all their specific language related config in there and
with a couple of lines in their main &lt;code&gt;init.el&lt;/code&gt; they can only require
those files the first time they open a specific file, or start a
specific mode in Emacs&lt;/p&gt;
&lt;p&gt;Emacs does not load these its config files sequentially. If it finds a
&lt;code&gt;~/.emacs&lt;/code&gt; file, it will interpret that file and then it will stop
searching, so you cannot use this mechanism to provide default
overrideable configuration. But it&amp;rsquo;s OK, Emacs has you covered!&lt;/p&gt;
&lt;h3 id=&#34;the-site-start-and-defaultel-files&#34;&gt;The site-start and default.el files&lt;/h3&gt;
&lt;p&gt;If you want to provide default Emacs configuration; for instance, if
you&amp;rsquo;re a system administrator and want to set up some friendly
overrideable default configuration for your users; Or you use Emacs on
a bunch of different machines and you want some system specific
variables defined for each machine, and want to keep them out of your
main, shared Emacs config; you&amp;rsquo;d put that shared config in either
&lt;code&gt;site-start.el&lt;/code&gt; or &lt;code&gt;default.el&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These two files need to live somewhere in your Emacs library load
path. They are loaded on startup around your own custom configuration
and which one you use depends on how easy you want to make it for
people to ignore these settings.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;site-start&lt;/code&gt; file gets loaded &lt;strong&gt;before&lt;/strong&gt; your Emacs file, so any
configuration set in here will get overridden by conflicting
information in your config files. For example, you can define some
keyboard shortcuts in here that will be made available to every Emacs
user on the system, but won&amp;rsquo;t clobber anything they&amp;rsquo;ve configured to
use the same keys. You can prevent &lt;code&gt;site-start&lt;/code&gt; from being required,
but because it runs before your config file you have to do it using by
passing the &lt;code&gt;--no-site-file&lt;/code&gt; argument when you start Emacs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; file gets loaded after your Emacs configuration, so it
provides a way of clobbering users&amp;rsquo; custom settings or providing extra
config that they may have forgotten. This is not something you should
rely on however, as it&amp;rsquo;s possible by bypass loading this file.&lt;/p&gt;
&lt;p&gt;If you set the variable &lt;code&gt;inhibit-default-init&lt;/code&gt; to something non-&lt;code&gt;nil&lt;/code&gt;
in your Emacs config it will prevent &lt;code&gt;default.el&lt;/code&gt; from being run.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s the basics of how Emacs starts and what it loads. You can do
a lot more than just that however and Emacs offers massive levels of
control. So let&amp;rsquo;s take a look at some other things that you might need
to know.&lt;/p&gt;
&lt;h3 id=&#34;customize-mode&#34;&gt;Customize mode&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve spelt customise with the American spelling in the title for a
reason. At some point in your Emacs journey you&amp;rsquo;ll end up looking at
the Emacs &amp;lsquo;Customize mode&amp;rsquo;. You can get to this by running &lt;code&gt;M-x customize&lt;/code&gt; and it provides an excellent interface for configuring
Emacs. Most things that you&amp;rsquo;ll want to do commonly have entries in
Customize mode, and Emacs provides an API for adding Customize mode
compatability to your own Emacs lisp libraries.&lt;/p&gt;
&lt;p&gt;By default when you change a setting using the Customize interface it
adds an entry into your &lt;code&gt;init.el&lt;/code&gt; that looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(custom-set-variables
;; custom-set-variables was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won&#39;t work right.
&#39;(ansi-color-faces-vector [default bold shadow italic underline bold bold-italic bold]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the warning says, you should avoid touching this block by hand and
make sure there is only one such block in your Emacs config. Because
this section feels a little more subject to churn than my standard
&lt;code&gt;init.el&lt;/code&gt; file and because there are more serious consequences to
breaking it, I like to split it out into its own file, that I can deal
with separately. Emacs provides a variable that you can set called
&lt;code&gt;custom-file&lt;/code&gt; just for this purpose. By default this value is set to
&lt;code&gt;nil&lt;/code&gt; which tells Emacs to just use your &lt;code&gt;init.el&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; Store emacs customisation system stuff in a seperate file
(setq custom-file &amp;quot;~/.emacs.d/customisations.el&amp;quot;)
(load custom-file)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that both of the above lines are necessary. The first tells Emacs
where your Customize options should be saved, and the second tells
Emacs to load those customisations.&lt;/p&gt;
&lt;p&gt;After this change, our current load order looks like this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;site-start.el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.emacs || ~/.emacs.el || ~/.emacs.d/init.el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.emacs.d/customisations.el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default.el&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;other-variables-of-note&#34;&gt;Other variables of note.&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;user-emacs-directory&lt;/code&gt; - Tell Emacs that you want your config
directory to live somewhere specific. By Default this is set to
&lt;code&gt;~/.emacs.d/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;package-user-dir&lt;/code&gt; - Tell Emacs where you want ELPA packages
placed. These are packages that you install using Emacs 24&amp;rsquo;s built in
package manager (&lt;code&gt;M-x package-install&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;m sure there are plenty more, but these are some important ones that
I&amp;rsquo;ve used recently. &lt;code&gt;user-emacs-directory&lt;/code&gt; particularly can be helpful
when you want to test or debug changes to your config as you can load
one then the other to spot changes between them.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t forget as well that Emacs has an exceptionally in-depth help
system built in. You can search it with &lt;code&gt;M-x apropros&lt;/code&gt; or find
information about any variable, function of keybinding using &lt;code&gt;C-h v&lt;/code&gt;,
&lt;code&gt;C-h f&lt;/code&gt; and &lt;code&gt;C-h k&lt;/code&gt; respectively. This even works for things defined
in your own Emacs config!&lt;/p&gt;
&lt;h3 id=&#34;byte-compiling&#34;&gt;Byte compiling&lt;/h3&gt;
&lt;p&gt;Byte compiling your configuration can speed up the loading of your
config, and in fact, any Emacs lisp that you write. This is the
process of turning the source code you write into an intermediary form
that can be read directly by the Lisp interpreter built into Emacs.&lt;/p&gt;
&lt;p&gt;After byte compilation has been carried out you will have a &lt;code&gt;.elc&lt;/code&gt;
file corresponding to every &lt;code&gt;.el&lt;/code&gt; file that you have compiled. Their
contents will contain stuff that looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(byte-code &amp;quot;\303\304\305\&amp;quot;\211\203ÔøΩ)\306\307!\203ÔøΩ\307\303\207&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When emacs looks for a file to load, it will automatically prefer any
file ending with &lt;code&gt;elc&lt;/code&gt;. That is, when you &lt;code&gt;(require &#39;foo)&lt;/code&gt; If Emacs
finds a file called &lt;code&gt;foo.elc&lt;/code&gt; before it find &lt;code&gt;foo.el&lt;/code&gt; while searching
the load path, it will always load it first, even if the compiled
version appears later in the load path.  ### Aside: Emacs &amp;amp;
&lt;code&gt;load-path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When we said that Emacs looks in your library load path for the site
specific files, we neglected to mention what that is. By default it
contains only 2 entries: &lt;code&gt;/usr/local/share/emacs/version/site-lisp&lt;/code&gt;
and &lt;code&gt;/usr/local/share/emacs/site-lisp&lt;/code&gt; in that order. The order
matters because Emacs will only load the first file that matches what
it&amp;rsquo;s looking for.&lt;/p&gt;
&lt;p&gt;You can override the initial value of your load path by setting the
environment variable &lt;code&gt;EMACSLOADPATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you are within Emacs you can treat the load path as any other
list, pushing and popping variables off it at will. There are a few
other ways that directories can end up on the load path, but they are
less comonnly used. You can read more about them here:
&lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html&#34;&gt;http://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope this has been helpful. If you want to dig into this further
there are some excellent resources online, particularly the Emacs
manual, which you can access using &lt;code&gt;C-h r&lt;/code&gt; from within Emacs or on the
web &lt;a href=&#34;http://www.gnu.org/software/emacs/manual&#34;&gt;at the GNU Emacs
homepage&lt;/a&gt;&lt;/p&gt;
</description>
      <content>&lt;p&gt;I started thinking about this when I arranged a short remote pairing
session to help a friend work through some pain he was having with his
Emacs configuration. The session hasn&amp;rsquo;t happened yet but it got me
interested enough in what Emacs does under the hood when it starts up,
particularly when it loads your config and I though it might make an
interesting blog post.&lt;/p&gt;
&lt;h3 id=&#34;the-emacs-file&#34;&gt;The &lt;code&gt;.emacs&lt;/code&gt; file.&lt;/h3&gt;
&lt;p&gt;When Emacs starts up it loads your configuration from a file. It looks
for this file in a number of places in your home directory, in order,
these are: &lt;code&gt;~/.emacs&lt;/code&gt;, &lt;code&gt;~/.emacs.el&lt;/code&gt; and &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;. The
last form is the most common as it allows you to split your
configuration up into multiple files. You can then control when these
are loaded by using &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;autoload&lt;/code&gt; in your
configuration. This keeps your initial Emacs memory footprint quite
small and ensures Emacs is quick to load, and just pulls in extra
libraries and configuration when you need it.&lt;/p&gt;
&lt;p&gt;The mode system helps a lot. You&amp;rsquo;ll often see people with files like
&lt;code&gt;ruby.el&lt;/code&gt;, &lt;code&gt;python.el&lt;/code&gt; or &lt;code&gt;scheme.el&lt;/code&gt; in their emacs directories. They
will then put all their specific language related config in there and
with a couple of lines in their main &lt;code&gt;init.el&lt;/code&gt; they can only require
those files the first time they open a specific file, or start a
specific mode in Emacs&lt;/p&gt;
&lt;p&gt;Emacs does not load these its config files sequentially. If it finds a
&lt;code&gt;~/.emacs&lt;/code&gt; file, it will interpret that file and then it will stop
searching, so you cannot use this mechanism to provide default
overrideable configuration. But it&amp;rsquo;s OK, Emacs has you covered!&lt;/p&gt;
&lt;h3 id=&#34;the-site-start-and-defaultel-files&#34;&gt;The site-start and default.el files&lt;/h3&gt;
&lt;p&gt;If you want to provide default Emacs configuration; for instance, if
you&amp;rsquo;re a system administrator and want to set up some friendly
overrideable default configuration for your users; Or you use Emacs on
a bunch of different machines and you want some system specific
variables defined for each machine, and want to keep them out of your
main, shared Emacs config; you&amp;rsquo;d put that shared config in either
&lt;code&gt;site-start.el&lt;/code&gt; or &lt;code&gt;default.el&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These two files need to live somewhere in your Emacs library load
path. They are loaded on startup around your own custom configuration
and which one you use depends on how easy you want to make it for
people to ignore these settings.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;site-start&lt;/code&gt; file gets loaded &lt;strong&gt;before&lt;/strong&gt; your Emacs file, so any
configuration set in here will get overridden by conflicting
information in your config files. For example, you can define some
keyboard shortcuts in here that will be made available to every Emacs
user on the system, but won&amp;rsquo;t clobber anything they&amp;rsquo;ve configured to
use the same keys. You can prevent &lt;code&gt;site-start&lt;/code&gt; from being required,
but because it runs before your config file you have to do it using by
passing the &lt;code&gt;--no-site-file&lt;/code&gt; argument when you start Emacs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; file gets loaded after your Emacs configuration, so it
provides a way of clobbering users&amp;rsquo; custom settings or providing extra
config that they may have forgotten. This is not something you should
rely on however, as it&amp;rsquo;s possible by bypass loading this file.&lt;/p&gt;
&lt;p&gt;If you set the variable &lt;code&gt;inhibit-default-init&lt;/code&gt; to something non-&lt;code&gt;nil&lt;/code&gt;
in your Emacs config it will prevent &lt;code&gt;default.el&lt;/code&gt; from being run.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s the basics of how Emacs starts and what it loads. You can do
a lot more than just that however and Emacs offers massive levels of
control. So let&amp;rsquo;s take a look at some other things that you might need
to know.&lt;/p&gt;
&lt;h3 id=&#34;customize-mode&#34;&gt;Customize mode&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve spelt customise with the American spelling in the title for a
reason. At some point in your Emacs journey you&amp;rsquo;ll end up looking at
the Emacs &amp;lsquo;Customize mode&amp;rsquo;. You can get to this by running &lt;code&gt;M-x customize&lt;/code&gt; and it provides an excellent interface for configuring
Emacs. Most things that you&amp;rsquo;ll want to do commonly have entries in
Customize mode, and Emacs provides an API for adding Customize mode
compatability to your own Emacs lisp libraries.&lt;/p&gt;
&lt;p&gt;By default when you change a setting using the Customize interface it
adds an entry into your &lt;code&gt;init.el&lt;/code&gt; that looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(custom-set-variables
;; custom-set-variables was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won&#39;t work right.
&#39;(ansi-color-faces-vector [default bold shadow italic underline bold bold-italic bold]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the warning says, you should avoid touching this block by hand and
make sure there is only one such block in your Emacs config. Because
this section feels a little more subject to churn than my standard
&lt;code&gt;init.el&lt;/code&gt; file and because there are more serious consequences to
breaking it, I like to split it out into its own file, that I can deal
with separately. Emacs provides a variable that you can set called
&lt;code&gt;custom-file&lt;/code&gt; just for this purpose. By default this value is set to
&lt;code&gt;nil&lt;/code&gt; which tells Emacs to just use your &lt;code&gt;init.el&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; Store emacs customisation system stuff in a seperate file
(setq custom-file &amp;quot;~/.emacs.d/customisations.el&amp;quot;)
(load custom-file)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that both of the above lines are necessary. The first tells Emacs
where your Customize options should be saved, and the second tells
Emacs to load those customisations.&lt;/p&gt;
&lt;p&gt;After this change, our current load order looks like this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;site-start.el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.emacs || ~/.emacs.el || ~/.emacs.d/init.el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.emacs.d/customisations.el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default.el&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;other-variables-of-note&#34;&gt;Other variables of note.&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;user-emacs-directory&lt;/code&gt; - Tell Emacs that you want your config
directory to live somewhere specific. By Default this is set to
&lt;code&gt;~/.emacs.d/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;package-user-dir&lt;/code&gt; - Tell Emacs where you want ELPA packages
placed. These are packages that you install using Emacs 24&amp;rsquo;s built in
package manager (&lt;code&gt;M-x package-install&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;m sure there are plenty more, but these are some important ones that
I&amp;rsquo;ve used recently. &lt;code&gt;user-emacs-directory&lt;/code&gt; particularly can be helpful
when you want to test or debug changes to your config as you can load
one then the other to spot changes between them.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t forget as well that Emacs has an exceptionally in-depth help
system built in. You can search it with &lt;code&gt;M-x apropros&lt;/code&gt; or find
information about any variable, function of keybinding using &lt;code&gt;C-h v&lt;/code&gt;,
&lt;code&gt;C-h f&lt;/code&gt; and &lt;code&gt;C-h k&lt;/code&gt; respectively. This even works for things defined
in your own Emacs config!&lt;/p&gt;
&lt;h3 id=&#34;byte-compiling&#34;&gt;Byte compiling&lt;/h3&gt;
&lt;p&gt;Byte compiling your configuration can speed up the loading of your
config, and in fact, any Emacs lisp that you write. This is the
process of turning the source code you write into an intermediary form
that can be read directly by the Lisp interpreter built into Emacs.&lt;/p&gt;
&lt;p&gt;After byte compilation has been carried out you will have a &lt;code&gt;.elc&lt;/code&gt;
file corresponding to every &lt;code&gt;.el&lt;/code&gt; file that you have compiled. Their
contents will contain stuff that looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(byte-code &amp;quot;\303\304\305\&amp;quot;\211\203ÔøΩ)\306\307!\203ÔøΩ\307\303\207&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When emacs looks for a file to load, it will automatically prefer any
file ending with &lt;code&gt;elc&lt;/code&gt;. That is, when you &lt;code&gt;(require &#39;foo)&lt;/code&gt; If Emacs
finds a file called &lt;code&gt;foo.elc&lt;/code&gt; before it find &lt;code&gt;foo.el&lt;/code&gt; while searching
the load path, it will always load it first, even if the compiled
version appears later in the load path.  ### Aside: Emacs &amp;amp;
&lt;code&gt;load-path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When we said that Emacs looks in your library load path for the site
specific files, we neglected to mention what that is. By default it
contains only 2 entries: &lt;code&gt;/usr/local/share/emacs/version/site-lisp&lt;/code&gt;
and &lt;code&gt;/usr/local/share/emacs/site-lisp&lt;/code&gt; in that order. The order
matters because Emacs will only load the first file that matches what
it&amp;rsquo;s looking for.&lt;/p&gt;
&lt;p&gt;You can override the initial value of your load path by setting the
environment variable &lt;code&gt;EMACSLOADPATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you are within Emacs you can treat the load path as any other
list, pushing and popping variables off it at will. There are a few
other ways that directories can end up on the load path, but they are
less comonnly used. You can read more about them here:
&lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html&#34;&gt;http://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope this has been helpful. If you want to dig into this further
there are some excellent resources online, particularly the Emacs
manual, which you can access using &lt;code&gt;C-h r&lt;/code&gt; from within Emacs or on the
web &lt;a href=&#34;http://www.gnu.org/software/emacs/manual&#34;&gt;at the GNU Emacs
homepage&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
